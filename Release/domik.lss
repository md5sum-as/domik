
./domik:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000019  00010134  00010134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00010150  00010150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00010170  00010170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     0000028c  00010194  00010194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       000004e0  00010420  00010420  00000420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       0000024c  00010900  00010900  00000900  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000009c  00010b4c  00010b4c  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000020  00010be8  00010be8  00000be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000010  00010c08  00010c08  00000c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000260  00010c18  00010c18  00000c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00010e78  00010e78  00000e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          000003a4  00010e84  00010e84  00000e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         000084c4  00011228  00011228  00001228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  000196ec  000196ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       00001a24  000196f4  000196f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  0001b118  0001b118  0000b118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  0001b120  0001b120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  0002b124  0002b124  0000b124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  0002b128  0002b128  0000b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  0002b12c  0002b12c  0000b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      000000e8  0002b130  0002b130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000140  0002b218  0002b218  0000b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         00000634  0002b358  0002b358  0000b358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00001968  0002b990  0002b990  0000b98c  2**3
                  ALLOC
 24 .comment      0000003d  00000000  00000000  0000b98c  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  0000b9c9  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000020  00000000  00000000  0000b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00003361  00000000  00000000  0000ba1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 0000048a  00000000  00000000  0000ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   000007b0  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  000006b0  00000000  00000000  0000f9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    000011a2  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_loc    000028ec  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING
 33 .debug_ranges 000002c8  00000000  00000000  00013af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00010e78 <_init>:
   10e78:	e92d4008 	push	{r3, lr}
   10e7c:	eb0008a4 	bl	13114 <call_weak_fn>
   10e80:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <raise@plt-0x14>:
   10e84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	e59fe004 	ldr	lr, [pc, #4]	; 10e94 <_init+0x1c>
   10e8c:	e08fe00e 	add	lr, pc, lr
   10e90:	e5bef008 	ldr	pc, [lr, #8]!
   10e94:	0001a384 	.word	0x0001a384

00010e98 <raise@plt>:
   10e98:	e28fc600 	add	ip, pc, #0, 12
   10e9c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ea0:	e5bcf384 	ldr	pc, [ip, #900]!	; 0x384

00010ea4 <setitimer@plt>:
   10ea4:	e28fc600 	add	ip, pc, #0, 12
   10ea8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10eac:	e5bcf37c 	ldr	pc, [ip, #892]!	; 0x37c

00010eb0 <strtol@plt>:
   10eb0:	e28fc600 	add	ip, pc, #0, 12
   10eb4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10eb8:	e5bcf374 	ldr	pc, [ip, #884]!	; 0x374

00010ebc <pause@plt>:
   10ebc:	e28fc600 	add	ip, pc, #0, 12
   10ec0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ec4:	e5bcf36c 	ldr	pc, [ip, #876]!	; 0x36c

00010ec8 <printf@plt>:
   10ec8:	e28fc600 	add	ip, pc, #0, 12
   10ecc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ed0:	e5bcf364 	ldr	pc, [ip, #868]!	; 0x364

00010ed4 <fopen@plt>:
   10ed4:	e28fc600 	add	ip, pc, #0, 12
   10ed8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10edc:	e5bcf35c 	ldr	pc, [ip, #860]!	; 0x35c

00010ee0 <read@plt>:
   10ee0:	e28fc600 	add	ip, pc, #0, 12
   10ee4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ee8:	e5bcf354 	ldr	pc, [ip, #852]!	; 0x354

00010eec <fflush@plt>:
   10eec:	e28fc600 	add	ip, pc, #0, 12
   10ef0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ef4:	e5bcf34c 	ldr	pc, [ip, #844]!	; 0x34c

00010ef8 <free@plt>:
   10ef8:	e28fc600 	add	ip, pc, #0, 12
   10efc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f00:	e5bcf344 	ldr	pc, [ip, #836]!	; 0x344

00010f04 <fgets@plt>:
   10f04:	e28fc600 	add	ip, pc, #0, 12
   10f08:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f0c:	e5bcf33c 	ldr	pc, [ip, #828]!	; 0x33c

00010f10 <nanosleep@plt>:
   10f10:	e28fc600 	add	ip, pc, #0, 12
   10f14:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f18:	e5bcf334 	ldr	pc, [ip, #820]!	; 0x334

00010f1c <memcpy@plt>:
   10f1c:	e28fc600 	add	ip, pc, #0, 12
   10f20:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f24:	e5bcf32c 	ldr	pc, [ip, #812]!	; 0x32c

00010f28 <signal@plt>:
   10f28:	e28fc600 	add	ip, pc, #0, 12
   10f2c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f30:	e5bcf324 	ldr	pc, [ip, #804]!	; 0x324

00010f34 <ftell@plt>:
   10f34:	e28fc600 	add	ip, pc, #0, 12
   10f38:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f3c:	e5bcf31c 	ldr	pc, [ip, #796]!	; 0x31c

00010f40 <memcmp@plt>:
   10f40:	e28fc600 	add	ip, pc, #0, 12
   10f44:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f48:	e5bcf314 	ldr	pc, [ip, #788]!	; 0x314

00010f4c <rewind@plt>:
   10f4c:	e28fc600 	add	ip, pc, #0, 12
   10f50:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f54:	e5bcf30c 	ldr	pc, [ip, #780]!	; 0x30c

00010f58 <unlink@plt>:
   10f58:	e28fc600 	add	ip, pc, #0, 12
   10f5c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f60:	e5bcf304 	ldr	pc, [ip, #772]!	; 0x304

00010f64 <realloc@plt>:
   10f64:	e28fc600 	add	ip, pc, #0, 12
   10f68:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f6c:	e5bcf2fc 	ldr	pc, [ip, #764]!	; 0x2fc

00010f70 <killpg@plt>:
   10f70:	e28fc600 	add	ip, pc, #0, 12
   10f74:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f78:	e5bcf2f4 	ldr	pc, [ip, #756]!	; 0x2f4

00010f7c <geteuid@plt>:
   10f7c:	e28fc600 	add	ip, pc, #0, 12
   10f80:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f84:	e5bcf2ec 	ldr	pc, [ip, #748]!	; 0x2ec

00010f88 <sigaction@plt>:
   10f88:	e28fc600 	add	ip, pc, #0, 12
   10f8c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f90:	e5bcf2e4 	ldr	pc, [ip, #740]!	; 0x2e4

00010f94 <fwrite@plt>:
   10f94:	e28fc600 	add	ip, pc, #0, 12
   10f98:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10f9c:	e5bcf2dc 	ldr	pc, [ip, #732]!	; 0x2dc

00010fa0 <getsockopt@plt>:
   10fa0:	e28fc600 	add	ip, pc, #0, 12
   10fa4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fa8:	e5bcf2d4 	ldr	pc, [ip, #724]!	; 0x2d4

00010fac <usleep@plt>:
   10fac:	e28fc600 	add	ip, pc, #0, 12
   10fb0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fb4:	e5bcf2cc 	ldr	pc, [ip, #716]!	; 0x2cc

00010fb8 <gettimeofday@plt>:
   10fb8:	e28fc600 	add	ip, pc, #0, 12
   10fbc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fc0:	e5bcf2c4 	ldr	pc, [ip, #708]!	; 0x2c4

00010fc4 <fread@plt>:
   10fc4:	e28fc600 	add	ip, pc, #0, 12
   10fc8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fcc:	e5bcf2bc 	ldr	pc, [ip, #700]!	; 0x2bc

00010fd0 <puts@plt>:
   10fd0:	e28fc600 	add	ip, pc, #0, 12
   10fd4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fd8:	e5bcf2b4 	ldr	pc, [ip, #692]!	; 0x2b4

00010fdc <malloc@plt>:
   10fdc:	e28fc600 	add	ip, pc, #0, 12
   10fe0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10fe4:	e5bcf2ac 	ldr	pc, [ip, #684]!	; 0x2ac

00010fe8 <__libc_start_main@plt>:
   10fe8:	e28fc600 	add	ip, pc, #0, 12
   10fec:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ff0:	e5bcf2a4 	ldr	pc, [ip, #676]!	; 0x2a4

00010ff4 <strerror@plt>:
   10ff4:	e28fc600 	add	ip, pc, #0, 12
   10ff8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   10ffc:	e5bcf29c 	ldr	pc, [ip, #668]!	; 0x29c

00011000 <wait4@plt>:
   11000:	e28fc600 	add	ip, pc, #0, 12
   11004:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11008:	e5bcf294 	ldr	pc, [ip, #660]!	; 0x294

0001100c <__gmon_start__@plt>:
   1100c:	e28fc600 	add	ip, pc, #0, 12
   11010:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11014:	e5bcf28c 	ldr	pc, [ip, #652]!	; 0x28c

00011018 <open@plt>:
   11018:	e28fc600 	add	ip, pc, #0, 12
   1101c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11020:	e5bcf284 	ldr	pc, [ip, #644]!	; 0x284

00011024 <rename@plt>:
   11024:	e28fc600 	add	ip, pc, #0, 12
   11028:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1102c:	e5bcf27c 	ldr	pc, [ip, #636]!	; 0x27c

00011030 <getpid@plt>:
   11030:	e28fc600 	add	ip, pc, #0, 12
   11034:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11038:	e5bcf274 	ldr	pc, [ip, #628]!	; 0x274

0001103c <exit@plt>:
   1103c:	e28fc600 	add	ip, pc, #0, 12
   11040:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11044:	e5bcf26c 	ldr	pc, [ip, #620]!	; 0x26c

00011048 <feof@plt>:
   11048:	e28fc600 	add	ip, pc, #0, 12
   1104c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11050:	e5bcf264 	ldr	pc, [ip, #612]!	; 0x264

00011054 <strlen@plt>:
   11054:	e28fc600 	add	ip, pc, #0, 12
   11058:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1105c:	e5bcf25c 	ldr	pc, [ip, #604]!	; 0x25c

00011060 <setpgrp@plt>:
   11060:	e28fc600 	add	ip, pc, #0, 12
   11064:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11068:	e5bcf254 	ldr	pc, [ip, #596]!	; 0x254

0001106c <mmap@plt>:
   1106c:	e28fc600 	add	ip, pc, #0, 12
   11070:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11074:	e5bcf24c 	ldr	pc, [ip, #588]!	; 0x24c

00011078 <strchr@plt>:
   11078:	e28fc600 	add	ip, pc, #0, 12
   1107c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11080:	e5bcf244 	ldr	pc, [ip, #580]!	; 0x244

00011084 <fprintf@plt>:
   11084:	e28fc600 	add	ip, pc, #0, 12
   11088:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1108c:	e5bcf23c 	ldr	pc, [ip, #572]!	; 0x23c

00011090 <fcntl@plt>:
   11090:	e28fc600 	add	ip, pc, #0, 12
   11094:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11098:	e5bcf234 	ldr	pc, [ip, #564]!	; 0x234

0001109c <execv@plt>:
   1109c:	e28fc600 	add	ip, pc, #0, 12
   110a0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110a4:	e5bcf22c 	ldr	pc, [ip, #556]!	; 0x22c

000110a8 <posix_memalign@plt>:
   110a8:	e28fc600 	add	ip, pc, #0, 12
   110ac:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110b0:	e5bcf224 	ldr	pc, [ip, #548]!	; 0x224

000110b4 <__errno_location@plt>:
   110b4:	e28fc600 	add	ip, pc, #0, 12
   110b8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110bc:	e5bcf21c 	ldr	pc, [ip, #540]!	; 0x21c

000110c0 <strncasecmp@plt>:
   110c0:	e28fc600 	add	ip, pc, #0, 12
   110c4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110c8:	e5bcf214 	ldr	pc, [ip, #532]!	; 0x214

000110cc <__strdup@plt>:
   110cc:	e28fc600 	add	ip, pc, #0, 12
   110d0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110d4:	e5bcf20c 	ldr	pc, [ip, #524]!	; 0x20c

000110d8 <lockf@plt>:
   110d8:	e28fc600 	add	ip, pc, #0, 12
   110dc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110e0:	e5bcf204 	ldr	pc, [ip, #516]!	; 0x204

000110e4 <memset@plt>:
   110e4:	e28fc600 	add	ip, pc, #0, 12
   110e8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110ec:	e5bcf1fc 	ldr	pc, [ip, #508]!	; 0x1fc

000110f0 <strncpy@plt>:
   110f0:	e28fc600 	add	ip, pc, #0, 12
   110f4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   110f8:	e5bcf1f4 	ldr	pc, [ip, #500]!	; 0x1f4

000110fc <wait3@plt>:
   110fc:	e28fc600 	add	ip, pc, #0, 12
   11100:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11104:	e5bcf1ec 	ldr	pc, [ip, #492]!	; 0x1ec

00011108 <write@plt>:
   11108:	e28fc600 	add	ip, pc, #0, 12
   1110c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11110:	e5bcf1e4 	ldr	pc, [ip, #484]!	; 0x1e4

00011114 <fileno@plt>:
   11114:	e28fc600 	add	ip, pc, #0, 12
   11118:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1111c:	e5bcf1dc 	ldr	pc, [ip, #476]!	; 0x1dc

00011120 <ftruncate@plt>:
   11120:	e28fc600 	add	ip, pc, #0, 12
   11124:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11128:	e5bcf1d4 	ldr	pc, [ip, #468]!	; 0x1d4

0001112c <fclose@plt>:
   1112c:	e28fc600 	add	ip, pc, #0, 12
   11130:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11134:	e5bcf1cc 	ldr	pc, [ip, #460]!	; 0x1cc

00011138 <munmap@plt>:
   11138:	e28fc600 	add	ip, pc, #0, 12
   1113c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11140:	e5bcf1c4 	ldr	pc, [ip, #452]!	; 0x1c4

00011144 <shutdown@plt>:
   11144:	e28fc600 	add	ip, pc, #0, 12
   11148:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1114c:	e5bcf1bc 	ldr	pc, [ip, #444]!	; 0x1bc

00011150 <sigemptyset@plt>:
   11150:	e28fc600 	add	ip, pc, #0, 12
   11154:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11158:	e5bcf1b4 	ldr	pc, [ip, #436]!	; 0x1b4

0001115c <fork@plt>:
   1115c:	e28fc600 	add	ip, pc, #0, 12
   11160:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11164:	e5bcf1ac 	ldr	pc, [ip, #428]!	; 0x1ac

00011168 <syslog@plt>:
   11168:	e28fc600 	add	ip, pc, #0, 12
   1116c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11170:	e5bcf1a4 	ldr	pc, [ip, #420]!	; 0x1a4

00011174 <sprintf@plt>:
   11174:	e28fc600 	add	ip, pc, #0, 12
   11178:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1117c:	e5bcf19c 	ldr	pc, [ip, #412]!	; 0x19c

00011180 <openlog@plt>:
   11180:	e28fc600 	add	ip, pc, #0, 12
   11184:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11188:	e5bcf194 	ldr	pc, [ip, #404]!	; 0x194

0001118c <strpbrk@plt>:
   1118c:	e28fc600 	add	ip, pc, #0, 12
   11190:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11194:	e5bcf18c 	ldr	pc, [ip, #396]!	; 0x18c

00011198 <socket@plt>:
   11198:	e28fc600 	add	ip, pc, #0, 12
   1119c:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111a0:	e5bcf184 	ldr	pc, [ip, #388]!	; 0x184

000111a4 <umask@plt>:
   111a4:	e28fc600 	add	ip, pc, #0, 12
   111a8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111ac:	e5bcf17c 	ldr	pc, [ip, #380]!	; 0x17c

000111b0 <gethostbyname@plt>:
   111b0:	e28fc600 	add	ip, pc, #0, 12
   111b4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111b8:	e5bcf174 	ldr	pc, [ip, #372]!	; 0x174

000111bc <fseek@plt>:
   111bc:	e28fc600 	add	ip, pc, #0, 12
   111c0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111c4:	e5bcf16c 	ldr	pc, [ip, #364]!	; 0x16c

000111c8 <strncat@plt>:
   111c8:	e28fc600 	add	ip, pc, #0, 12
   111cc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111d0:	e5bcf164 	ldr	pc, [ip, #356]!	; 0x164

000111d4 <strncmp@plt>:
   111d4:	e28fc600 	add	ip, pc, #0, 12
   111d8:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111dc:	e5bcf15c 	ldr	pc, [ip, #348]!	; 0x15c

000111e0 <abort@plt>:
   111e0:	e28fc600 	add	ip, pc, #0, 12
   111e4:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111e8:	e5bcf154 	ldr	pc, [ip, #340]!	; 0x154

000111ec <recv@plt>:
   111ec:	e28fc600 	add	ip, pc, #0, 12
   111f0:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   111f4:	e5bcf14c 	ldr	pc, [ip, #332]!	; 0x14c

000111f8 <close@plt>:
   111f8:	e28fc600 	add	ip, pc, #0, 12
   111fc:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11200:	e5bcf144 	ldr	pc, [ip, #324]!	; 0x144

00011204 <mkfifo@plt>:
   11204:	e28fc600 	add	ip, pc, #0, 12
   11208:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   1120c:	e5bcf13c 	ldr	pc, [ip, #316]!	; 0x13c

00011210 <send@plt>:
   11210:	e28fc600 	add	ip, pc, #0, 12
   11214:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11218:	e5bcf134 	ldr	pc, [ip, #308]!	; 0x134

0001121c <connect@plt>:
   1121c:	e28fc600 	add	ip, pc, #0, 12
   11220:	e28cca1a 	add	ip, ip, #106496	; 0x1a000
   11224:	e5bcf12c 	ldr	pc, [ip, #300]!	; 0x12c

Disassembly of section .text:

00011228 <main>:
   11228:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1122c:	e3a02018 	mov	r2, #24
   11230:	e59fafec 	ldr	sl, [pc, #4076]	; 12224 <main+0xffc>
   11234:	e24ddf49 	sub	sp, sp, #292	; 0x124
   11238:	e1a05000 	mov	r5, r0
   1123c:	e1a04001 	mov	r4, r1
   11240:	e59f0fe0 	ldr	r0, [pc, #4064]	; 12228 <main+0x1000>
   11244:	e3a01001 	mov	r1, #1
   11248:	e59a7000 	ldr	r7, [sl]
   1124c:	ebffffcb 	bl	11180 <openlog@plt>
   11250:	e1a00005 	mov	r0, r5
   11254:	e1a01004 	mov	r1, r4
   11258:	eb000cea 	bl	14608 <parse_cmd_cfg>
   1125c:	e3500002 	cmp	r0, #2
   11260:	0a0006e1 	beq	12dec <main+0x1bc4>
   11264:	e3500001 	cmp	r0, #1
   11268:	0a0006db 	beq	12ddc <main+0x1bb4>
   1126c:	eb000fe8 	bl	15214 <check_duplicate>
   11270:	e3500000 	cmp	r0, #0
   11274:	1a0006e1 	bne	12e00 <main+0x1bd8>
   11278:	e59fbfac 	ldr	fp, [pc, #4012]	; 1222c <main+0x1004>
   1127c:	e59f3fac 	ldr	r3, [pc, #4012]	; 12230 <main+0x1008>
   11280:	e59f1fac 	ldr	r1, [pc, #4012]	; 12234 <main+0x100c>
   11284:	e59be030 	ldr	lr, [fp, #48]	; 0x30
   11288:	e5936000 	ldr	r6, [r3]
   1128c:	e59f9fa4 	ldr	r9, [pc, #4004]	; 12238 <main+0x1010>
   11290:	e59b5020 	ldr	r5, [fp, #32]
   11294:	e35e0000 	cmp	lr, #0
   11298:	e59b4028 	ldr	r4, [fp, #40]	; 0x28
   1129c:	e59fcf98 	ldr	ip, [pc, #3992]	; 1223c <main+0x1014>
   112a0:	01a0c001 	moveq	ip, r1
   112a4:	e3560000 	cmp	r6, #0
   112a8:	e59f0f90 	ldr	r0, [pc, #3984]	; 12240 <main+0x1018>
   112ac:	e599e000 	ldr	lr, [r9]
   112b0:	01a00001 	moveq	r0, r1
   112b4:	e3550000 	cmp	r5, #0
   112b8:	e59f2f84 	ldr	r2, [pc, #3972]	; 12244 <main+0x101c>
   112bc:	01a02001 	moveq	r2, r1
   112c0:	e3540000 	cmp	r4, #0
   112c4:	e59f3f7c 	ldr	r3, [pc, #3964]	; 12248 <main+0x1020>
   112c8:	e58dc000 	str	ip, [sp]
   112cc:	01a03001 	moveq	r3, r1
   112d0:	e58d0004 	str	r0, [sp, #4]
   112d4:	e58de008 	str	lr, [sp, #8]
   112d8:	e3a0001e 	mov	r0, #30
   112dc:	e59f1f68 	ldr	r1, [pc, #3944]	; 1224c <main+0x1024>
   112e0:	ebffffa0 	bl	11168 <syslog@plt>
   112e4:	eb001016 	bl	15344 <create_fifo>
   112e8:	e2504000 	subs	r4, r0, #0
   112ec:	1a0006b1 	bne	12db8 <main+0x1b90>
   112f0:	e59f1f58 	ldr	r1, [pc, #3928]	; 12250 <main+0x1028>
   112f4:	e3a0000f 	mov	r0, #15
   112f8:	ebffff0a 	bl	10f28 <signal@plt>
   112fc:	e59f1f4c 	ldr	r1, [pc, #3916]	; 12250 <main+0x1028>
   11300:	e3a00001 	mov	r0, #1
   11304:	ebffff07 	bl	10f28 <signal@plt>
   11308:	e59f1f40 	ldr	r1, [pc, #3904]	; 12250 <main+0x1028>
   1130c:	e3a00002 	mov	r0, #2
   11310:	ebffff04 	bl	10f28 <signal@plt>
   11314:	e59f1f38 	ldr	r1, [pc, #3896]	; 12254 <main+0x102c>
   11318:	e3a0000e 	mov	r0, #14
   1131c:	ebffff01 	bl	10f28 <signal@plt>
   11320:	eb0007ba 	bl	13210 <spi_init>
   11324:	e59f0f2c 	ldr	r0, [pc, #3884]	; 12258 <main+0x1030>
   11328:	e1a01004 	mov	r1, r4
   1132c:	ebffff39 	bl	11018 <open@plt>
   11330:	e59f5f24 	ldr	r5, [pc, #3876]	; 1225c <main+0x1034>
   11334:	e3500000 	cmp	r0, #0
   11338:	e5850000 	str	r0, [r5]
   1133c:	da000164 	ble	118d4 <main+0x6ac>
   11340:	e1a0100a 	mov	r1, sl
   11344:	e3a02004 	mov	r2, #4
   11348:	ebfffee4 	bl	10ee0 <read@plt>
   1134c:	e3500004 	cmp	r0, #4
   11350:	1a000159 	bne	118bc <main+0x694>
   11354:	e5993000 	ldr	r3, [r9]
   11358:	e3530001 	cmp	r3, #1
   1135c:	da000002 	ble	1136c <main+0x144>
   11360:	e3a0001f 	mov	r0, #31
   11364:	e59f1ef4 	ldr	r1, [pc, #3828]	; 12260 <main+0x1038>
   11368:	ebffff7e 	bl	11168 <syslog@plt>
   1136c:	e5950000 	ldr	r0, [r5]
   11370:	ebffffa0 	bl	111f8 <close@plt>
   11374:	e59a7000 	ldr	r7, [sl]
   11378:	e3a04000 	mov	r4, #0
   1137c:	e1a05004 	mov	r5, r4
   11380:	ea000008 	b	113a8 <main+0x180>
   11384:	e3a00099 	mov	r0, #153	; 0x99
   11388:	eb00103d 	bl	15484 <MS_set_main_on_off>
   1138c:	e5dd405f 	ldrb	r4, [sp, #95]	; 0x5f
   11390:	e3540001 	cmp	r4, #1
   11394:	0a000003 	beq	113a8 <main+0x180>
   11398:	e3a0009b 	mov	r0, #155	; 0x9b
   1139c:	e3a01001 	mov	r1, #1
   113a0:	eb001037 	bl	15484 <MS_set_main_on_off>
   113a4:	e3a04001 	mov	r4, #1
   113a8:	e28d0054 	add	r0, sp, #84	; 0x54
   113ac:	e58d5054 	str	r5, [sp, #84]	; 0x54
   113b0:	e58d5058 	str	r5, [sp, #88]	; 0x58
   113b4:	e58d505c 	str	r5, [sp, #92]	; 0x5c
   113b8:	e5cd5060 	strb	r5, [sp, #96]	; 0x60
   113bc:	eb001013 	bl	15410 <MS_get_main_on_off>
   113c0:	e59f3e9c 	ldr	r3, [pc, #3740]	; 12264 <main+0x103c>
   113c4:	e5d31000 	ldrb	r1, [r3]
   113c8:	e5dd3054 	ldrb	r3, [sp, #84]	; 0x54
   113cc:	e1530001 	cmp	r3, r1
   113d0:	03a03000 	moveq	r3, #0
   113d4:	0a000003 	beq	113e8 <main+0x1c0>
   113d8:	e3a00090 	mov	r0, #144	; 0x90
   113dc:	e3a04001 	mov	r4, #1
   113e0:	eb001027 	bl	15484 <MS_set_main_on_off>
   113e4:	e1a03004 	mov	r3, r4
   113e8:	e59f2e74 	ldr	r2, [pc, #3700]	; 12264 <main+0x103c>
   113ec:	e5d21001 	ldrb	r1, [r2, #1]
   113f0:	e5dd2055 	ldrb	r2, [sp, #85]	; 0x55
   113f4:	e1520001 	cmp	r2, r1
   113f8:	0a000003 	beq	1140c <main+0x1e4>
   113fc:	e3a00091 	mov	r0, #145	; 0x91
   11400:	eb00101f 	bl	15484 <MS_set_main_on_off>
   11404:	e3a03001 	mov	r3, #1
   11408:	e1a04003 	mov	r4, r3
   1140c:	e59f2e50 	ldr	r2, [pc, #3664]	; 12264 <main+0x103c>
   11410:	e5d21003 	ldrb	r1, [r2, #3]
   11414:	e5dd2057 	ldrb	r2, [sp, #87]	; 0x57
   11418:	e1520001 	cmp	r2, r1
   1141c:	0a000003 	beq	11430 <main+0x208>
   11420:	e3a00093 	mov	r0, #147	; 0x93
   11424:	eb001016 	bl	15484 <MS_set_main_on_off>
   11428:	e3a03001 	mov	r3, #1
   1142c:	e1a04003 	mov	r4, r3
   11430:	e59f2e2c 	ldr	r2, [pc, #3628]	; 12264 <main+0x103c>
   11434:	e5d21006 	ldrb	r1, [r2, #6]
   11438:	e5dd205a 	ldrb	r2, [sp, #90]	; 0x5a
   1143c:	e1520001 	cmp	r2, r1
   11440:	0a000003 	beq	11454 <main+0x22c>
   11444:	e3a00096 	mov	r0, #150	; 0x96
   11448:	eb00100d 	bl	15484 <MS_set_main_on_off>
   1144c:	e3a03001 	mov	r3, #1
   11450:	e1a04003 	mov	r4, r3
   11454:	e59f2e08 	ldr	r2, [pc, #3592]	; 12264 <main+0x103c>
   11458:	e5d21007 	ldrb	r1, [r2, #7]
   1145c:	e5dd205b 	ldrb	r2, [sp, #91]	; 0x5b
   11460:	e1520001 	cmp	r2, r1
   11464:	0a000003 	beq	11478 <main+0x250>
   11468:	e3a00097 	mov	r0, #151	; 0x97
   1146c:	eb001004 	bl	15484 <MS_set_main_on_off>
   11470:	e3a03001 	mov	r3, #1
   11474:	e1a04003 	mov	r4, r3
   11478:	e59f2de4 	ldr	r2, [pc, #3556]	; 12264 <main+0x103c>
   1147c:	e5d21008 	ldrb	r1, [r2, #8]
   11480:	e5dd205c 	ldrb	r2, [sp, #92]	; 0x5c
   11484:	e1520001 	cmp	r2, r1
   11488:	0a000003 	beq	1149c <main+0x274>
   1148c:	e3a00098 	mov	r0, #152	; 0x98
   11490:	eb000ffb 	bl	15484 <MS_set_main_on_off>
   11494:	e3a03001 	mov	r3, #1
   11498:	e1a04003 	mov	r4, r3
   1149c:	e59f2dc0 	ldr	r2, [pc, #3520]	; 12264 <main+0x103c>
   114a0:	e5d2100a 	ldrb	r1, [r2, #10]
   114a4:	e5dd205e 	ldrb	r2, [sp, #94]	; 0x5e
   114a8:	e1520001 	cmp	r2, r1
   114ac:	0a000003 	beq	114c0 <main+0x298>
   114b0:	e3a0009a 	mov	r0, #154	; 0x9a
   114b4:	eb000ff2 	bl	15484 <MS_set_main_on_off>
   114b8:	e3a03001 	mov	r3, #1
   114bc:	e1a04003 	mov	r4, r3
   114c0:	e59f2d9c 	ldr	r2, [pc, #3484]	; 12264 <main+0x103c>
   114c4:	e59fcd98 	ldr	ip, [pc, #3480]	; 12264 <main+0x103c>
   114c8:	e5d21009 	ldrb	r1, [r2, #9]
   114cc:	e5dd205d 	ldrb	r2, [sp, #93]	; 0x5d
   114d0:	e1520001 	cmp	r2, r1
   114d4:	1affffaa 	bne	11384 <main+0x15c>
   114d8:	e5dd205f 	ldrb	r2, [sp, #95]	; 0x5f
   114dc:	e3520001 	cmp	r2, #1
   114e0:	1affffac 	bne	11398 <main+0x170>
   114e4:	e3530000 	cmp	r3, #0
   114e8:	1affffae 	bne	113a8 <main+0x180>
   114ec:	e3540000 	cmp	r4, #0
   114f0:	0a000006 	beq	11510 <main+0x2e8>
   114f4:	e28d3054 	add	r3, sp, #84	; 0x54
   114f8:	e8b30007 	ldm	r3!, {r0, r1, r2}
   114fc:	e5d33000 	ldrb	r3, [r3]
   11500:	e58c0000 	str	r0, [ip]
   11504:	e58c1004 	str	r1, [ip, #4]
   11508:	e5cc300c 	strb	r3, [ip, #12]
   1150c:	e58c2008 	str	r2, [ip, #8]
   11510:	eb0012d3 	bl	16064 <MS_write_on_off>
   11514:	e58d001c 	str	r0, [sp, #28]
   11518:	e59f0d48 	ldr	r0, [pc, #3400]	; 12268 <main+0x1040>
   1151c:	eb001058 	bl	15684 <MS_get_door_mode>
   11520:	e3500000 	cmp	r0, #0
   11524:	1a000603 	bne	12d38 <main+0x1b10>
   11528:	e5993000 	ldr	r3, [r9]
   1152c:	e3530001 	cmp	r3, #1
   11530:	da000008 	ble	11558 <main+0x330>
   11534:	e59f3d2c 	ldr	r3, [pc, #3372]	; 12268 <main+0x1040>
   11538:	e59f2d2c 	ldr	r2, [pc, #3372]	; 1226c <main+0x1044>
   1153c:	e3a0001f 	mov	r0, #31
   11540:	e5d31000 	ldrb	r1, [r3]
   11544:	e59f3d24 	ldr	r3, [pc, #3364]	; 12270 <main+0x1048>
   11548:	e3510000 	cmp	r1, #0
   1154c:	01a02003 	moveq	r2, r3
   11550:	e59f1d1c 	ldr	r1, [pc, #3356]	; 12274 <main+0x104c>
   11554:	ebffff03 	bl	11168 <syslog@plt>
   11558:	e3a04000 	mov	r4, #0
   1155c:	e59f3d14 	ldr	r3, [pc, #3348]	; 12278 <main+0x1050>
   11560:	e1a02004 	mov	r2, r4
   11564:	e1a00004 	mov	r0, r4
   11568:	e28d1064 	add	r1, sp, #100	; 0x64
   1156c:	e58d3070 	str	r3, [sp, #112]	; 0x70
   11570:	e58d3068 	str	r3, [sp, #104]	; 0x68
   11574:	e58d4064 	str	r4, [sp, #100]	; 0x64
   11578:	e58d406c 	str	r4, [sp, #108]	; 0x6c
   1157c:	e59f8cf8 	ldr	r8, [pc, #3320]	; 1227c <main+0x1054>
   11580:	ebfffe47 	bl	10ea4 <setitimer@plt>
   11584:	eb0016f9 	bl	17170 <TOKEN_load>
   11588:	e3a03001 	mov	r3, #1
   1158c:	e1a02004 	mov	r2, r4
   11590:	e58d4044 	str	r4, [sp, #68]	; 0x44
   11594:	e59f4ce4 	ldr	r4, [pc, #3300]	; 12280 <main+0x1058>
   11598:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1159c:	e58d3028 	str	r3, [sp, #40]	; 0x28
   115a0:	e58d3034 	str	r3, [sp, #52]	; 0x34
   115a4:	e3e03000 	mvn	r3, #0
   115a8:	e58d3020 	str	r3, [sp, #32]
   115ac:	e3a03002 	mov	r3, #2
   115b0:	e58d2030 	str	r2, [sp, #48]	; 0x30
   115b4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   115b8:	e59f3e34 	ldr	r3, [pc, #3636]	; 123f4 <main+0x11cc>
   115bc:	e59f2e30 	ldr	r2, [pc, #3632]	; 123f4 <main+0x11cc>
   115c0:	e5933004 	ldr	r3, [r3, #4]
   115c4:	e3530000 	cmp	r3, #0
   115c8:	0a00002b 	beq	1167c <main+0x454>
   115cc:	e59d3020 	ldr	r3, [sp, #32]
   115d0:	e3530000 	cmp	r3, #0
   115d4:	e3a03000 	mov	r3, #0
   115d8:	e5823004 	str	r3, [r2, #4]
   115dc:	0a000192 	beq	11c2c <main+0xa04>
   115e0:	e59d3020 	ldr	r3, [sp, #32]
   115e4:	e2533001 	subs	r3, r3, #1
   115e8:	e58d3020 	str	r3, [sp, #32]
   115ec:	0a00018e 	beq	11c2c <main+0xa04>
   115f0:	e994000c 	ldmib	r4, {r2, r3}
   115f4:	e2433001 	sub	r3, r3, #1
   115f8:	e2422001 	sub	r2, r2, #1
   115fc:	e3520000 	cmp	r2, #0
   11600:	e984000c 	stmib	r4, {r2, r3}
   11604:	e59f2c74 	ldr	r2, [pc, #3188]	; 12280 <main+0x1058>
   11608:	b3a01078 	movlt	r1, #120	; 0x78
   1160c:	b5821004 	strlt	r1, [r2, #4]
   11610:	e3530000 	cmp	r3, #0
   11614:	b3a0303c 	movlt	r3, #60	; 0x3c
   11618:	b5843008 	strlt	r3, [r4, #8]
   1161c:	e59b3020 	ldr	r3, [fp, #32]
   11620:	e3530000 	cmp	r3, #0
   11624:	da000003 	ble	11638 <main+0x410>
   11628:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1162c:	e2533001 	subs	r3, r3, #1
   11630:	e58d3028 	str	r3, [sp, #40]	; 0x28
   11634:	0a0001d6 	beq	11d94 <main+0xb6c>
   11638:	e59a3000 	ldr	r3, [sl]
   1163c:	e3530003 	cmp	r3, #3
   11640:	0a0001c6 	beq	11d60 <main+0xb38>
   11644:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   11648:	e3530001 	cmp	r3, #1
   1164c:	83a02000 	movhi	r2, #0
   11650:	92022001 	andls	r2, r2, #1
   11654:	e3520000 	cmp	r2, #0
   11658:	1a0002e6 	bne	121f8 <main+0xfd0>
   1165c:	e59b3028 	ldr	r3, [fp, #40]	; 0x28
   11660:	e3530000 	cmp	r3, #0
   11664:	da000003 	ble	11678 <main+0x450>
   11668:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   1166c:	e2533001 	subs	r3, r3, #1
   11670:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   11674:	0a0001d6 	beq	11dd4 <main+0xbac>
   11678:	eb001018 	bl	156e0 <MS_get_debug8>
   1167c:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   11680:	e3530000 	cmp	r3, #0
   11684:	0a000039 	beq	11770 <main+0x548>
   11688:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1168c:	e3530001 	cmp	r3, #1
   11690:	13a03001 	movne	r3, #1
   11694:	158d3024 	strne	r3, [sp, #36]	; 0x24
   11698:	1a000034 	bne	11770 <main+0x548>
   1169c:	e59a3000 	ldr	r3, [sl]
   116a0:	e59f5b7c 	ldr	r5, [pc, #2940]	; 12224 <main+0xffc>
   116a4:	e3530004 	cmp	r3, #4
   116a8:	0a000240 	beq	11fb0 <main+0xd88>
   116ac:	e28d0074 	add	r0, sp, #116	; 0x74
   116b0:	eb00154a 	bl	16be0 <RFID_get_token>
   116b4:	e3500000 	cmp	r0, #0
   116b8:	135000ff 	cmpne	r0, #255	; 0xff
   116bc:	0a000181 	beq	11cc8 <main+0xaa0>
   116c0:	e5993000 	ldr	r3, [r9]
   116c4:	e3530001 	cmp	r3, #1
   116c8:	da000010 	ble	11710 <main+0x4e8>
   116cc:	e5dd1076 	ldrb	r1, [sp, #118]	; 0x76
   116d0:	e5dd0079 	ldrb	r0, [sp, #121]	; 0x79
   116d4:	e5dde077 	ldrb	lr, [sp, #119]	; 0x77
   116d8:	e5ddc078 	ldrb	ip, [sp, #120]	; 0x78
   116dc:	e58d1000 	str	r1, [sp]
   116e0:	e5dd107a 	ldrb	r1, [sp, #122]	; 0x7a
   116e4:	e28d507b 	add	r5, sp, #123	; 0x7b
   116e8:	e58d000c 	str	r0, [sp, #12]
   116ec:	e58d1010 	str	r1, [sp, #16]
   116f0:	e5dd2074 	ldrb	r2, [sp, #116]	; 0x74
   116f4:	e5dd3075 	ldrb	r3, [sp, #117]	; 0x75
   116f8:	e58d5014 	str	r5, [sp, #20]
   116fc:	e58de004 	str	lr, [sp, #4]
   11700:	e58dc008 	str	ip, [sp, #8]
   11704:	e3a0001f 	mov	r0, #31
   11708:	e59f1b74 	ldr	r1, [pc, #2932]	; 12284 <main+0x105c>
   1170c:	ebfffe95 	bl	11168 <syslog@plt>
   11710:	e28d0074 	add	r0, sp, #116	; 0x74
   11714:	eb00181b 	bl	17788 <TOKEN_find>
   11718:	e3500000 	cmp	r0, #0
   1171c:	ba0003dd 	blt	12698 <main+0x1470>
   11720:	e5dd308c 	ldrb	r3, [sp, #140]	; 0x8c
   11724:	e353007f 	cmp	r3, #127	; 0x7f
   11728:	0a00034f 	beq	1246c <main+0x1244>
   1172c:	e353007e 	cmp	r3, #126	; 0x7e
   11730:	e59a2000 	ldr	r2, [sl]
   11734:	8a000158 	bhi	11c9c <main+0xa74>
   11738:	e3520000 	cmp	r2, #0
   1173c:	e59f5ae0 	ldr	r5, [pc, #2784]	; 12224 <main+0xffc>
   11740:	1a0003ad 	bne	125fc <main+0x13d4>
   11744:	e3a03001 	mov	r3, #1
   11748:	e5853000 	str	r3, [r5]
   1174c:	e59f3b34 	ldr	r3, [pc, #2868]	; 12288 <main+0x1060>
   11750:	e59f0d0c 	ldr	r0, [pc, #3340]	; 12464 <main+0x123c>
   11754:	e28d1074 	add	r1, sp, #116	; 0x74
   11758:	e5933000 	ldr	r3, [r3]
   1175c:	e3a02048 	mov	r2, #72	; 0x48
   11760:	e58d3020 	str	r3, [sp, #32]
   11764:	ebfffdec 	bl	10f1c <memcpy@plt>
   11768:	e3a03002 	mov	r3, #2
   1176c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11770:	e5943000 	ldr	r3, [r4]
   11774:	e59f5b04 	ldr	r5, [pc, #2820]	; 12280 <main+0x1058>
   11778:	e3730001 	cmn	r3, #1
   1177c:	0a000157 	beq	11ce0 <main+0xab8>
   11780:	e3530000 	cmp	r3, #0
   11784:	0a000065 	beq	11920 <main+0x6f8>
   11788:	e59a3000 	ldr	r3, [sl]
   1178c:	e1530007 	cmp	r3, r7
   11790:	0a000017 	beq	117f4 <main+0x5cc>
   11794:	e59f0abc 	ldr	r0, [pc, #2748]	; 12258 <main+0x1030>
   11798:	e3a01041 	mov	r1, #65	; 0x41
   1179c:	ebfffe1d 	bl	11018 <open@plt>
   117a0:	e2505000 	subs	r5, r0, #0
   117a4:	ba000191 	blt	11df0 <main+0xbc8>
   117a8:	e59f1a74 	ldr	r1, [pc, #2676]	; 12224 <main+0xffc>
   117ac:	e3a02004 	mov	r2, #4
   117b0:	ebfffe54 	bl	11108 <write@plt>
   117b4:	e3500004 	cmp	r0, #4
   117b8:	0a0001b5 	beq	11e94 <main+0xc6c>
   117bc:	eb000ffa 	bl	157ac <MS_store_sens_to_file>
   117c0:	e59a7000 	ldr	r7, [sl]
   117c4:	e59f3a58 	ldr	r3, [pc, #2648]	; 12224 <main+0xffc>
   117c8:	e3570002 	cmp	r7, #2
   117cc:	0a00015b 	beq	11d40 <main+0xb18>
   117d0:	e3570000 	cmp	r7, #0
   117d4:	1a00011f 	bne	11c58 <main+0xa30>
   117d8:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   117dc:	e3530000 	cmp	r3, #0
   117e0:	1a000217 	bne	12044 <main+0xe1c>
   117e4:	e3a0001e 	mov	r0, #30
   117e8:	e59f1a9c 	ldr	r1, [pc, #2716]	; 1228c <main+0x1064>
   117ec:	e28d208d 	add	r2, sp, #141	; 0x8d
   117f0:	ebfffe5c 	bl	11168 <syslog@plt>
   117f4:	e59f3a94 	ldr	r3, [pc, #2708]	; 12290 <main+0x1068>
   117f8:	e5936000 	ldr	r6, [r3]
   117fc:	e3560000 	cmp	r6, #0
   11800:	0a00001c 	beq	11878 <main+0x650>
   11804:	e28d00bc 	add	r0, sp, #188	; 0xbc
   11808:	e3a01000 	mov	r1, #0
   1180c:	ebfffde9 	bl	10fb8 <gettimeofday@plt>
   11810:	e3a05000 	mov	r5, #0
   11814:	ea000008 	b	1183c <main+0x614>
   11818:	e3550000 	cmp	r5, #0
   1181c:	e5963008 	ldr	r3, [r6, #8]
   11820:	e1a00006 	mov	r0, r6
   11824:	0a00002c 	beq	118dc <main+0x6b4>
   11828:	e5853008 	str	r3, [r5, #8]
   1182c:	ebfffdb1 	bl	10ef8 <free@plt>
   11830:	e5956008 	ldr	r6, [r5, #8]
   11834:	e3560000 	cmp	r6, #0
   11838:	0a00000e 	beq	11878 <main+0x650>
   1183c:	e3a01000 	mov	r1, #0
   11840:	e1a03001 	mov	r3, r1
   11844:	e5960000 	ldr	r0, [r6]
   11848:	e3a02001 	mov	r2, #1
   1184c:	ebfffdeb 	bl	11000 <wait4@plt>
   11850:	e3500000 	cmp	r0, #0
   11854:	caffffef 	bgt	11818 <main+0x5f0>
   11858:	e5962004 	ldr	r2, [r6, #4]
   1185c:	e59d30bc 	ldr	r3, [sp, #188]	; 0xbc
   11860:	e1520003 	cmp	r2, r3
   11864:	ba000022 	blt	118f4 <main+0x6cc>
   11868:	e1a05006 	mov	r5, r6
   1186c:	e5966008 	ldr	r6, [r6, #8]
   11870:	e3560000 	cmp	r6, #0
   11874:	1afffff0 	bne	1183c <main+0x614>
   11878:	e59f3a14 	ldr	r3, [pc, #2580]	; 12294 <main+0x106c>
   1187c:	e59fca10 	ldr	ip, [pc, #2576]	; 12294 <main+0x106c>
   11880:	e5933000 	ldr	r3, [r3]
   11884:	e3530000 	cmp	r3, #0
   11888:	1a0000a1 	bne	11b14 <main+0x8ec>
   1188c:	e59d301c 	ldr	r3, [sp, #28]
   11890:	e3530000 	cmp	r3, #0
   11894:	1a00009b 	bne	11b08 <main+0x8e0>
   11898:	e59f3990 	ldr	r3, [pc, #2448]	; 12230 <main+0x1008>
   1189c:	e5933000 	ldr	r3, [r3]
   118a0:	e3530000 	cmp	r3, #0
   118a4:	0a000002 	beq	118b4 <main+0x68c>
   118a8:	e5943008 	ldr	r3, [r4, #8]
   118ac:	e3530000 	cmp	r3, #0
   118b0:	0a00011f 	beq	11d34 <main+0xb0c>
   118b4:	ebfffd80 	bl	10ebc <pause@plt>
   118b8:	eaffff3e 	b	115b8 <main+0x390>
   118bc:	e5950000 	ldr	r0, [r5]
   118c0:	ebfffe4c 	bl	111f8 <close@plt>
   118c4:	e1a07004 	mov	r7, r4
   118c8:	e58a4000 	str	r4, [sl]
   118cc:	eb000d93 	bl	14f20 <write_mode>
   118d0:	eafffea8 	b	11378 <main+0x150>
   118d4:	eb000d91 	bl	14f20 <write_mode>
   118d8:	eafffea6 	b	11378 <main+0x150>
   118dc:	e59f29ac 	ldr	r2, [pc, #2476]	; 12290 <main+0x1068>
   118e0:	e5823000 	str	r3, [r2]
   118e4:	ebfffd83 	bl	10ef8 <free@plt>
   118e8:	e59f39a0 	ldr	r3, [pc, #2464]	; 12290 <main+0x1068>
   118ec:	e5936000 	ldr	r6, [r3]
   118f0:	eaffffcf 	b	11834 <main+0x60c>
   118f4:	e5960000 	ldr	r0, [r6]
   118f8:	e3a0100f 	mov	r1, #15
   118fc:	ebfffd9b 	bl	10f70 <killpg@plt>
   11900:	e5993000 	ldr	r3, [r9]
   11904:	e3530001 	cmp	r3, #1
   11908:	daffffd6 	ble	11868 <main+0x640>
   1190c:	e3a0001f 	mov	r0, #31
   11910:	e59f1980 	ldr	r1, [pc, #2432]	; 12298 <main+0x1070>
   11914:	e5962000 	ldr	r2, [r6]
   11918:	ebfffe12 	bl	11168 <syslog@plt>
   1191c:	eaffffd1 	b	11868 <main+0x640>
   11920:	e3e03000 	mvn	r3, #0
   11924:	e5843000 	str	r3, [r4]
   11928:	eb000ee8 	bl	154d0 <MS_get_main_sens>
   1192c:	e3a00080 	mov	r0, #128	; 0x80
   11930:	e3a01001 	mov	r1, #1
   11934:	eb000ed2 	bl	15484 <MS_set_main_on_off>
   11938:	e5993000 	ldr	r3, [r9]
   1193c:	e3530002 	cmp	r3, #2
   11940:	ca00014f 	bgt	11e84 <main+0xc5c>
   11944:	e59f1950 	ldr	r1, [pc, #2384]	; 1229c <main+0x1074>
   11948:	e59f0950 	ldr	r0, [pc, #2384]	; 122a0 <main+0x1078>
   1194c:	eb001178 	bl	15f34 <MS_most_sensor_check>
   11950:	e59f194c 	ldr	r1, [pc, #2380]	; 122a4 <main+0x107c>
   11954:	e58d0038 	str	r0, [sp, #56]	; 0x38
   11958:	e59f0948 	ldr	r0, [pc, #2376]	; 122a8 <main+0x1080>
   1195c:	eb001174 	bl	15f34 <MS_most_sensor_check>
   11960:	e59f1944 	ldr	r1, [pc, #2372]	; 122ac <main+0x1084>
   11964:	e1a05000 	mov	r5, r0
   11968:	e59f0940 	ldr	r0, [pc, #2368]	; 122b0 <main+0x1088>
   1196c:	eb001170 	bl	15f34 <MS_most_sensor_check>
   11970:	e59f193c 	ldr	r1, [pc, #2364]	; 122b4 <main+0x108c>
   11974:	e58d003c 	str	r0, [sp, #60]	; 0x3c
   11978:	e59f0938 	ldr	r0, [pc, #2360]	; 122b8 <main+0x1090>
   1197c:	eb001189 	bl	15fa8 <MS_smoke_sensor_check>
   11980:	e59f1934 	ldr	r1, [pc, #2356]	; 122bc <main+0x1094>
   11984:	e58d0040 	str	r0, [sp, #64]	; 0x40
   11988:	e59f0930 	ldr	r0, [pc, #2352]	; 122c0 <main+0x1098>
   1198c:	eb001185 	bl	15fa8 <MS_smoke_sensor_check>
   11990:	e59f192c 	ldr	r1, [pc, #2348]	; 122c4 <main+0x109c>
   11994:	e1a06000 	mov	r6, r0
   11998:	e59f0928 	ldr	r0, [pc, #2344]	; 122c8 <main+0x10a0>
   1199c:	eb001181 	bl	15fa8 <MS_smoke_sensor_check>
   119a0:	e59f3a34 	ldr	r3, [pc, #2612]	; 123dc <main+0x11b4>
   119a4:	e59f2a30 	ldr	r2, [pc, #2608]	; 123dc <main+0x11b4>
   119a8:	e5933004 	ldr	r3, [r3, #4]
   119ac:	e3530000 	cmp	r3, #0
   119b0:	0a00008c 	beq	11be8 <main+0x9c0>
   119b4:	e59f18ac 	ldr	r1, [pc, #2220]	; 12268 <main+0x1040>
   119b8:	e5d11000 	ldrb	r1, [r1]
   119bc:	e3510000 	cmp	r1, #0
   119c0:	0a00015b 	beq	11f34 <main+0xd0c>
   119c4:	e5991000 	ldr	r1, [r9]
   119c8:	e3510002 	cmp	r1, #2
   119cc:	ca0002b9 	bgt	124b8 <main+0x1290>
   119d0:	e59f3a04 	ldr	r3, [pc, #2564]	; 123dc <main+0x11b4>
   119d4:	e59f5a00 	ldr	r5, [pc, #2560]	; 123dc <main+0x11b4>
   119d8:	e5933000 	ldr	r3, [r3]
   119dc:	e353000e 	cmp	r3, #14
   119e0:	0a0002d4 	beq	12538 <main+0x1310>
   119e4:	e353000d 	cmp	r3, #13
   119e8:	ca000189 	bgt	12014 <main+0xdec>
   119ec:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   119f0:	e3520000 	cmp	r2, #0
   119f4:	1a00034a 	bne	12724 <main+0x14fc>
   119f8:	e3a02000 	mov	r2, #0
   119fc:	e3530008 	cmp	r3, #8
   11a00:	e58d2030 	str	r2, [sp, #48]	; 0x30
   11a04:	1a000182 	bne	12014 <main+0xdec>
   11a08:	e59a3000 	ldr	r3, [sl]
   11a0c:	e59fc810 	ldr	ip, [pc, #2064]	; 12224 <main+0xffc>
   11a10:	e3530000 	cmp	r3, #0
   11a14:	0a0003cc 	beq	1294c <main+0x1724>
   11a18:	e3530001 	cmp	r3, #1
   11a1c:	0a00016d 	beq	11fd8 <main+0xdb0>
   11a20:	e3530002 	cmp	r3, #2
   11a24:	0a000438 	beq	12b0c <main+0x18e4>
   11a28:	e59f389c 	ldr	r3, [pc, #2204]	; 122cc <main+0x10a4>
   11a2c:	e5933004 	ldr	r3, [r3, #4]
   11a30:	e3530000 	cmp	r3, #0
   11a34:	1a00006f 	bne	11bf8 <main+0x9d0>
   11a38:	eb000f5b 	bl	157ac <MS_store_sens_to_file>
   11a3c:	e59f388c 	ldr	r3, [pc, #2188]	; 122d0 <main+0x10a8>
   11a40:	e1a05003 	mov	r5, r3
   11a44:	e5932004 	ldr	r2, [r3, #4]
   11a48:	e3520001 	cmp	r2, #1
   11a4c:	0a000119 	beq	11eb8 <main+0xc90>
   11a50:	e59f387c 	ldr	r3, [pc, #2172]	; 122d4 <main+0x10ac>
   11a54:	e59f1874 	ldr	r1, [pc, #2164]	; 122d0 <main+0x10a8>
   11a58:	e59f5874 	ldr	r5, [pc, #2164]	; 122d4 <main+0x10ac>
   11a5c:	e5933004 	ldr	r3, [r3, #4]
   11a60:	e5812008 	str	r2, [r1, #8]
   11a64:	e3530001 	cmp	r3, #1
   11a68:	0a000121 	beq	11ef4 <main+0xccc>
   11a6c:	e3a02000 	mov	r2, #0
   11a70:	e58d2034 	str	r2, [sp, #52]	; 0x34
   11a74:	e59f2858 	ldr	r2, [pc, #2136]	; 122d4 <main+0x10ac>
   11a78:	e5823008 	str	r3, [r2, #8]
   11a7c:	e3a03078 	mov	r3, #120	; 0x78
   11a80:	e5843004 	str	r3, [r4, #4]
   11a84:	eaffff3f 	b	11788 <main+0x560>
   11a88:	e59f0848 	ldr	r0, [pc, #2120]	; 122d8 <main+0x10b0>
   11a8c:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11a90:	e3a0200c 	mov	r2, #12
   11a94:	ebfffd89 	bl	110c0 <strncasecmp@plt>
   11a98:	e2505000 	subs	r5, r0, #0
   11a9c:	0a000328 	beq	12744 <main+0x151c>
   11aa0:	e59f0834 	ldr	r0, [pc, #2100]	; 122dc <main+0x10b4>
   11aa4:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11aa8:	e3a02009 	mov	r2, #9
   11aac:	ebfffd83 	bl	110c0 <strncasecmp@plt>
   11ab0:	e3500000 	cmp	r0, #0
   11ab4:	1a0002b2 	bne	12584 <main+0x135c>
   11ab8:	e3a02002 	mov	r2, #2
   11abc:	e28d10c5 	add	r1, sp, #197	; 0xc5
   11ac0:	e59f095c 	ldr	r0, [pc, #2396]	; 12424 <main+0x11fc>
   11ac4:	ebfffd7d 	bl	110c0 <strncasecmp@plt>
   11ac8:	e28d10c5 	add	r1, sp, #197	; 0xc5
   11acc:	e3500000 	cmp	r0, #0
   11ad0:	03a03001 	moveq	r3, #1
   11ad4:	059f2788 	ldreq	r2, [pc, #1928]	; 12264 <main+0x103c>
   11ad8:	e59f0948 	ldr	r0, [pc, #2376]	; 12428 <main+0x1200>
   11adc:	05c23003 	strbeq	r3, [r2, #3]
   11ae0:	e3a02003 	mov	r2, #3
   11ae4:	ebfffd75 	bl	110c0 <strncasecmp@plt>
   11ae8:	e3500000 	cmp	r0, #0
   11aec:	01a01000 	moveq	r1, r0
   11af0:	159f376c 	ldrne	r3, [pc, #1900]	; 12264 <main+0x103c>
   11af4:	059f3768 	ldreq	r3, [pc, #1896]	; 12264 <main+0x103c>
   11af8:	15d31003 	ldrbne	r1, [r3, #3]
   11afc:	05c30003 	strbeq	r0, [r3, #3]
   11b00:	e3a00093 	mov	r0, #147	; 0x93
   11b04:	eb000e5e 	bl	15484 <MS_set_main_on_off>
   11b08:	eb001155 	bl	16064 <MS_write_on_off>
   11b0c:	e58d001c 	str	r0, [sp, #28]
   11b10:	eaffff60 	b	11898 <main+0x670>
   11b14:	e3a05000 	mov	r5, #0
   11b18:	e5980000 	ldr	r0, [r8]
   11b1c:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11b20:	e3a02063 	mov	r2, #99	; 0x63
   11b24:	e58c5000 	str	r5, [ip]
   11b28:	ebfffcec 	bl	10ee0 <read@plt>
   11b2c:	e28d3e12 	add	r3, sp, #288	; 0x120
   11b30:	e0833000 	add	r3, r3, r0
   11b34:	e1500005 	cmp	r0, r5
   11b38:	e5435064 	strb	r5, [r3, #-100]	; 0xffffff9c
   11b3c:	e5cd511f 	strb	r5, [sp, #287]	; 0x11f
   11b40:	da000121 	ble	11fcc <main+0xda4>
   11b44:	e5980000 	ldr	r0, [r8]
   11b48:	e28d1048 	add	r1, sp, #72	; 0x48
   11b4c:	e3a0200a 	mov	r2, #10
   11b50:	ebfffce2 	bl	10ee0 <read@plt>
   11b54:	e3500000 	cmp	r0, #0
   11b58:	1afffff9 	bne	11b44 <main+0x91c>
   11b5c:	e59f077c 	ldr	r0, [pc, #1916]	; 122e0 <main+0x10b8>
   11b60:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11b64:	e3a02004 	mov	r2, #4
   11b68:	ebfffd54 	bl	110c0 <strncasecmp@plt>
   11b6c:	e2505000 	subs	r5, r0, #0
   11b70:	0a000136 	beq	12050 <main+0xe28>
   11b74:	e59f0768 	ldr	r0, [pc, #1896]	; 122e4 <main+0x10bc>
   11b78:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11b7c:	e3a02003 	mov	r2, #3
   11b80:	ebfffd4e 	bl	110c0 <strncasecmp@plt>
   11b84:	e3500000 	cmp	r0, #0
   11b88:	1a0000a0 	bne	11e10 <main+0xbe8>
   11b8c:	e3a02002 	mov	r2, #2
   11b90:	e28d10bf 	add	r1, sp, #191	; 0xbf
   11b94:	e59f0888 	ldr	r0, [pc, #2184]	; 12424 <main+0x11fc>
   11b98:	ebfffd48 	bl	110c0 <strncasecmp@plt>
   11b9c:	e28d10bf 	add	r1, sp, #191	; 0xbf
   11ba0:	e3500000 	cmp	r0, #0
   11ba4:	03a03001 	moveq	r3, #1
   11ba8:	059f26b4 	ldreq	r2, [pc, #1716]	; 12264 <main+0x103c>
   11bac:	e59f0874 	ldr	r0, [pc, #2164]	; 12428 <main+0x1200>
   11bb0:	05c23000 	strbeq	r3, [r2]
   11bb4:	e3a02003 	mov	r2, #3
   11bb8:	ebfffd40 	bl	110c0 <strncasecmp@plt>
   11bbc:	e3500000 	cmp	r0, #0
   11bc0:	01a01000 	moveq	r1, r0
   11bc4:	159f3698 	ldrne	r3, [pc, #1688]	; 12264 <main+0x103c>
   11bc8:	059f3694 	ldreq	r3, [pc, #1684]	; 12264 <main+0x103c>
   11bcc:	15d31000 	ldrbne	r1, [r3]
   11bd0:	05c30000 	strbeq	r0, [r3]
   11bd4:	e3a00090 	mov	r0, #144	; 0x90
   11bd8:	eb000e29 	bl	15484 <MS_set_main_on_off>
   11bdc:	eb001120 	bl	16064 <MS_write_on_off>
   11be0:	e58d001c 	str	r0, [sp, #28]
   11be4:	eaffff2b 	b	11898 <main+0x670>
   11be8:	e59f36dc 	ldr	r3, [pc, #1756]	; 122cc <main+0x10a4>
   11bec:	e5933004 	ldr	r3, [r3, #4]
   11bf0:	e3530000 	cmp	r3, #0
   11bf4:	0a000042 	beq	11d04 <main+0xadc>
   11bf8:	e59f36cc 	ldr	r3, [pc, #1740]	; 122cc <main+0x10a4>
   11bfc:	e5933000 	ldr	r3, [r3]
   11c00:	e3530001 	cmp	r3, #1
   11c04:	0a000162 	beq	12194 <main+0xf6c>
   11c08:	e5993000 	ldr	r3, [r9]
   11c0c:	e3530001 	cmp	r3, #1
   11c10:	daffff88 	ble	11a38 <main+0x810>
   11c14:	e59f36b0 	ldr	r3, [pc, #1712]	; 122cc <main+0x10a4>
   11c18:	e3a0001f 	mov	r0, #31
   11c1c:	e59f16c4 	ldr	r1, [pc, #1732]	; 122e8 <main+0x10c0>
   11c20:	e893000c 	ldm	r3, {r2, r3}
   11c24:	ebfffd4f 	bl	11168 <syslog@plt>
   11c28:	eaffff82 	b	11a38 <main+0x810>
   11c2c:	e59a3000 	ldr	r3, [sl]
   11c30:	e59f25ec 	ldr	r2, [pc, #1516]	; 12224 <main+0xffc>
   11c34:	e3530001 	cmp	r3, #1
   11c38:	0a0000cc 	beq	11f70 <main+0xd48>
   11c3c:	e3530003 	cmp	r3, #3
   11c40:	0a000214 	beq	12498 <main+0x1270>
   11c44:	e3530004 	cmp	r3, #4
   11c48:	0a00021f 	beq	124cc <main+0x12a4>
   11c4c:	e3e03000 	mvn	r3, #0
   11c50:	e58d3020 	str	r3, [sp, #32]
   11c54:	eafffe65 	b	115f0 <main+0x3c8>
   11c58:	e3570005 	cmp	r7, #5
   11c5c:	0a000168 	beq	12204 <main+0xfdc>
   11c60:	e3570001 	cmp	r7, #1
   11c64:	0a00013a 	beq	12154 <main+0xf2c>
   11c68:	e3570003 	cmp	r7, #3
   11c6c:	0a00015a 	beq	121dc <main+0xfb4>
   11c70:	e3570004 	cmp	r7, #4
   11c74:	1afffede 	bne	117f4 <main+0x5cc>
   11c78:	e59d3020 	ldr	r3, [sp, #32]
   11c7c:	e3a0001e 	mov	r0, #30
   11c80:	e3730001 	cmn	r3, #1
   11c84:	e59f1660 	ldr	r1, [pc, #1632]	; 122ec <main+0x10c4>
   11c88:	059f35f8 	ldreq	r3, [pc, #1528]	; 12288 <main+0x1060>
   11c8c:	05933000 	ldreq	r3, [r3]
   11c90:	058d3020 	streq	r3, [sp, #32]
   11c94:	ebfffd33 	bl	11168 <syslog@plt>
   11c98:	eafffed5 	b	117f4 <main+0x5cc>
   11c9c:	e3d23002 	bics	r3, r2, #2
   11ca0:	03a03001 	moveq	r3, #1
   11ca4:	13a03000 	movne	r3, #0
   11ca8:	e3520004 	cmp	r2, #4
   11cac:	03833001 	orreq	r3, r3, #1
   11cb0:	e3530000 	cmp	r3, #0
   11cb4:	1a000265 	bne	12650 <main+0x1428>
   11cb8:	e3520001 	cmp	r2, #1
   11cbc:	0a00025e 	beq	1263c <main+0x1414>
   11cc0:	e3520003 	cmp	r2, #3
   11cc4:	0a00013f 	beq	121c8 <main+0xfa0>
   11cc8:	e3a03002 	mov	r3, #2
   11ccc:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11cd0:	e5943000 	ldr	r3, [r4]
   11cd4:	e59f55a4 	ldr	r5, [pc, #1444]	; 12280 <main+0x1058>
   11cd8:	e3730001 	cmn	r3, #1
   11cdc:	1afffea7 	bne	11780 <main+0x558>
   11ce0:	e3a00011 	mov	r0, #17
   11ce4:	eb0006a2 	bl	13774 <get_irq>
   11ce8:	e3500000 	cmp	r0, #0
   11cec:	1a00003c 	bne	11de4 <main+0xbbc>
   11cf0:	e5953004 	ldr	r3, [r5, #4]
   11cf4:	e3530000 	cmp	r3, #0
   11cf8:	0a000039 	beq	11de4 <main+0xbbc>
   11cfc:	e5953000 	ldr	r3, [r5]
   11d00:	eafffe9e 	b	11780 <main+0x558>
   11d04:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   11d08:	e1835005 	orr	r5, r3, r5
   11d0c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   11d10:	e1855003 	orr	r5, r5, r3
   11d14:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   11d18:	e1855003 	orr	r5, r5, r3
   11d1c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   11d20:	e1855003 	orr	r5, r5, r3
   11d24:	e1856006 	orr	r6, r5, r6
   11d28:	e1963000 	orrs	r3, r6, r0
   11d2c:	0affff42 	beq	11a3c <main+0x814>
   11d30:	eaffff40 	b	11a38 <main+0x810>
   11d34:	e59f05b4 	ldr	r0, [pc, #1460]	; 122f0 <main+0x10c8>
   11d38:	eb000b2a 	bl	149e8 <land_cmd>
   11d3c:	eafffedc 	b	118b4 <main+0x68c>
   11d40:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   11d44:	e3530000 	cmp	r3, #0
   11d48:	1a00010e 	bne	12188 <main+0xf60>
   11d4c:	e3a0001e 	mov	r0, #30
   11d50:	e59f159c 	ldr	r1, [pc, #1436]	; 122f4 <main+0x10cc>
   11d54:	e59f2700 	ldr	r2, [pc, #1792]	; 1245c <main+0x1234>
   11d58:	ebfffd02 	bl	11168 <syslog@plt>
   11d5c:	eafffea4 	b	117f4 <main+0x5cc>
   11d60:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   11d64:	e3530000 	cmp	r3, #0
   11d68:	0afffe3b 	beq	1165c <main+0x434>
   11d6c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   11d70:	e2833001 	add	r3, r3, #1
   11d74:	e3530003 	cmp	r3, #3
   11d78:	e58d3044 	str	r3, [sp, #68]	; 0x44
   11d7c:	da00010b 	ble	121b0 <main+0xf88>
   11d80:	e3a00001 	mov	r0, #1
   11d84:	eb000c8d 	bl	14fc0 <create_landing_color.constprop.5>
   11d88:	e3a03000 	mov	r3, #0
   11d8c:	e58d3044 	str	r3, [sp, #68]	; 0x44
   11d90:	eafffe31 	b	1165c <main+0x434>
   11d94:	eb001281 	bl	167a0 <PWR_get_power>
   11d98:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   11d9c:	e59b3028 	ldr	r3, [fp, #40]	; 0x28
   11da0:	e3520000 	cmp	r2, #0
   11da4:	13a02001 	movne	r2, #1
   11da8:	03a02005 	moveq	r2, #5
   11dac:	e3530000 	cmp	r3, #0
   11db0:	e58d2028 	str	r2, [sp, #40]	; 0x28
   11db4:	e59f5470 	ldr	r5, [pc, #1136]	; 1222c <main+0x1004>
   11db8:	0afffe1e 	beq	11638 <main+0x410>
   11dbc:	eb00133e 	bl	16abc <PWR_get_wc_lamp>
   11dc0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   11dc4:	e3530000 	cmp	r3, #0
   11dc8:	0afffe1a 	beq	11638 <main+0x410>
   11dcc:	eb001306 	bl	169ec <PWR_get_sens_curr>
   11dd0:	eafffe18 	b	11638 <main+0x410>
   11dd4:	eb001120 	bl	1625c <MS_humidity>
   11dd8:	e3a0300a 	mov	r3, #10
   11ddc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   11de0:	eafffe24 	b	11678 <main+0x450>
   11de4:	e3a03005 	mov	r3, #5
   11de8:	e5843000 	str	r3, [r4]
   11dec:	eafffe65 	b	11788 <main+0x560>
   11df0:	ebfffcaf 	bl	110b4 <__errno_location@plt>
   11df4:	e5900000 	ldr	r0, [r0]
   11df8:	ebfffc7d 	bl	10ff4 <strerror@plt>
   11dfc:	e59f14f4 	ldr	r1, [pc, #1268]	; 122f8 <main+0x10d0>
   11e00:	e1a02000 	mov	r2, r0
   11e04:	e3a0001b 	mov	r0, #27
   11e08:	ebfffcd6 	bl	11168 <syslog@plt>
   11e0c:	eafffe6a 	b	117bc <main+0x594>
   11e10:	e59f04e4 	ldr	r0, [pc, #1252]	; 122fc <main+0x10d4>
   11e14:	e28d10bc 	add	r1, sp, #188	; 0xbc
   11e18:	e3a02003 	mov	r2, #3
   11e1c:	ebfffca7 	bl	110c0 <strncasecmp@plt>
   11e20:	e3500000 	cmp	r0, #0
   11e24:	1affff17 	bne	11a88 <main+0x860>
   11e28:	e3a02002 	mov	r2, #2
   11e2c:	e28d10bf 	add	r1, sp, #191	; 0xbf
   11e30:	e59f05ec 	ldr	r0, [pc, #1516]	; 12424 <main+0x11fc>
   11e34:	ebfffca1 	bl	110c0 <strncasecmp@plt>
   11e38:	e28d10bf 	add	r1, sp, #191	; 0xbf
   11e3c:	e3500000 	cmp	r0, #0
   11e40:	03a03001 	moveq	r3, #1
   11e44:	059f2418 	ldreq	r2, [pc, #1048]	; 12264 <main+0x103c>
   11e48:	e59f05d8 	ldr	r0, [pc, #1496]	; 12428 <main+0x1200>
   11e4c:	05c23001 	strbeq	r3, [r2, #1]
   11e50:	e3a02003 	mov	r2, #3
   11e54:	ebfffc99 	bl	110c0 <strncasecmp@plt>
   11e58:	e3500000 	cmp	r0, #0
   11e5c:	01a01000 	moveq	r1, r0
   11e60:	159f33fc 	ldrne	r3, [pc, #1020]	; 12264 <main+0x103c>
   11e64:	059f33f8 	ldreq	r3, [pc, #1016]	; 12264 <main+0x103c>
   11e68:	15d31001 	ldrbne	r1, [r3, #1]
   11e6c:	05c30001 	strbeq	r0, [r3, #1]
   11e70:	e3a00091 	mov	r0, #145	; 0x91
   11e74:	eb000d82 	bl	15484 <MS_set_main_on_off>
   11e78:	eb001079 	bl	16064 <MS_write_on_off>
   11e7c:	e58d001c 	str	r0, [sp, #28]
   11e80:	eafffe84 	b	11898 <main+0x670>
   11e84:	e3a0001f 	mov	r0, #31
   11e88:	e59f1470 	ldr	r1, [pc, #1136]	; 12300 <main+0x10d8>
   11e8c:	ebfffcb5 	bl	11168 <syslog@plt>
   11e90:	eafffeab 	b	11944 <main+0x71c>
   11e94:	e1a00005 	mov	r0, r5
   11e98:	ebfffcd6 	bl	111f8 <close@plt>
   11e9c:	e5993000 	ldr	r3, [r9]
   11ea0:	e3530001 	cmp	r3, #1
   11ea4:	dafffe44 	ble	117bc <main+0x594>
   11ea8:	e3a0001f 	mov	r0, #31
   11eac:	e59f1450 	ldr	r1, [pc, #1104]	; 12304 <main+0x10dc>
   11eb0:	ebfffcac 	bl	11168 <syslog@plt>
   11eb4:	eafffe40 	b	117bc <main+0x594>
   11eb8:	e5933008 	ldr	r3, [r3, #8]
   11ebc:	e3530000 	cmp	r3, #0
   11ec0:	1afffee2 	bne	11a50 <main+0x828>
   11ec4:	e5953000 	ldr	r3, [r5]
   11ec8:	e3530000 	cmp	r3, #0
   11ecc:	1a0001ec 	bne	12684 <main+0x145c>
   11ed0:	e5993000 	ldr	r3, [r9]
   11ed4:	e3530001 	cmp	r3, #1
   11ed8:	dafffedc 	ble	11a50 <main+0x828>
   11edc:	e3a0001f 	mov	r0, #31
   11ee0:	e59f1420 	ldr	r1, [pc, #1056]	; 12308 <main+0x10e0>
   11ee4:	ebfffc9f 	bl	11168 <syslog@plt>
   11ee8:	e59f33e0 	ldr	r3, [pc, #992]	; 122d0 <main+0x10a8>
   11eec:	e5932004 	ldr	r2, [r3, #4]
   11ef0:	eafffed6 	b	11a50 <main+0x828>
   11ef4:	e5952008 	ldr	r2, [r5, #8]
   11ef8:	e3520000 	cmp	r2, #0
   11efc:	1afffeda 	bne	11a6c <main+0x844>
   11f00:	e5952000 	ldr	r2, [r5]
   11f04:	e3520000 	cmp	r2, #0
   11f08:	1a0001d8 	bne	12670 <main+0x1448>
   11f0c:	e5992000 	ldr	r2, [r9]
   11f10:	e3520001 	cmp	r2, #1
   11f14:	dafffed4 	ble	11a6c <main+0x844>
   11f18:	e1a02003 	mov	r2, r3
   11f1c:	e3a0001f 	mov	r0, #31
   11f20:	e59f13e4 	ldr	r1, [pc, #996]	; 1230c <main+0x10e4>
   11f24:	ebfffc8f 	bl	11168 <syslog@plt>
   11f28:	e59f33a4 	ldr	r3, [pc, #932]	; 122d4 <main+0x10ac>
   11f2c:	e5933004 	ldr	r3, [r3, #4]
   11f30:	eafffecd 	b	11a6c <main+0x844>
   11f34:	e59a3000 	ldr	r3, [sl]
   11f38:	e59f52e4 	ldr	r5, [pc, #740]	; 12224 <main+0xffc>
   11f3c:	e3530002 	cmp	r3, #2
   11f40:	0a000173 	beq	12514 <main+0x12ec>
   11f44:	e3530001 	cmp	r3, #1
   11f48:	0a000163 	beq	124dc <main+0x12b4>
   11f4c:	e5993000 	ldr	r3, [r9]
   11f50:	e3530001 	cmp	r3, #1
   11f54:	dafffeb3 	ble	11a28 <main+0x800>
   11f58:	e59f347c 	ldr	r3, [pc, #1148]	; 123dc <main+0x11b4>
   11f5c:	e3a0001f 	mov	r0, #31
   11f60:	e59f1418 	ldr	r1, [pc, #1048]	; 12380 <main+0x1158>
   11f64:	e893000c 	ldm	r3, {r2, r3}
   11f68:	ebfffc7e 	bl	11168 <syslog@plt>
   11f6c:	eafffead 	b	11a28 <main+0x800>
   11f70:	e59f34ec 	ldr	r3, [pc, #1260]	; 12464 <main+0x123c>
   11f74:	e3a01002 	mov	r1, #2
   11f78:	e5821000 	str	r1, [r2]
   11f7c:	e5d33018 	ldrb	r3, [r3, #24]
   11f80:	e1530001 	cmp	r3, r1
   11f84:	1affff30 	bne	11c4c <main+0xa24>
   11f88:	e59f3430 	ldr	r3, [pc, #1072]	; 123c0 <main+0x1198>
   11f8c:	e59f14c8 	ldr	r1, [pc, #1224]	; 1245c <main+0x1234>
   11f90:	e5d33000 	ldrb	r3, [r3]
   11f94:	e3130002 	tst	r3, #2
   11f98:	159f0424 	ldrne	r0, [pc, #1060]	; 123c4 <main+0x119c>
   11f9c:	059f0428 	ldreq	r0, [pc, #1064]	; 123cc <main+0x11a4>
   11fa0:	eb000f23 	bl	15c34 <MS_run_event>
   11fa4:	e3e03000 	mvn	r3, #0
   11fa8:	e58d3020 	str	r3, [sp, #32]
   11fac:	eafffd8f 	b	115f0 <main+0x3c8>
   11fb0:	eb0013f6 	bl	16f90 <RFID_write_stat>
   11fb4:	e3500000 	cmp	r0, #0
   11fb8:	1affff42 	bne	11cc8 <main+0xaa0>
   11fbc:	e3a03002 	mov	r3, #2
   11fc0:	e5850000 	str	r0, [r5]
   11fc4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11fc8:	eafffde8 	b	11770 <main+0x548>
   11fcc:	e3a03000 	mov	r3, #0
   11fd0:	e58d301c 	str	r3, [sp, #28]
   11fd4:	eafffe2f 	b	11898 <main+0x670>
   11fd8:	e59f3484 	ldr	r3, [pc, #1156]	; 12464 <main+0x123c>
   11fdc:	e3a02002 	mov	r2, #2
   11fe0:	e58c2000 	str	r2, [ip]
   11fe4:	e5d33018 	ldrb	r3, [r3, #24]
   11fe8:	e1530002 	cmp	r3, r2
   11fec:	1afffe8d 	bne	11a28 <main+0x800>
   11ff0:	e59f33c8 	ldr	r3, [pc, #968]	; 123c0 <main+0x1198>
   11ff4:	e5d33000 	ldrb	r3, [r3]
   11ff8:	e3130002 	tst	r3, #2
   11ffc:	0a00029d 	beq	12a78 <main+0x1850>
   12000:	e59f03bc 	ldr	r0, [pc, #956]	; 123c4 <main+0x119c>
   12004:	e59f1450 	ldr	r1, [pc, #1104]	; 1245c <main+0x1234>
   12008:	eb000f09 	bl	15c34 <MS_run_event>
   1200c:	e59f33c8 	ldr	r3, [pc, #968]	; 123dc <main+0x11b4>
   12010:	e5933000 	ldr	r3, [r3]
   12014:	e353000a 	cmp	r3, #10
   12018:	1afffe82 	bne	11a28 <main+0x800>
   1201c:	e59a3000 	ldr	r3, [sl]
   12020:	e59f21fc 	ldr	r2, [pc, #508]	; 12224 <main+0xffc>
   12024:	e3530001 	cmp	r3, #1
   12028:	0a00025b 	beq	1299c <main+0x1774>
   1202c:	e3530002 	cmp	r3, #2
   12030:	1afffe7c 	bne	11a28 <main+0x800>
   12034:	e59f12d4 	ldr	r1, [pc, #724]	; 12310 <main+0x10e8>
   12038:	e59f0394 	ldr	r0, [pc, #916]	; 123d4 <main+0x11ac>
   1203c:	eb000efc 	bl	15c34 <MS_run_event>
   12040:	eafffe78 	b	11a28 <main+0x800>
   12044:	e1a00007 	mov	r0, r7
   12048:	eb001363 	bl	16ddc <RFID_clear_last>
   1204c:	eafffde4 	b	117e4 <main+0x5bc>
   12050:	e3a0001e 	mov	r0, #30
   12054:	e59f12b8 	ldr	r1, [pc, #696]	; 12314 <main+0x10ec>
   12058:	ebfffc42 	bl	11168 <syslog@plt>
   1205c:	e3a0001e 	mov	r0, #30
   12060:	e59f12b0 	ldr	r1, [pc, #688]	; 12318 <main+0x10f0>
   12064:	ebfffc3f 	bl	11168 <syslog@plt>
   12068:	e3a0001e 	mov	r0, #30
   1206c:	e59f12a8 	ldr	r1, [pc, #680]	; 1231c <main+0x10f4>
   12070:	ebfffc3c 	bl	11168 <syslog@plt>
   12074:	e3a0001e 	mov	r0, #30
   12078:	e59f12a0 	ldr	r1, [pc, #672]	; 12320 <main+0x10f8>
   1207c:	ebfffc39 	bl	11168 <syslog@plt>
   12080:	e3a0001e 	mov	r0, #30
   12084:	e59f1298 	ldr	r1, [pc, #664]	; 12324 <main+0x10fc>
   12088:	ebfffc36 	bl	11168 <syslog@plt>
   1208c:	e3a0001e 	mov	r0, #30
   12090:	e59f1290 	ldr	r1, [pc, #656]	; 12328 <main+0x1100>
   12094:	ebfffc33 	bl	11168 <syslog@plt>
   12098:	e3a0001e 	mov	r0, #30
   1209c:	e59f1288 	ldr	r1, [pc, #648]	; 1232c <main+0x1104>
   120a0:	ebfffc30 	bl	11168 <syslog@plt>
   120a4:	e3a0001e 	mov	r0, #30
   120a8:	e59f1280 	ldr	r1, [pc, #640]	; 12330 <main+0x1108>
   120ac:	ebfffc2d 	bl	11168 <syslog@plt>
   120b0:	e3a0001e 	mov	r0, #30
   120b4:	e59f1278 	ldr	r1, [pc, #632]	; 12334 <main+0x110c>
   120b8:	ebfffc2a 	bl	11168 <syslog@plt>
   120bc:	e3a0001e 	mov	r0, #30
   120c0:	e59f1270 	ldr	r1, [pc, #624]	; 12338 <main+0x1110>
   120c4:	ebfffc27 	bl	11168 <syslog@plt>
   120c8:	e3a0001e 	mov	r0, #30
   120cc:	e59f1268 	ldr	r1, [pc, #616]	; 1233c <main+0x1114>
   120d0:	ebfffc24 	bl	11168 <syslog@plt>
   120d4:	e3a0001e 	mov	r0, #30
   120d8:	e59f1260 	ldr	r1, [pc, #608]	; 12340 <main+0x1118>
   120dc:	ebfffc21 	bl	11168 <syslog@plt>
   120e0:	e3a0001e 	mov	r0, #30
   120e4:	e59f1258 	ldr	r1, [pc, #600]	; 12344 <main+0x111c>
   120e8:	ebfffc1e 	bl	11168 <syslog@plt>
   120ec:	e3a0001e 	mov	r0, #30
   120f0:	e59f1250 	ldr	r1, [pc, #592]	; 12348 <main+0x1120>
   120f4:	ebfffc1b 	bl	11168 <syslog@plt>
   120f8:	e3a0001e 	mov	r0, #30
   120fc:	e59f1248 	ldr	r1, [pc, #584]	; 1234c <main+0x1124>
   12100:	ebfffc18 	bl	11168 <syslog@plt>
   12104:	e3a0001e 	mov	r0, #30
   12108:	e59f1240 	ldr	r1, [pc, #576]	; 12350 <main+0x1128>
   1210c:	ebfffc15 	bl	11168 <syslog@plt>
   12110:	e3a0001e 	mov	r0, #30
   12114:	e59f1238 	ldr	r1, [pc, #568]	; 12354 <main+0x112c>
   12118:	ebfffc12 	bl	11168 <syslog@plt>
   1211c:	e3a0001e 	mov	r0, #30
   12120:	e59f1230 	ldr	r1, [pc, #560]	; 12358 <main+0x1130>
   12124:	ebfffc0f 	bl	11168 <syslog@plt>
   12128:	e3a0001e 	mov	r0, #30
   1212c:	e59f1228 	ldr	r1, [pc, #552]	; 1235c <main+0x1134>
   12130:	ebfffc0c 	bl	11168 <syslog@plt>
   12134:	e3a0001e 	mov	r0, #30
   12138:	e59f1220 	ldr	r1, [pc, #544]	; 12360 <main+0x1138>
   1213c:	ebfffc09 	bl	11168 <syslog@plt>
   12140:	e3a0001e 	mov	r0, #30
   12144:	e59f1218 	ldr	r1, [pc, #536]	; 12364 <main+0x113c>
   12148:	e58d501c 	str	r5, [sp, #28]
   1214c:	ebfffc05 	bl	11168 <syslog@plt>
   12150:	eafffdd0 	b	11898 <main+0x670>
   12154:	e59d3020 	ldr	r3, [sp, #32]
   12158:	e3730001 	cmn	r3, #1
   1215c:	059f3124 	ldreq	r3, [pc, #292]	; 12288 <main+0x1060>
   12160:	05933000 	ldreq	r3, [r3]
   12164:	058d3020 	streq	r3, [sp, #32]
   12168:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   1216c:	e3530000 	cmp	r3, #0
   12170:	1a00013b 	bne	12664 <main+0x143c>
   12174:	e3a0001e 	mov	r0, #30
   12178:	e59f11e8 	ldr	r1, [pc, #488]	; 12368 <main+0x1140>
   1217c:	e28d208d 	add	r2, sp, #141	; 0x8d
   12180:	ebfffbf8 	bl	11168 <syslog@plt>
   12184:	eafffd9a 	b	117f4 <main+0x5cc>
   12188:	e3a00000 	mov	r0, #0
   1218c:	eb001312 	bl	16ddc <RFID_clear_last>
   12190:	eafffeed 	b	11d4c <main+0xb24>
   12194:	e59a3000 	ldr	r3, [sl]
   12198:	e3530002 	cmp	r3, #2
   1219c:	1afffe99 	bne	11c08 <main+0x9e0>
   121a0:	e59f11c4 	ldr	r1, [pc, #452]	; 1236c <main+0x1144>
   121a4:	e59f0228 	ldr	r0, [pc, #552]	; 123d4 <main+0x11ac>
   121a8:	eb000ea1 	bl	15c34 <MS_run_event>
   121ac:	eafffe95 	b	11c08 <main+0x9e0>
   121b0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   121b4:	e3530002 	cmp	r3, #2
   121b8:	1afffd27 	bne	1165c <main+0x434>
   121bc:	e59f01ac 	ldr	r0, [pc, #428]	; 12370 <main+0x1148>
   121c0:	eb000a08 	bl	149e8 <land_cmd>
   121c4:	eafffd24 	b	1165c <main+0x434>
   121c8:	e3a00002 	mov	r0, #2
   121cc:	eb001302 	bl	16ddc <RFID_clear_last>
   121d0:	e3a03002 	mov	r3, #2
   121d4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   121d8:	eafffd64 	b	11770 <main+0x548>
   121dc:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   121e0:	e3530000 	cmp	r3, #0
   121e4:	1a000153 	bne	12738 <main+0x1510>
   121e8:	e3a0001e 	mov	r0, #30
   121ec:	e59f1180 	ldr	r1, [pc, #384]	; 12374 <main+0x114c>
   121f0:	ebfffbdc 	bl	11168 <syslog@plt>
   121f4:	eafffd7e 	b	117f4 <main+0x5cc>
   121f8:	e3a00000 	mov	r0, #0
   121fc:	eb000b6f 	bl	14fc0 <create_landing_color.constprop.5>
   12200:	eafffd15 	b	1165c <main+0x434>
   12204:	e3a0c001 	mov	ip, #1
   12208:	e3a0001e 	mov	r0, #30
   1220c:	e59f1154 	ldr	r1, [pc, #340]	; 12368 <main+0x1140>
   12210:	e28d208d 	add	r2, sp, #141	; 0x8d
   12214:	e583c000 	str	ip, [r3]
   12218:	e58dc020 	str	ip, [sp, #32]
   1221c:	ebfffbd1 	bl	11168 <syslog@plt>
   12220:	eafffd73 	b	117f4 <main+0x5cc>
   12224:	0002cdcc 	.word	0x0002cdcc
   12228:	00019f84 	.word	0x00019f84
   1222c:	0002d184 	.word	0x0002d184
   12230:	0002b850 	.word	0x0002b850
   12234:	00019c48 	.word	0x00019c48
   12238:	0002d0ec 	.word	0x0002d0ec
   1223c:	00019f64 	.word	0x00019f64
   12240:	00019f6c 	.word	0x00019f6c
   12244:	00019f50 	.word	0x00019f50
   12248:	00019f58 	.word	0x00019f58
   1224c:	00019fa8 	.word	0x00019fa8
   12250:	00014d44 	.word	0x00014d44
   12254:	00014ca8 	.word	0x00014ca8
   12258:	00019e60 	.word	0x00019e60
   1225c:	0002d1bc 	.word	0x0002d1bc
   12260:	0001a01c 	.word	0x0001a01c
   12264:	0002d174 	.word	0x0002d174
   12268:	0002d094 	.word	0x0002d094
   1226c:	00019f78 	.word	0x00019f78
   12270:	00019f7c 	.word	0x00019f7c
   12274:	0001a044 	.word	0x0001a044
   12278:	00030d40 	.word	0x00030d40
   1227c:	0002d0f0 	.word	0x0002d0f0
   12280:	0002b900 	.word	0x0002b900
   12284:	0001a0b4 	.word	0x0001a0b4
   12288:	0002b3c0 	.word	0x0002b3c0
   1228c:	0001a21c 	.word	0x0001a21c
   12290:	0002cdd0 	.word	0x0002cdd0
   12294:	0002d0f4 	.word	0x0002d0f4
   12298:	0001a29c 	.word	0x0001a29c
   1229c:	0001a134 	.word	0x0001a134
   122a0:	0002b6d0 	.word	0x0002b6d0
   122a4:	0001a13c 	.word	0x0001a13c
   122a8:	0002cfe8 	.word	0x0002cfe8
   122ac:	0001a148 	.word	0x0001a148
   122b0:	0002cde4 	.word	0x0002cde4
   122b4:	0001a150 	.word	0x0001a150
   122b8:	0002b5cc 	.word	0x0002b5cc
   122bc:	0001a158 	.word	0x0001a158
   122c0:	0002b4c8 	.word	0x0002b4c8
   122c4:	0001a160 	.word	0x0001a160
   122c8:	0002b3c4 	.word	0x0002b3c4
   122cc:	0002cdd4 	.word	0x0002cdd4
   122d0:	0002cf3c 	.word	0x0002cf3c
   122d4:	0002ce90 	.word	0x0002ce90
   122d8:	0001a490 	.word	0x0001a490
   122dc:	0001a4a0 	.word	0x0001a4a0
   122e0:	0001a2c0 	.word	0x0001a2c0
   122e4:	0001a484 	.word	0x0001a484
   122e8:	0001a1bc 	.word	0x0001a1bc
   122ec:	0001a280 	.word	0x0001a280
   122f0:	0001a5a4 	.word	0x0001a5a4
   122f4:	0001a1fc 	.word	0x0001a1fc
   122f8:	00019e78 	.word	0x00019e78
   122fc:	0001a48c 	.word	0x0001a48c
   12300:	0001a120 	.word	0x0001a120
   12304:	00019eb0 	.word	0x00019eb0
   12308:	0001a1d4 	.word	0x0001a1d4
   1230c:	0001a1e8 	.word	0x0001a1e8
   12310:	0001a1ac 	.word	0x0001a1ac
   12314:	0001a2c8 	.word	0x0001a2c8
   12318:	0001a2dc 	.word	0x0001a2dc
   1231c:	0001a2f0 	.word	0x0001a2f0
   12320:	0001a304 	.word	0x0001a304
   12324:	0001a318 	.word	0x0001a318
   12328:	0001a330 	.word	0x0001a330
   1232c:	0001a344 	.word	0x0001a344
   12330:	0001a358 	.word	0x0001a358
   12334:	0001a370 	.word	0x0001a370
   12338:	0001a388 	.word	0x0001a388
   1233c:	0001a3a0 	.word	0x0001a3a0
   12340:	0001a3b8 	.word	0x0001a3b8
   12344:	0001a3d0 	.word	0x0001a3d0
   12348:	0001a3e4 	.word	0x0001a3e4
   1234c:	0001a3f8 	.word	0x0001a3f8
   12350:	0001a40c 	.word	0x0001a40c
   12354:	0001a424 	.word	0x0001a424
   12358:	0001a438 	.word	0x0001a438
   1235c:	0001a44c 	.word	0x0001a44c
   12360:	0001a45c 	.word	0x0001a45c
   12364:	0001a470 	.word	0x0001a470
   12368:	0001a23c 	.word	0x0001a23c
   1236c:	0001a1b4 	.word	0x0001a1b4
   12370:	0001a074 	.word	0x0001a074
   12374:	0001a260 	.word	0x0001a260
   12378:	0001a114 	.word	0x0001a114
   1237c:	0001a05c 	.word	0x0001a05c
   12380:	0001a168 	.word	0x0001a168
   12384:	0002b850 	.word	0x0002b850
   12388:	0002b3bc 	.word	0x0002b3bc
   1238c:	0001a4ac 	.word	0x0001a4ac
   12390:	00019c48 	.word	0x00019c48
   12394:	0001a0e4 	.word	0x0001a0e4
   12398:	0001a190 	.word	0x0001a190
   1239c:	0001a4b4 	.word	0x0001a4b4
   123a0:	0001a180 	.word	0x0001a180
   123a4:	0002b818 	.word	0x0002b818
   123a8:	0002d184 	.word	0x0002d184
   123ac:	0002b7af 	.word	0x0002b7af
   123b0:	0002b7e1 	.word	0x0002b7e1
   123b4:	0002b77b 	.word	0x0002b77b
   123b8:	0002b7ad 	.word	0x0002b7ad
   123bc:	0001a198 	.word	0x0001a198
   123c0:	0002b9bb 	.word	0x0002b9bb
   123c4:	0002c5cc 	.word	0x0002c5cc
   123c8:	0001a4bc 	.word	0x0001a4bc
   123cc:	0002c9cc 	.word	0x0002c9cc
   123d0:	0001a4c8 	.word	0x0001a4c8
   123d4:	0002bdcc 	.word	0x0002bdcc
   123d8:	0001a1a4 	.word	0x0001a1a4
   123dc:	0002cddc 	.word	0x0002cddc
   123e0:	0002b9c4 	.word	0x0002b9c4
   123e4:	0002b9bc 	.word	0x0002b9bc
   123e8:	0002b9c8 	.word	0x0002b9c8
   123ec:	0002b3b4 	.word	0x0002b3b4
   123f0:	0002b9c0 	.word	0x0002b9c0
   123f4:	0002d14c 	.word	0x0002d14c
   123f8:	0002b7e3 	.word	0x0002b7e3
   123fc:	0002b815 	.word	0x0002b815
   12400:	0001a4d4 	.word	0x0001a4d4
   12404:	0002c1cc 	.word	0x0002c1cc
   12408:	0001a4e0 	.word	0x0001a4e0
   1240c:	0001a4f0 	.word	0x0001a4f0
   12410:	00019fec 	.word	0x00019fec
   12414:	00019fa0 	.word	0x00019fa0
   12418:	00019f8c 	.word	0x00019f8c
   1241c:	00019f9c 	.word	0x00019f9c
   12420:	0001a4f8 	.word	0x0001a4f8
   12424:	0001a488 	.word	0x0001a488
   12428:	0001a314 	.word	0x0001a314
   1242c:	0002d174 	.word	0x0002d174
   12430:	0001a504 	.word	0x0001a504
   12434:	0001a514 	.word	0x0001a514
   12438:	0001a538 	.word	0x0001a538
   1243c:	0001a544 	.word	0x0001a544
   12440:	0001a554 	.word	0x0001a554
   12444:	0001a564 	.word	0x0001a564
   12448:	0001a570 	.word	0x0001a570
   1244c:	0001a57c 	.word	0x0001a57c
   12450:	0001a588 	.word	0x0001a588
   12454:	0001a594 	.word	0x0001a594
   12458:	0002cdcc 	.word	0x0002cdcc
   1245c:	0002d2c9 	.word	0x0002d2c9
   12460:	0001a510 	.word	0x0001a510
   12464:	0002d2b0 	.word	0x0002d2b0
   12468:	0001a524 	.word	0x0001a524
   1246c:	e59a0000 	ldr	r0, [sl]
   12470:	e3500000 	cmp	r0, #0
   12474:	0a000071 	beq	12640 <main+0x1418>
   12478:	e51f1108 	ldr	r1, [pc, #-264]	; 12378 <main+0x1150>
   1247c:	e51f00b0 	ldr	r0, [pc, #-176]	; 123d4 <main+0x11ac>
   12480:	eb000deb 	bl	15c34 <MS_run_event>
   12484:	e3a00002 	mov	r0, #2
   12488:	eb001253 	bl	16ddc <RFID_clear_last>
   1248c:	e3a03002 	mov	r3, #2
   12490:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12494:	eafffcb5 	b	11770 <main+0x548>
   12498:	e3a03002 	mov	r3, #2
   1249c:	e51f00d0 	ldr	r0, [pc, #-208]	; 123d4 <main+0x11ac>
   124a0:	e51f112c 	ldr	r1, [pc, #-300]	; 1237c <main+0x1154>
   124a4:	e5823000 	str	r3, [r2]
   124a8:	eb000de1 	bl	15c34 <MS_run_event>
   124ac:	e3e03000 	mvn	r3, #0
   124b0:	e58d3020 	str	r3, [sp, #32]
   124b4:	eafffc4d 	b	115f0 <main+0x3c8>
   124b8:	e5922000 	ldr	r2, [r2]
   124bc:	e3a0001f 	mov	r0, #31
   124c0:	e51f1148 	ldr	r1, [pc, #-328]	; 12380 <main+0x1158>
   124c4:	ebfffb27 	bl	11168 <syslog@plt>
   124c8:	eafffd40 	b	119d0 <main+0x7a8>
   124cc:	e3a03000 	mov	r3, #0
   124d0:	e5823000 	str	r3, [r2]
   124d4:	eb001298 	bl	16f3c <RFID_write_token_cancel>
   124d8:	eafffddb 	b	11c4c <main+0xa24>
   124dc:	e51f3108 	ldr	r3, [pc, #-264]	; 123dc <main+0x11b4>
   124e0:	e5933000 	ldr	r3, [r3]
   124e4:	e3530000 	cmp	r3, #0
   124e8:	0afffe97 	beq	11f4c <main+0xd24>
   124ec:	e51f3090 	ldr	r3, [pc, #-144]	; 12464 <main+0x123c>
   124f0:	e3a02002 	mov	r2, #2
   124f4:	e58a2000 	str	r2, [sl]
   124f8:	e5d33018 	ldrb	r3, [r3, #24]
   124fc:	e1530002 	cmp	r3, r2
   12500:	1afffe91 	bne	11f4c <main+0xd24>
   12504:	e51f10b0 	ldr	r1, [pc, #-176]	; 1245c <main+0x1234>
   12508:	e51f0144 	ldr	r0, [pc, #-324]	; 123cc <main+0x11a4>
   1250c:	eb000dc8 	bl	15c34 <MS_run_event>
   12510:	eafffe8d 	b	11f4c <main+0xd24>
   12514:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   12518:	e3530000 	cmp	r3, #0
   1251c:	0a0000ab 	beq	127d0 <main+0x15a8>
   12520:	e3a03003 	mov	r3, #3
   12524:	e5853000 	str	r3, [r5]
   12528:	e51f31a8 	ldr	r3, [pc, #-424]	; 12388 <main+0x1160>
   1252c:	e5933000 	ldr	r3, [r3]
   12530:	e58d3020 	str	r3, [sp, #32]
   12534:	eafffe84 	b	11f4c <main+0xd24>
   12538:	e51f31bc 	ldr	r3, [pc, #-444]	; 12384 <main+0x115c>
   1253c:	e5933004 	ldr	r3, [r3, #4]
   12540:	e3530000 	cmp	r3, #0
   12544:	1a0000a7 	bne	127e8 <main+0x15c0>
   12548:	e59a3000 	ldr	r3, [sl]
   1254c:	e51f20fc 	ldr	r2, [pc, #-252]	; 12458 <main+0x1230>
   12550:	e3530002 	cmp	r3, #2
   12554:	1afffd33 	bne	11a28 <main+0x800>
   12558:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   1255c:	e3530000 	cmp	r3, #0
   12560:	0a0001a2 	beq	12bf0 <main+0x19c8>
   12564:	e3a03003 	mov	r3, #3
   12568:	e58a3000 	str	r3, [sl]
   1256c:	e51f31ec 	ldr	r3, [pc, #-492]	; 12388 <main+0x1160>
   12570:	e5933000 	ldr	r3, [r3]
   12574:	e58d3020 	str	r3, [sp, #32]
   12578:	e51f31a4 	ldr	r3, [pc, #-420]	; 123dc <main+0x11b4>
   1257c:	e5933000 	ldr	r3, [r3]
   12580:	eafffd17 	b	119e4 <main+0x7bc>
   12584:	e51f0200 	ldr	r0, [pc, #-512]	; 1238c <main+0x1164>
   12588:	e28d10bc 	add	r1, sp, #188	; 0xbc
   1258c:	e3a02006 	mov	r2, #6
   12590:	ebfffaca 	bl	110c0 <strncasecmp@plt>
   12594:	e3500000 	cmp	r0, #0
   12598:	1a00006e 	bne	12758 <main+0x1530>
   1259c:	e3a02002 	mov	r2, #2
   125a0:	e28d10c2 	add	r1, sp, #194	; 0xc2
   125a4:	e51f0188 	ldr	r0, [pc, #-392]	; 12424 <main+0x11fc>
   125a8:	ebfffac4 	bl	110c0 <strncasecmp@plt>
   125ac:	e28d10c2 	add	r1, sp, #194	; 0xc2
   125b0:	e3500000 	cmp	r0, #0
   125b4:	03a03001 	moveq	r3, #1
   125b8:	051f2194 	ldreq	r2, [pc, #-404]	; 1242c <main+0x1204>
   125bc:	e51f019c 	ldr	r0, [pc, #-412]	; 12428 <main+0x1200>
   125c0:	05c23004 	strbeq	r3, [r2, #4]
   125c4:	e3a02003 	mov	r2, #3
   125c8:	ebfffabc 	bl	110c0 <strncasecmp@plt>
   125cc:	e3500000 	cmp	r0, #0
   125d0:	01a01000 	moveq	r1, r0
   125d4:	151f31b0 	ldrne	r3, [pc, #-432]	; 1242c <main+0x1204>
   125d8:	051f31b4 	ldreq	r3, [pc, #-436]	; 1242c <main+0x1204>
   125dc:	15d31004 	ldrbne	r1, [r3, #4]
   125e0:	05c30004 	strbeq	r0, [r3, #4]
   125e4:	e3a00094 	mov	r0, #148	; 0x94
   125e8:	eb000ba5 	bl	15484 <MS_set_main_on_off>
   125ec:	e51f31c8 	ldr	r3, [pc, #-456]	; 1242c <main+0x1204>
   125f0:	e5d33004 	ldrb	r3, [r3, #4]
   125f4:	e58d301c 	str	r3, [sp, #28]
   125f8:	eafffca3 	b	1188c <main+0x664>
   125fc:	e3520001 	cmp	r2, #1
   12600:	0a0000f3 	beq	129d4 <main+0x17ac>
   12604:	e3520003 	cmp	r2, #3
   12608:	1afffdae 	bne	11cc8 <main+0xaa0>
   1260c:	e3530002 	cmp	r3, #2
   12610:	e3a03000 	mov	r3, #0
   12614:	e5853000 	str	r3, [r5]
   12618:	0a0001a5 	beq	12cb4 <main+0x1a8c>
   1261c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   12620:	e3530000 	cmp	r3, #0
   12624:	1a00019b 	bne	12c98 <main+0x1a70>
   12628:	e3e03000 	mvn	r3, #0
   1262c:	e58d3020 	str	r3, [sp, #32]
   12630:	e3a03002 	mov	r3, #2
   12634:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12638:	eafffc4c 	b	11770 <main+0x548>
   1263c:	e3a00003 	mov	r0, #3
   12640:	eb0011e5 	bl	16ddc <RFID_clear_last>
   12644:	e3a03002 	mov	r3, #2
   12648:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1264c:	eafffc47 	b	11770 <main+0x548>
   12650:	e3a00000 	mov	r0, #0
   12654:	eb0011e0 	bl	16ddc <RFID_clear_last>
   12658:	e3a03002 	mov	r3, #2
   1265c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12660:	eafffc42 	b	11770 <main+0x548>
   12664:	e3a00003 	mov	r0, #3
   12668:	eb0011db 	bl	16ddc <RFID_clear_last>
   1266c:	eafffec0 	b	12174 <main+0xf4c>
   12670:	e285000c 	add	r0, r5, #12
   12674:	e51f12ec 	ldr	r1, [pc, #-748]	; 12390 <main+0x1168>
   12678:	eb000d6d 	bl	15c34 <MS_run_event>
   1267c:	e5953004 	ldr	r3, [r5, #4]
   12680:	eafffe21 	b	11f0c <main+0xce4>
   12684:	e285000c 	add	r0, r5, #12
   12688:	e51f1300 	ldr	r1, [pc, #-768]	; 12390 <main+0x1168>
   1268c:	eb000d68 	bl	15c34 <MS_run_event>
   12690:	e5952004 	ldr	r2, [r5, #4]
   12694:	eafffe0d 	b	11ed0 <main+0xca8>
   12698:	e5dd1076 	ldrb	r1, [sp, #118]	; 0x76
   1269c:	e5dd0079 	ldrb	r0, [sp, #121]	; 0x79
   126a0:	e5dde077 	ldrb	lr, [sp, #119]	; 0x77
   126a4:	e5ddc078 	ldrb	ip, [sp, #120]	; 0x78
   126a8:	e58d1000 	str	r1, [sp]
   126ac:	e5dd107a 	ldrb	r1, [sp, #122]	; 0x7a
   126b0:	e28d507b 	add	r5, sp, #123	; 0x7b
   126b4:	e58d000c 	str	r0, [sp, #12]
   126b8:	e58d1010 	str	r1, [sp, #16]
   126bc:	e5dd2074 	ldrb	r2, [sp, #116]	; 0x74
   126c0:	e5dd3075 	ldrb	r3, [sp, #117]	; 0x75
   126c4:	e58d5014 	str	r5, [sp, #20]
   126c8:	e58de004 	str	lr, [sp, #4]
   126cc:	e58dc008 	str	ip, [sp, #8]
   126d0:	e3a0001c 	mov	r0, #28
   126d4:	e51f1348 	ldr	r1, [pc, #-840]	; 12394 <main+0x116c>
   126d8:	ebfffaa2 	bl	11168 <syslog@plt>
   126dc:	eafffc0f 	b	11720 <main+0x4f8>
   126e0:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   126e4:	e3530000 	cmp	r3, #0
   126e8:	13a03001 	movne	r3, #1
   126ec:	158d3030 	strne	r3, [sp, #48]	; 0x30
   126f0:	1affff9b 	bne	12564 <main+0x133c>
   126f4:	e51f02f8 	ldr	r0, [pc, #-760]	; 12404 <main+0x11dc>
   126f8:	e28d108d 	add	r1, sp, #141	; 0x8d
   126fc:	e5823000 	str	r3, [r2]
   12700:	eb000d4b 	bl	15c34 <MS_run_event>
   12704:	e3a03001 	mov	r3, #1
   12708:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1270c:	e3a00001 	mov	r0, #1
   12710:	eb000a2a 	bl	14fc0 <create_landing_color.constprop.5>
   12714:	e51f3340 	ldr	r3, [pc, #-832]	; 123dc <main+0x11b4>
   12718:	e5933000 	ldr	r3, [r3]
   1271c:	e353000d 	cmp	r3, #13
   12720:	cafffe3b 	bgt	12014 <main+0xdec>
   12724:	e51f0394 	ldr	r0, [pc, #-916]	; 12398 <main+0x1170>
   12728:	eb0008ae 	bl	149e8 <land_cmd>
   1272c:	e51f3358 	ldr	r3, [pc, #-856]	; 123dc <main+0x11b4>
   12730:	e5933000 	ldr	r3, [r3]
   12734:	eafffcaf 	b	119f8 <main+0x7d0>
   12738:	e3a00002 	mov	r0, #2
   1273c:	eb0011a6 	bl	16ddc <RFID_clear_last>
   12740:	eafffea8 	b	121e8 <main+0xfc0>
   12744:	e3a00092 	mov	r0, #146	; 0x92
   12748:	e1a01005 	mov	r1, r5
   1274c:	eb000b4c 	bl	15484 <MS_set_main_on_off>
   12750:	e58d501c 	str	r5, [sp, #28]
   12754:	eafffc4f 	b	11898 <main+0x670>
   12758:	e51f03c4 	ldr	r0, [pc, #-964]	; 1239c <main+0x1174>
   1275c:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12760:	e3a02006 	mov	r2, #6
   12764:	ebfffa55 	bl	110c0 <strncasecmp@plt>
   12768:	e3500000 	cmp	r0, #0
   1276c:	1a0000a4 	bne	12a04 <main+0x17dc>
   12770:	e3a02002 	mov	r2, #2
   12774:	e28d10c2 	add	r1, sp, #194	; 0xc2
   12778:	e51f035c 	ldr	r0, [pc, #-860]	; 12424 <main+0x11fc>
   1277c:	ebfffa4f 	bl	110c0 <strncasecmp@plt>
   12780:	e28d10c2 	add	r1, sp, #194	; 0xc2
   12784:	e3500000 	cmp	r0, #0
   12788:	03a03001 	moveq	r3, #1
   1278c:	051f2368 	ldreq	r2, [pc, #-872]	; 1242c <main+0x1204>
   12790:	e51f0370 	ldr	r0, [pc, #-880]	; 12428 <main+0x1200>
   12794:	05c23005 	strbeq	r3, [r2, #5]
   12798:	e3a02003 	mov	r2, #3
   1279c:	ebfffa47 	bl	110c0 <strncasecmp@plt>
   127a0:	e3500000 	cmp	r0, #0
   127a4:	01a01000 	moveq	r1, r0
   127a8:	151f3384 	ldrne	r3, [pc, #-900]	; 1242c <main+0x1204>
   127ac:	051f3388 	ldreq	r3, [pc, #-904]	; 1242c <main+0x1204>
   127b0:	15d31005 	ldrbne	r1, [r3, #5]
   127b4:	05c30005 	strbeq	r0, [r3, #5]
   127b8:	e3a00095 	mov	r0, #149	; 0x95
   127bc:	eb000b30 	bl	15484 <MS_set_main_on_off>
   127c0:	e51f339c 	ldr	r3, [pc, #-924]	; 1242c <main+0x1204>
   127c4:	e5d33005 	ldrb	r3, [r3, #5]
   127c8:	e58d301c 	str	r3, [sp, #28]
   127cc:	eafffc2e 	b	1188c <main+0x664>
   127d0:	e51f03d4 	ldr	r0, [pc, #-980]	; 12404 <main+0x11dc>
   127d4:	e28d108d 	add	r1, sp, #141	; 0x8d
   127d8:	e5853000 	str	r3, [r5]
   127dc:	eb000d14 	bl	15c34 <MS_run_event>
   127e0:	e5953000 	ldr	r3, [r5]
   127e4:	eafffdd6 	b	11f44 <main+0xd1c>
   127e8:	e51fc3fc 	ldr	ip, [pc, #-1020]	; 123f4 <main+0x11cc>
   127ec:	e3a03000 	mov	r3, #0
   127f0:	e28d00bc 	add	r0, sp, #188	; 0xbc
   127f4:	e51f145c 	ldr	r1, [pc, #-1116]	; 123a0 <main+0x1178>
   127f8:	e51f245c 	ldr	r2, [pc, #-1116]	; 123a4 <main+0x117c>
   127fc:	e5cc3008 	strb	r3, [ip, #8]
   12800:	e5cc3009 	strb	r3, [ip, #9]
   12804:	e5cc300a 	strb	r3, [ip, #10]
   12808:	ebfffa59 	bl	11174 <sprintf@plt>
   1280c:	e59b3028 	ldr	r3, [fp, #40]	; 0x28
   12810:	e51f5470 	ldr	r5, [pc, #-1136]	; 123a8 <main+0x1180>
   12814:	e3530000 	cmp	r3, #0
   12818:	1a0000c3 	bne	12b2c <main+0x1904>
   1281c:	e5953020 	ldr	r3, [r5, #32]
   12820:	e3530000 	cmp	r3, #0
   12824:	0a000039 	beq	12910 <main+0x16e8>
   12828:	e51f3450 	ldr	r3, [pc, #-1104]	; 123e0 <main+0x11b8>
   1282c:	e51f1450 	ldr	r1, [pc, #-1104]	; 123e4 <main+0x11bc>
   12830:	e5932000 	ldr	r2, [r3]
   12834:	e51f3454 	ldr	r3, [pc, #-1108]	; 123e8 <main+0x11c0>
   12838:	e5911000 	ldr	r1, [r1]
   1283c:	e593c000 	ldr	ip, [r3]
   12840:	e51f345c 	ldr	r3, [pc, #-1116]	; 123ec <main+0x11c4>
   12844:	e06cc002 	rsb	ip, ip, r2
   12848:	e51f2460 	ldr	r2, [pc, #-1120]	; 123f0 <main+0x11c8>
   1284c:	e5933000 	ldr	r3, [r3]
   12850:	e5925000 	ldr	r5, [r2]
   12854:	e2833002 	add	r3, r3, #2
   12858:	e15c0003 	cmp	ip, r3
   1285c:	d3a0c000 	movle	ip, #0
   12860:	c3a0c001 	movgt	ip, #1
   12864:	e1510005 	cmp	r1, r5
   12868:	a3a05000 	movge	r5, #0
   1286c:	b3a05001 	movlt	r5, #1
   12870:	e51f3484 	ldr	r3, [pc, #-1156]	; 123f4 <main+0x11cc>
   12874:	e18c2005 	orr	r2, ip, r5
   12878:	e51f148c 	ldr	r1, [pc, #-1164]	; 123f4 <main+0x11cc>
   1287c:	e5d33009 	ldrb	r3, [r3, #9]
   12880:	e6ef2072 	uxtb	r2, r2
   12884:	e1530002 	cmp	r3, r2
   12888:	11a03002 	movne	r3, r2
   1288c:	15c12009 	strbne	r2, [r1, #9]
   12890:	e3530000 	cmp	r3, #0
   12894:	0a000009 	beq	128c0 <main+0x1698>
   12898:	e51f34f4 	ldr	r3, [pc, #-1268]	; 123ac <main+0x1184>
   1289c:	e28d20c7 	add	r2, sp, #199	; 0xc7
   128a0:	e5f31001 	ldrb	r1, [r3, #1]!
   128a4:	e2822001 	add	r2, r2, #1
   128a8:	e20100df 	and	r0, r1, #223	; 0xdf
   128ac:	e3500058 	cmp	r0, #88	; 0x58
   128b0:	15421001 	strbne	r1, [r2, #-1]
   128b4:	e51f150c 	ldr	r1, [pc, #-1292]	; 123b0 <main+0x1188>
   128b8:	e1530001 	cmp	r3, r1
   128bc:	1afffff7 	bne	128a0 <main+0x1678>
   128c0:	e51f3508 	ldr	r3, [pc, #-1288]	; 123c0 <main+0x1198>
   128c4:	e51f24d8 	ldr	r2, [pc, #-1240]	; 123f4 <main+0x11cc>
   128c8:	e5d33000 	ldrb	r3, [r3]
   128cc:	e5d2100a 	ldrb	r1, [r2, #10]
   128d0:	e2033002 	and	r3, r3, #2
   128d4:	e6ef3073 	uxtb	r3, r3
   128d8:	e1510003 	cmp	r1, r3
   128dc:	15c2300a 	strbne	r3, [r2, #10]
   128e0:	e3530000 	cmp	r3, #0
   128e4:	0a000009 	beq	12910 <main+0x16e8>
   128e8:	e51f353c 	ldr	r3, [pc, #-1340]	; 123b4 <main+0x118c>
   128ec:	e28d20c7 	add	r2, sp, #199	; 0xc7
   128f0:	e5f31001 	ldrb	r1, [r3, #1]!
   128f4:	e2822001 	add	r2, r2, #1
   128f8:	e20100df 	and	r0, r1, #223	; 0xdf
   128fc:	e3500058 	cmp	r0, #88	; 0x58
   12900:	15421001 	strbne	r1, [r2, #-1]
   12904:	e51f1554 	ldr	r1, [pc, #-1364]	; 123b8 <main+0x1190>
   12908:	e1530001 	cmp	r3, r1
   1290c:	1afffff7 	bne	128f0 <main+0x16c8>
   12910:	e28d00bc 	add	r0, sp, #188	; 0xbc
   12914:	eb000833 	bl	149e8 <land_cmd>
   12918:	e59a3000 	ldr	r3, [sl]
   1291c:	e51f24cc 	ldr	r2, [pc, #-1228]	; 12458 <main+0x1230>
   12920:	e3530002 	cmp	r3, #2
   12924:	0affff6d 	beq	126e0 <main+0x14b8>
   12928:	e51f3554 	ldr	r3, [pc, #-1364]	; 123dc <main+0x11b4>
   1292c:	e5933000 	ldr	r3, [r3]
   12930:	e353000d 	cmp	r3, #13
   12934:	c3a02001 	movgt	r2, #1
   12938:	c58d2030 	strgt	r2, [sp, #48]	; 0x30
   1293c:	daffff78 	ble	12724 <main+0x14fc>
   12940:	e353000a 	cmp	r3, #10
   12944:	1afffc37 	bne	11a28 <main+0x800>
   12948:	eafffdb3 	b	1201c <main+0xdf4>
   1294c:	e3a05002 	mov	r5, #2
   12950:	e3a02028 	mov	r2, #40	; 0x28
   12954:	e51f0500 	ldr	r0, [pc, #-1280]	; 1245c <main+0x1234>
   12958:	e51f15a4 	ldr	r1, [pc, #-1444]	; 123bc <main+0x1194>
   1295c:	e58c5000 	str	r5, [ip]
   12960:	ebfff9e2 	bl	110f0 <strncpy@plt>
   12964:	e51f35ac 	ldr	r3, [pc, #-1452]	; 123c0 <main+0x1198>
   12968:	e51f250c 	ldr	r2, [pc, #-1292]	; 12464 <main+0x123c>
   1296c:	e5d33000 	ldrb	r3, [r3]
   12970:	e5c25018 	strb	r5, [r2, #24]
   12974:	e3130002 	tst	r3, #2
   12978:	0a00003e 	beq	12a78 <main+0x1850>
   1297c:	e51f05c0 	ldr	r0, [pc, #-1472]	; 123c4 <main+0x119c>
   12980:	e2821019 	add	r1, r2, #25
   12984:	eb000caa 	bl	15c34 <MS_run_event>
   12988:	e51f35b4 	ldr	r3, [pc, #-1460]	; 123dc <main+0x11b4>
   1298c:	e5933000 	ldr	r3, [r3]
   12990:	e353000a 	cmp	r3, #10
   12994:	1afffc23 	bne	11a28 <main+0x800>
   12998:	eafffd9f 	b	1201c <main+0xdf4>
   1299c:	e51f3540 	ldr	r3, [pc, #-1344]	; 12464 <main+0x123c>
   129a0:	e3a01002 	mov	r1, #2
   129a4:	e5821000 	str	r1, [r2]
   129a8:	e5d33018 	ldrb	r3, [r3, #24]
   129ac:	e1530001 	cmp	r3, r1
   129b0:	1afffc1c 	bne	11a28 <main+0x800>
   129b4:	e51f35fc 	ldr	r3, [pc, #-1532]	; 123c0 <main+0x1198>
   129b8:	e51f1564 	ldr	r1, [pc, #-1380]	; 1245c <main+0x1234>
   129bc:	e5d33000 	ldrb	r3, [r3]
   129c0:	e3130002 	tst	r3, #2
   129c4:	151f0608 	ldrne	r0, [pc, #-1544]	; 123c4 <main+0x119c>
   129c8:	051f0604 	ldreq	r0, [pc, #-1540]	; 123cc <main+0x11a4>
   129cc:	eb000c98 	bl	15c34 <MS_run_event>
   129d0:	eafffc14 	b	11a28 <main+0x800>
   129d4:	e28d0074 	add	r0, sp, #116	; 0x74
   129d8:	e51f157c 	ldr	r1, [pc, #-1404]	; 12464 <main+0x123c>
   129dc:	e3a02017 	mov	r2, #23
   129e0:	ebfff956 	bl	10f40 <memcmp@plt>
   129e4:	e3500000 	cmp	r0, #0
   129e8:	1affff13 	bne	1263c <main+0x1414>
   129ec:	e3e03000 	mvn	r3, #0
   129f0:	e58d3020 	str	r3, [sp, #32]
   129f4:	e3a03002 	mov	r3, #2
   129f8:	e5850000 	str	r0, [r5]
   129fc:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12a00:	eafffb5a 	b	11770 <main+0x548>
   12a04:	e51f0644 	ldr	r0, [pc, #-1604]	; 123c8 <main+0x11a0>
   12a08:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12a0c:	e3a02008 	mov	r2, #8
   12a10:	ebfff9aa 	bl	110c0 <strncasecmp@plt>
   12a14:	e3500000 	cmp	r0, #0
   12a18:	1a00001e 	bne	12a98 <main+0x1870>
   12a1c:	e3a02002 	mov	r2, #2
   12a20:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12a24:	e51f0608 	ldr	r0, [pc, #-1544]	; 12424 <main+0x11fc>
   12a28:	ebfff9a4 	bl	110c0 <strncasecmp@plt>
   12a2c:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12a30:	e3500000 	cmp	r0, #0
   12a34:	03a03001 	moveq	r3, #1
   12a38:	051f2614 	ldreq	r2, [pc, #-1556]	; 1242c <main+0x1204>
   12a3c:	e51f061c 	ldr	r0, [pc, #-1564]	; 12428 <main+0x1200>
   12a40:	05c23006 	strbeq	r3, [r2, #6]
   12a44:	e3a02003 	mov	r2, #3
   12a48:	ebfff99c 	bl	110c0 <strncasecmp@plt>
   12a4c:	e3500000 	cmp	r0, #0
   12a50:	01a01000 	moveq	r1, r0
   12a54:	151f3630 	ldrne	r3, [pc, #-1584]	; 1242c <main+0x1204>
   12a58:	051f3634 	ldreq	r3, [pc, #-1588]	; 1242c <main+0x1204>
   12a5c:	15d31006 	ldrbne	r1, [r3, #6]
   12a60:	05c30006 	strbeq	r0, [r3, #6]
   12a64:	e3a00096 	mov	r0, #150	; 0x96
   12a68:	eb000a85 	bl	15484 <MS_set_main_on_off>
   12a6c:	eb000d7c 	bl	16064 <MS_write_on_off>
   12a70:	e58d001c 	str	r0, [sp, #28]
   12a74:	eafffb87 	b	11898 <main+0x670>
   12a78:	e51f06b4 	ldr	r0, [pc, #-1716]	; 123cc <main+0x11a4>
   12a7c:	e51f1628 	ldr	r1, [pc, #-1576]	; 1245c <main+0x1234>
   12a80:	eb000c6b 	bl	15c34 <MS_run_event>
   12a84:	e51f36b0 	ldr	r3, [pc, #-1712]	; 123dc <main+0x11b4>
   12a88:	e5933000 	ldr	r3, [r3]
   12a8c:	e353000a 	cmp	r3, #10
   12a90:	1afffbe4 	bne	11a28 <main+0x800>
   12a94:	eafffd60 	b	1201c <main+0xdf4>
   12a98:	e51f06d0 	ldr	r0, [pc, #-1744]	; 123d0 <main+0x11a8>
   12a9c:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12aa0:	e3a02008 	mov	r2, #8
   12aa4:	ebfff985 	bl	110c0 <strncasecmp@plt>
   12aa8:	e3500000 	cmp	r0, #0
   12aac:	1a00005c 	bne	12c24 <main+0x19fc>
   12ab0:	e3a02002 	mov	r2, #2
   12ab4:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12ab8:	e51f069c 	ldr	r0, [pc, #-1692]	; 12424 <main+0x11fc>
   12abc:	ebfff97f 	bl	110c0 <strncasecmp@plt>
   12ac0:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12ac4:	e3500000 	cmp	r0, #0
   12ac8:	03a03001 	moveq	r3, #1
   12acc:	051f26a8 	ldreq	r2, [pc, #-1704]	; 1242c <main+0x1204>
   12ad0:	e51f06b0 	ldr	r0, [pc, #-1712]	; 12428 <main+0x1200>
   12ad4:	05c23007 	strbeq	r3, [r2, #7]
   12ad8:	e3a02003 	mov	r2, #3
   12adc:	ebfff977 	bl	110c0 <strncasecmp@plt>
   12ae0:	e3500000 	cmp	r0, #0
   12ae4:	01a01000 	moveq	r1, r0
   12ae8:	151f36c4 	ldrne	r3, [pc, #-1732]	; 1242c <main+0x1204>
   12aec:	051f36c8 	ldreq	r3, [pc, #-1736]	; 1242c <main+0x1204>
   12af0:	15d31007 	ldrbne	r1, [r3, #7]
   12af4:	05c30007 	strbeq	r0, [r3, #7]
   12af8:	e3a00097 	mov	r0, #151	; 0x97
   12afc:	eb000a60 	bl	15484 <MS_set_main_on_off>
   12b00:	eb000d57 	bl	16064 <MS_write_on_off>
   12b04:	e58d001c 	str	r0, [sp, #28]
   12b08:	eafffb62 	b	11898 <main+0x670>
   12b0c:	e51f0740 	ldr	r0, [pc, #-1856]	; 123d4 <main+0x11ac>
   12b10:	e51f1740 	ldr	r1, [pc, #-1856]	; 123d8 <main+0x11b0>
   12b14:	eb000c46 	bl	15c34 <MS_run_event>
   12b18:	e51f3744 	ldr	r3, [pc, #-1860]	; 123dc <main+0x11b4>
   12b1c:	e5933000 	ldr	r3, [r3]
   12b20:	e353000a 	cmp	r3, #10
   12b24:	1afffbbf 	bne	11a28 <main+0x800>
   12b28:	eafffd3b 	b	1201c <main+0xdf4>
   12b2c:	eb000fe2 	bl	16abc <PWR_get_wc_lamp>
   12b30:	e595e020 	ldr	lr, [r5, #32]
   12b34:	e5952028 	ldr	r2, [r5, #40]	; 0x28
   12b38:	e35e0000 	cmp	lr, #0
   12b3c:	0a000026 	beq	12bdc <main+0x19b4>
   12b40:	e51f3768 	ldr	r3, [pc, #-1896]	; 123e0 <main+0x11b8>
   12b44:	e51f5768 	ldr	r5, [pc, #-1896]	; 123e4 <main+0x11bc>
   12b48:	e593c000 	ldr	ip, [r3]
   12b4c:	e51f376c 	ldr	r3, [pc, #-1900]	; 123e8 <main+0x11c0>
   12b50:	e5955000 	ldr	r5, [r5]
   12b54:	e5931000 	ldr	r1, [r3]
   12b58:	e51f3774 	ldr	r3, [pc, #-1908]	; 123ec <main+0x11c4>
   12b5c:	e061100c 	rsb	r1, r1, ip
   12b60:	e51fc778 	ldr	ip, [pc, #-1912]	; 123f0 <main+0x11c8>
   12b64:	e5933000 	ldr	r3, [r3]
   12b68:	e59c6000 	ldr	r6, [ip]
   12b6c:	e2833002 	add	r3, r3, #2
   12b70:	e1510003 	cmp	r1, r3
   12b74:	d3a0c000 	movle	ip, #0
   12b78:	c3a0c001 	movgt	ip, #1
   12b7c:	e1550006 	cmp	r5, r6
   12b80:	a3a05000 	movge	r5, #0
   12b84:	b3a05001 	movlt	r5, #1
   12b88:	e3520000 	cmp	r2, #0
   12b8c:	0affff37 	beq	12870 <main+0x1648>
   12b90:	e51f37a4 	ldr	r3, [pc, #-1956]	; 123f4 <main+0x11cc>
   12b94:	e5d32008 	ldrb	r2, [r3, #8]
   12b98:	e1520000 	cmp	r2, r0
   12b9c:	15c30008 	strbne	r0, [r3, #8]
   12ba0:	e3500000 	cmp	r0, #0
   12ba4:	0a000009 	beq	12bd0 <main+0x19a8>
   12ba8:	e51f37b8 	ldr	r3, [pc, #-1976]	; 123f8 <main+0x11d0>
   12bac:	e28d20c7 	add	r2, sp, #199	; 0xc7
   12bb0:	e5f31001 	ldrb	r1, [r3, #1]!
   12bb4:	e2822001 	add	r2, r2, #1
   12bb8:	e20100df 	and	r0, r1, #223	; 0xdf
   12bbc:	e3500058 	cmp	r0, #88	; 0x58
   12bc0:	15421001 	strbne	r1, [r2, #-1]
   12bc4:	e51f17d0 	ldr	r1, [pc, #-2000]	; 123fc <main+0x11d4>
   12bc8:	e1530001 	cmp	r3, r1
   12bcc:	1afffff7 	bne	12bb0 <main+0x1988>
   12bd0:	e35e0000 	cmp	lr, #0
   12bd4:	1affff25 	bne	12870 <main+0x1648>
   12bd8:	eaffff4c 	b	12910 <main+0x16e8>
   12bdc:	e3520000 	cmp	r2, #0
   12be0:	0affff4a 	beq	12910 <main+0x16e8>
   12be4:	e1a0500e 	mov	r5, lr
   12be8:	e1a0c00e 	mov	ip, lr
   12bec:	eaffffe7 	b	12b90 <main+0x1968>
   12bf0:	e51f07f4 	ldr	r0, [pc, #-2036]	; 12404 <main+0x11dc>
   12bf4:	e28d108d 	add	r1, sp, #141	; 0x8d
   12bf8:	e5823000 	str	r3, [r2]
   12bfc:	eb000c0c 	bl	15c34 <MS_run_event>
   12c00:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   12c04:	e3530000 	cmp	r3, #0
   12c08:	1afffebf 	bne	1270c <main+0x14e4>
   12c0c:	e5953000 	ldr	r3, [r5]
   12c10:	e353000d 	cmp	r3, #13
   12c14:	dafffb77 	ble	119f8 <main+0x7d0>
   12c18:	e353000a 	cmp	r3, #10
   12c1c:	1afffb81 	bne	11a28 <main+0x800>
   12c20:	eafffcfd 	b	1201c <main+0xdf4>
   12c24:	e51f082c 	ldr	r0, [pc, #-2092]	; 12400 <main+0x11d8>
   12c28:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12c2c:	e3a02008 	mov	r2, #8
   12c30:	ebfff922 	bl	110c0 <strncasecmp@plt>
   12c34:	e3500000 	cmp	r0, #0
   12c38:	1a000021 	bne	12cc4 <main+0x1a9c>
   12c3c:	e3a02002 	mov	r2, #2
   12c40:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12c44:	e51f0828 	ldr	r0, [pc, #-2088]	; 12424 <main+0x11fc>
   12c48:	ebfff91c 	bl	110c0 <strncasecmp@plt>
   12c4c:	e28d10c4 	add	r1, sp, #196	; 0xc4
   12c50:	e3500000 	cmp	r0, #0
   12c54:	03a03001 	moveq	r3, #1
   12c58:	051f2834 	ldreq	r2, [pc, #-2100]	; 1242c <main+0x1204>
   12c5c:	e51f083c 	ldr	r0, [pc, #-2108]	; 12428 <main+0x1200>
   12c60:	05c23008 	strbeq	r3, [r2, #8]
   12c64:	e3a02003 	mov	r2, #3
   12c68:	ebfff914 	bl	110c0 <strncasecmp@plt>
   12c6c:	e3500000 	cmp	r0, #0
   12c70:	01a01000 	moveq	r1, r0
   12c74:	151f3850 	ldrne	r3, [pc, #-2128]	; 1242c <main+0x1204>
   12c78:	051f3854 	ldreq	r3, [pc, #-2132]	; 1242c <main+0x1204>
   12c7c:	15d31008 	ldrbne	r1, [r3, #8]
   12c80:	05c30008 	strbeq	r0, [r3, #8]
   12c84:	e3a00098 	mov	r0, #152	; 0x98
   12c88:	eb0009fd 	bl	15484 <MS_set_main_on_off>
   12c8c:	eb000cf4 	bl	16064 <MS_write_on_off>
   12c90:	e58d001c 	str	r0, [sp, #28]
   12c94:	eafffaff 	b	11898 <main+0x670>
   12c98:	e3a00001 	mov	r0, #1
   12c9c:	eb0008c7 	bl	14fc0 <create_landing_color.constprop.5>
   12ca0:	e3e03000 	mvn	r3, #0
   12ca4:	e58d3020 	str	r3, [sp, #32]
   12ca8:	e3a03002 	mov	r3, #2
   12cac:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12cb0:	eafffaae 	b	11770 <main+0x548>
   12cb4:	e28d108d 	add	r1, sp, #141	; 0x8d
   12cb8:	e51f08bc 	ldr	r0, [pc, #-2236]	; 12404 <main+0x11dc>
   12cbc:	eb000bdc 	bl	15c34 <MS_run_event>
   12cc0:	eafffe55 	b	1261c <main+0x13f4>
   12cc4:	e51f08c4 	ldr	r0, [pc, #-2244]	; 12408 <main+0x11e0>
   12cc8:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12ccc:	e3a0200c 	mov	r2, #12
   12cd0:	ebfff8fa 	bl	110c0 <strncasecmp@plt>
   12cd4:	e3500000 	cmp	r0, #0
   12cd8:	1a000019 	bne	12d44 <main+0x1b1c>
   12cdc:	e3a02002 	mov	r2, #2
   12ce0:	e28d10c8 	add	r1, sp, #200	; 0xc8
   12ce4:	e51f08c8 	ldr	r0, [pc, #-2248]	; 12424 <main+0x11fc>
   12ce8:	ebfff8f4 	bl	110c0 <strncasecmp@plt>
   12cec:	e28d10c8 	add	r1, sp, #200	; 0xc8
   12cf0:	e3500000 	cmp	r0, #0
   12cf4:	03a03001 	moveq	r3, #1
   12cf8:	051f28d4 	ldreq	r2, [pc, #-2260]	; 1242c <main+0x1204>
   12cfc:	e51f08dc 	ldr	r0, [pc, #-2268]	; 12428 <main+0x1200>
   12d00:	05c23009 	strbeq	r3, [r2, #9]
   12d04:	e3a02003 	mov	r2, #3
   12d08:	ebfff8ec 	bl	110c0 <strncasecmp@plt>
   12d0c:	e3500000 	cmp	r0, #0
   12d10:	01a01000 	moveq	r1, r0
   12d14:	151f38f0 	ldrne	r3, [pc, #-2288]	; 1242c <main+0x1204>
   12d18:	051f38f4 	ldreq	r3, [pc, #-2292]	; 1242c <main+0x1204>
   12d1c:	15d31009 	ldrbne	r1, [r3, #9]
   12d20:	05c30009 	strbeq	r0, [r3, #9]
   12d24:	e3a00099 	mov	r0, #153	; 0x99
   12d28:	eb0009d5 	bl	15484 <MS_set_main_on_off>
   12d2c:	eb000ccc 	bl	16064 <MS_write_on_off>
   12d30:	e58d001c 	str	r0, [sp, #28]
   12d34:	eafffad7 	b	11898 <main+0x670>
   12d38:	e3a00001 	mov	r0, #1
   12d3c:	e28ddf49 	add	sp, sp, #292	; 0x124
   12d40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d44:	e51f0940 	ldr	r0, [pc, #-2368]	; 1240c <main+0x11e4>
   12d48:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12d4c:	e3a02007 	mov	r2, #7
   12d50:	ebfff8da 	bl	110c0 <strncasecmp@plt>
   12d54:	e3500000 	cmp	r0, #0
   12d58:	1a00002a 	bne	12e08 <main+0x1be0>
   12d5c:	e3a02002 	mov	r2, #2
   12d60:	e28d10c3 	add	r1, sp, #195	; 0xc3
   12d64:	e51f0948 	ldr	r0, [pc, #-2376]	; 12424 <main+0x11fc>
   12d68:	ebfff8d4 	bl	110c0 <strncasecmp@plt>
   12d6c:	e28d10c3 	add	r1, sp, #195	; 0xc3
   12d70:	e3500000 	cmp	r0, #0
   12d74:	03a03001 	moveq	r3, #1
   12d78:	051f2954 	ldreq	r2, [pc, #-2388]	; 1242c <main+0x1204>
   12d7c:	e51f095c 	ldr	r0, [pc, #-2396]	; 12428 <main+0x1200>
   12d80:	05c2300a 	strbeq	r3, [r2, #10]
   12d84:	e3a02003 	mov	r2, #3
   12d88:	ebfff8cc 	bl	110c0 <strncasecmp@plt>
   12d8c:	e3500000 	cmp	r0, #0
   12d90:	01a01000 	moveq	r1, r0
   12d94:	151f3970 	ldrne	r3, [pc, #-2416]	; 1242c <main+0x1204>
   12d98:	051f3974 	ldreq	r3, [pc, #-2420]	; 1242c <main+0x1204>
   12d9c:	15d3100a 	ldrbne	r1, [r3, #10]
   12da0:	05c3000a 	strbeq	r0, [r3, #10]
   12da4:	e3a0009a 	mov	r0, #154	; 0x9a
   12da8:	eb0009b5 	bl	15484 <MS_set_main_on_off>
   12dac:	eb000cac 	bl	16064 <MS_write_on_off>
   12db0:	e58d001c 	str	r0, [sp, #28]
   12db4:	eafffab7 	b	11898 <main+0x670>
   12db8:	ebfff8bd 	bl	110b4 <__errno_location@plt>
   12dbc:	e5900000 	ldr	r0, [r0]
   12dc0:	ebfff88b 	bl	10ff4 <strerror@plt>
   12dc4:	e51f19bc 	ldr	r1, [pc, #-2492]	; 12410 <main+0x11e8>
   12dc8:	e1a02000 	mov	r2, r0
   12dcc:	e3a0001b 	mov	r0, #27
   12dd0:	ebfff8e4 	bl	11168 <syslog@plt>
   12dd4:	e3a00001 	mov	r0, #1
   12dd8:	eaffffd7 	b	12d3c <main+0x1b14>
   12ddc:	e51f09d0 	ldr	r0, [pc, #-2512]	; 12414 <main+0x11ec>
   12de0:	eb0005ff 	bl	145e4 <usage>
   12de4:	e3a00000 	mov	r0, #0
   12de8:	eaffffd3 	b	12d3c <main+0x1b14>
   12dec:	e51f09dc 	ldr	r0, [pc, #-2524]	; 12418 <main+0x11f0>
   12df0:	e51f19dc 	ldr	r1, [pc, #-2524]	; 1241c <main+0x11f4>
   12df4:	ebfff833 	bl	10ec8 <printf@plt>
   12df8:	e3a00000 	mov	r0, #0
   12dfc:	eaffffce 	b	12d3c <main+0x1b14>
   12e00:	e3a00001 	mov	r0, #1
   12e04:	ebfff88c 	bl	1103c <exit@plt>
   12e08:	e51f09f0 	ldr	r0, [pc, #-2544]	; 12420 <main+0x11f8>
   12e0c:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12e10:	e3a0200a 	mov	r2, #10
   12e14:	ebfff8a9 	bl	110c0 <strncasecmp@plt>
   12e18:	e3500000 	cmp	r0, #0
   12e1c:	1a000016 	bne	12e7c <main+0x1c54>
   12e20:	e28d10c6 	add	r1, sp, #198	; 0xc6
   12e24:	e3a02002 	mov	r2, #2
   12e28:	e51f0a0c 	ldr	r0, [pc, #-2572]	; 12424 <main+0x11fc>
   12e2c:	ebfff8a3 	bl	110c0 <strncasecmp@plt>
   12e30:	e28d10c6 	add	r1, sp, #198	; 0xc6
   12e34:	e3a02003 	mov	r2, #3
   12e38:	e3500000 	cmp	r0, #0
   12e3c:	051f3a18 	ldreq	r3, [pc, #-2584]	; 1242c <main+0x1204>
   12e40:	05c3000b 	strbeq	r0, [r3, #11]
   12e44:	e51f0a24 	ldr	r0, [pc, #-2596]	; 12428 <main+0x1200>
   12e48:	ebfff89c 	bl	110c0 <strncasecmp@plt>
   12e4c:	e3500000 	cmp	r0, #0
   12e50:	03a03001 	moveq	r3, #1
   12e54:	151f3a30 	ldrne	r3, [pc, #-2608]	; 1242c <main+0x1204>
   12e58:	051f2a34 	ldreq	r2, [pc, #-2612]	; 1242c <main+0x1204>
   12e5c:	01a01003 	moveq	r1, r3
   12e60:	15d3100b 	ldrbne	r1, [r3, #11]
   12e64:	e3a0009b 	mov	r0, #155	; 0x9b
   12e68:	05c2300b 	strbeq	r3, [r2, #11]
   12e6c:	eb000984 	bl	15484 <MS_set_main_on_off>
   12e70:	eb000c7b 	bl	16064 <MS_write_on_off>
   12e74:	e58d001c 	str	r0, [sp, #28]
   12e78:	eafffa86 	b	11898 <main+0x670>
   12e7c:	e51f0a54 	ldr	r0, [pc, #-2644]	; 12430 <main+0x1208>
   12e80:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12e84:	e3a02009 	mov	r2, #9
   12e88:	ebfff88c 	bl	110c0 <strncasecmp@plt>
   12e8c:	e2505000 	subs	r5, r0, #0
   12e90:	0a000040 	beq	12f98 <main+0x1d70>
   12e94:	e51f0a68 	ldr	r0, [pc, #-2664]	; 12434 <main+0x120c>
   12e98:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12e9c:	e3a0200c 	mov	r2, #12
   12ea0:	ebfff886 	bl	110c0 <strncasecmp@plt>
   12ea4:	e3500000 	cmp	r0, #0
   12ea8:	0a000069 	beq	13054 <main+0x1e2c>
   12eac:	e51f0a7c 	ldr	r0, [pc, #-2684]	; 12438 <main+0x1210>
   12eb0:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12eb4:	e3a0200b 	mov	r2, #11
   12eb8:	ebfff880 	bl	110c0 <strncasecmp@plt>
   12ebc:	e3500000 	cmp	r0, #0
   12ec0:	0a00005e 	beq	13040 <main+0x1e18>
   12ec4:	e51f0a90 	ldr	r0, [pc, #-2704]	; 1243c <main+0x1214>
   12ec8:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12ecc:	e3a0200b 	mov	r2, #11
   12ed0:	ebfff87a 	bl	110c0 <strncasecmp@plt>
   12ed4:	e3500000 	cmp	r0, #0
   12ed8:	0a000053 	beq	1302c <main+0x1e04>
   12edc:	e51f0aa4 	ldr	r0, [pc, #-2724]	; 12440 <main+0x1218>
   12ee0:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12ee4:	e3a0200c 	mov	r2, #12
   12ee8:	ebfff874 	bl	110c0 <strncasecmp@plt>
   12eec:	e3500000 	cmp	r0, #0
   12ef0:	0a000048 	beq	13018 <main+0x1df0>
   12ef4:	e51f0ab8 	ldr	r0, [pc, #-2744]	; 12444 <main+0x121c>
   12ef8:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12efc:	e3a0200b 	mov	r2, #11
   12f00:	ebfff86e 	bl	110c0 <strncasecmp@plt>
   12f04:	e3500000 	cmp	r0, #0
   12f08:	0a00003d 	beq	13004 <main+0x1ddc>
   12f0c:	e51f0acc 	ldr	r0, [pc, #-2764]	; 12448 <main+0x1220>
   12f10:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12f14:	e3a02008 	mov	r2, #8
   12f18:	ebfff868 	bl	110c0 <strncasecmp@plt>
   12f1c:	e3500000 	cmp	r0, #0
   12f20:	0a000032 	beq	12ff0 <main+0x1dc8>
   12f24:	e51f0ae0 	ldr	r0, [pc, #-2784]	; 1244c <main+0x1224>
   12f28:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12f2c:	e3a0200b 	mov	r2, #11
   12f30:	ebfff862 	bl	110c0 <strncasecmp@plt>
   12f34:	e3500000 	cmp	r0, #0
   12f38:	0a000027 	beq	12fdc <main+0x1db4>
   12f3c:	e51f0af4 	ldr	r0, [pc, #-2804]	; 12450 <main+0x1228>
   12f40:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12f44:	e3a0200b 	mov	r2, #11
   12f48:	ebfff85c 	bl	110c0 <strncasecmp@plt>
   12f4c:	e3500000 	cmp	r0, #0
   12f50:	0a00001d 	beq	12fcc <main+0x1da4>
   12f54:	e51f0b08 	ldr	r0, [pc, #-2824]	; 12454 <main+0x122c>
   12f58:	e28d10bc 	add	r1, sp, #188	; 0xbc
   12f5c:	e3a0200c 	mov	r2, #12
   12f60:	ebfff856 	bl	110c0 <strncasecmp@plt>
   12f64:	e3500000 	cmp	r0, #0
   12f68:	1afffc17 	bne	11fcc <main+0xda4>
   12f6c:	e59a3000 	ldr	r3, [sl]
   12f70:	e51f5b20 	ldr	r5, [pc, #-2848]	; 12458 <main+0x1230>
   12f74:	e3530000 	cmp	r3, #0
   12f78:	1afffae2 	bne	11b08 <main+0x8e0>
   12f7c:	e28d00c8 	add	r0, sp, #200	; 0xc8
   12f80:	eb000fa9 	bl	16e2c <RFID_write_token>
   12f84:	e3a03004 	mov	r3, #4
   12f88:	e5853000 	str	r3, [r5]
   12f8c:	eb000c34 	bl	16064 <MS_write_on_off>
   12f90:	e58d001c 	str	r0, [sp, #28]
   12f94:	eafffa3f 	b	11898 <main+0x670>
   12f98:	e3a02005 	mov	r2, #5
   12f9c:	e3a03078 	mov	r3, #120	; 0x78
   12fa0:	e58a2000 	str	r2, [sl]
   12fa4:	e51f0b50 	ldr	r0, [pc, #-2896]	; 1245c <main+0x1234>
   12fa8:	e3a02028 	mov	r2, #40	; 0x28
   12fac:	e51f1b54 	ldr	r1, [pc, #-2900]	; 12460 <main+0x1238>
   12fb0:	e5843004 	str	r3, [r4, #4]
   12fb4:	ebfff84d 	bl	110f0 <strncpy@plt>
   12fb8:	e51f2b5c 	ldr	r2, [pc, #-2908]	; 12464 <main+0x123c>
   12fbc:	e3a03002 	mov	r3, #2
   12fc0:	e58d501c 	str	r5, [sp, #28]
   12fc4:	e5c23018 	strb	r3, [r2, #24]
   12fc8:	eafffa32 	b	11898 <main+0x670>
   12fcc:	eb001067 	bl	17170 <TOKEN_load>
   12fd0:	eb000c23 	bl	16064 <MS_write_on_off>
   12fd4:	e58d001c 	str	r0, [sp, #28]
   12fd8:	eafffa2e 	b	11898 <main+0x670>
   12fdc:	e3a000af 	mov	r0, #175	; 0xaf
   12fe0:	eb000e6d 	bl	1699c <PWR_power_off_abb>
   12fe4:	eb000c1e 	bl	16064 <MS_write_on_off>
   12fe8:	e58d001c 	str	r0, [sp, #28]
   12fec:	eafffa29 	b	11898 <main+0x670>
   12ff0:	e3a000a4 	mov	r0, #164	; 0xa4
   12ff4:	eb000e68 	bl	1699c <PWR_power_off_abb>
   12ff8:	eb000c19 	bl	16064 <MS_write_on_off>
   12ffc:	e58d001c 	str	r0, [sp, #28]
   13000:	eafffa24 	b	11898 <main+0x670>
   13004:	e3a000a3 	mov	r0, #163	; 0xa3
   13008:	eb000e63 	bl	1699c <PWR_power_off_abb>
   1300c:	eb000c14 	bl	16064 <MS_write_on_off>
   13010:	e58d001c 	str	r0, [sp, #28]
   13014:	eafffa1f 	b	11898 <main+0x670>
   13018:	e3a000a2 	mov	r0, #162	; 0xa2
   1301c:	eb000e5e 	bl	1699c <PWR_power_off_abb>
   13020:	eb000c0f 	bl	16064 <MS_write_on_off>
   13024:	e58d001c 	str	r0, [sp, #28]
   13028:	eafffa1a 	b	11898 <main+0x670>
   1302c:	e3a000a1 	mov	r0, #161	; 0xa1
   13030:	eb000e59 	bl	1699c <PWR_power_off_abb>
   13034:	eb000c0a 	bl	16064 <MS_write_on_off>
   13038:	e58d001c 	str	r0, [sp, #28]
   1303c:	eafffa15 	b	11898 <main+0x670>
   13040:	e3a000a0 	mov	r0, #160	; 0xa0
   13044:	eb000e54 	bl	1699c <PWR_power_off_abb>
   13048:	eb000c05 	bl	16064 <MS_write_on_off>
   1304c:	e58d001c 	str	r0, [sp, #28]
   13050:	eafffa10 	b	11898 <main+0x670>
   13054:	e3a0500d 	mov	r5, #13
   13058:	e28d00bd 	add	r0, sp, #189	; 0xbd
   1305c:	e28d10c7 	add	r1, sp, #199	; 0xc7
   13060:	e3a02058 	mov	r2, #88	; 0x58
   13064:	e5cd50bc 	strb	r5, [sp, #188]	; 0xbc
   13068:	ebfff820 	bl	110f0 <strncpy@plt>
   1306c:	e28d00bc 	add	r0, sp, #188	; 0xbc
   13070:	e3a0100a 	mov	r1, #10
   13074:	ebfff7ff 	bl	11078 <strchr@plt>
   13078:	e3500000 	cmp	r0, #0
   1307c:	15c05000 	strbne	r5, [r0]
   13080:	1afffff9 	bne	1306c <main+0x1e44>
   13084:	e28d00bc 	add	r0, sp, #188	; 0xbc
   13088:	eb000656 	bl	149e8 <land_cmd>
   1308c:	e5992000 	ldr	r2, [r9]
   13090:	e3a0303c 	mov	r3, #60	; 0x3c
   13094:	e3520001 	cmp	r2, #1
   13098:	e5843008 	str	r3, [r4, #8]
   1309c:	c3a0502e 	movgt	r5, #46	; 0x2e
   130a0:	dafffbc9 	ble	11fcc <main+0xda4>
   130a4:	e28d00bc 	add	r0, sp, #188	; 0xbc
   130a8:	e3a0100d 	mov	r1, #13
   130ac:	ebfff7f1 	bl	11078 <strchr@plt>
   130b0:	e3500000 	cmp	r0, #0
   130b4:	15c05000 	strbne	r5, [r0]
   130b8:	1afffff9 	bne	130a4 <main+0x1e7c>
   130bc:	e1a03000 	mov	r3, r0
   130c0:	e51f1c60 	ldr	r1, [pc, #-3168]	; 12468 <main+0x1240>
   130c4:	e3a0001f 	mov	r0, #31
   130c8:	e28d20bc 	add	r2, sp, #188	; 0xbc
   130cc:	e58d301c 	str	r3, [sp, #28]
   130d0:	ebfff824 	bl	11168 <syslog@plt>
   130d4:	eafff9ef 	b	11898 <main+0x670>

000130d8 <_start>:
   130d8:	e3a0b000 	mov	fp, #0
   130dc:	e3a0e000 	mov	lr, #0
   130e0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   130e4:	e1a0200d 	mov	r2, sp
   130e8:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
   130ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   130f0:	e59fc010 	ldr	ip, [pc, #16]	; 13108 <_start+0x30>
   130f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
   130f8:	e59f000c 	ldr	r0, [pc, #12]	; 1310c <_start+0x34>
   130fc:	e59f300c 	ldr	r3, [pc, #12]	; 13110 <_start+0x38>
   13100:	ebfff7b8 	bl	10fe8 <__libc_start_main@plt>
   13104:	ebfff835 	bl	111e0 <abort@plt>
   13108:	000196e8 	.word	0x000196e8
   1310c:	00011228 	.word	0x00011228
   13110:	00019684 	.word	0x00019684

00013114 <call_weak_fn>:
   13114:	e59f3014 	ldr	r3, [pc, #20]	; 13130 <call_weak_fn+0x1c>
   13118:	e59f2014 	ldr	r2, [pc, #20]	; 13134 <call_weak_fn+0x20>
   1311c:	e08f3003 	add	r3, pc, r3
   13120:	e7932002 	ldr	r2, [r3, r2]
   13124:	e3520000 	cmp	r2, #0
   13128:	012fff1e 	bxeq	lr
   1312c:	eafff7b6 	b	1100c <__gmon_start__@plt>
   13130:	000180f4 	.word	0x000180f4
   13134:	0000013c 	.word	0x0000013c

00013138 <deregister_tm_clones>:
   13138:	e59f301c 	ldr	r3, [pc, #28]	; 1315c <deregister_tm_clones+0x24>
   1313c:	e59f001c 	ldr	r0, [pc, #28]	; 13160 <deregister_tm_clones+0x28>
   13140:	e0603003 	rsb	r3, r0, r3
   13144:	e3530006 	cmp	r3, #6
   13148:	912fff1e 	bxls	lr
   1314c:	e59f3010 	ldr	r3, [pc, #16]	; 13164 <deregister_tm_clones+0x2c>
   13150:	e3530000 	cmp	r3, #0
   13154:	012fff1e 	bxeq	lr
   13158:	e12fff13 	bx	r3
   1315c:	0002b98f 	.word	0x0002b98f
   13160:	0002b98c 	.word	0x0002b98c
   13164:	00000000 	.word	0x00000000

00013168 <register_tm_clones>:
   13168:	e59f1024 	ldr	r1, [pc, #36]	; 13194 <register_tm_clones+0x2c>
   1316c:	e59f0024 	ldr	r0, [pc, #36]	; 13198 <register_tm_clones+0x30>
   13170:	e0601001 	rsb	r1, r0, r1
   13174:	e1a01141 	asr	r1, r1, #2
   13178:	e0811fa1 	add	r1, r1, r1, lsr #31
   1317c:	e1b010c1 	asrs	r1, r1, #1
   13180:	012fff1e 	bxeq	lr
   13184:	e59f3010 	ldr	r3, [pc, #16]	; 1319c <register_tm_clones+0x34>
   13188:	e3530000 	cmp	r3, #0
   1318c:	012fff1e 	bxeq	lr
   13190:	e12fff13 	bx	r3
   13194:	0002b98c 	.word	0x0002b98c
   13198:	0002b98c 	.word	0x0002b98c
   1319c:	00000000 	.word	0x00000000

000131a0 <__do_global_dtors_aux>:
   131a0:	e92d4010 	push	{r4, lr}
   131a4:	e59f4018 	ldr	r4, [pc, #24]	; 131c4 <__do_global_dtors_aux+0x24>
   131a8:	e5d43000 	ldrb	r3, [r4]
   131ac:	e3530000 	cmp	r3, #0
   131b0:	18bd8010 	popne	{r4, pc}
   131b4:	ebffffdf 	bl	13138 <deregister_tm_clones>
   131b8:	e3a03001 	mov	r3, #1
   131bc:	e5c43000 	strb	r3, [r4]
   131c0:	e8bd8010 	pop	{r4, pc}
   131c4:	0002b994 	.word	0x0002b994

000131c8 <frame_dummy>:
   131c8:	e92d4008 	push	{r3, lr}
   131cc:	e59f0024 	ldr	r0, [pc, #36]	; 131f8 <frame_dummy+0x30>
   131d0:	e5903000 	ldr	r3, [r0]
   131d4:	e3530000 	cmp	r3, #0
   131d8:	1a000001 	bne	131e4 <frame_dummy+0x1c>
   131dc:	e8bd4008 	pop	{r3, lr}
   131e0:	eaffffe0 	b	13168 <register_tm_clones>
   131e4:	e59f3010 	ldr	r3, [pc, #16]	; 131fc <frame_dummy+0x34>
   131e8:	e3530000 	cmp	r3, #0
   131ec:	0afffffa 	beq	131dc <frame_dummy+0x14>
   131f0:	e12fff33 	blx	r3
   131f4:	eafffff8 	b	131dc <frame_dummy+0x14>
   131f8:	0002b12c 	.word	0x0002b12c
   131fc:	00000000 	.word	0x00000000

00013200 <spi_set_clock>:
   13200:	e59f3004 	ldr	r3, [pc, #4]	; 1320c <spi_set_clock+0xc>
   13204:	e5830000 	str	r0, [r3]
   13208:	e12fff1e 	bx	lr
   1320c:	0002b998 	.word	0x0002b998

00013210 <spi_init>:
   13210:	e92d4038 	push	{r3, r4, r5, lr}
   13214:	eb0017cb 	bl	19148 <bcm2835_init>
   13218:	e3500000 	cmp	r0, #0
   1321c:	1a000001 	bne	13228 <spi_init+0x18>
   13220:	e3a00001 	mov	r0, #1
   13224:	e8bd8038 	pop	{r3, r4, r5, pc}
   13228:	e3a00011 	mov	r0, #17
   1322c:	e3a01000 	mov	r1, #0
   13230:	eb001208 	bl	17a58 <bcm2835_gpio_fsel>
   13234:	e3a00012 	mov	r0, #18
   13238:	e3a01000 	mov	r1, #0
   1323c:	eb001205 	bl	17a58 <bcm2835_gpio_fsel>
   13240:	e59f410c 	ldr	r4, [pc, #268]	; 13354 <spi_init+0x144>
   13244:	e3a00009 	mov	r0, #9
   13248:	e3a01004 	mov	r1, #4
   1324c:	eb001201 	bl	17a58 <bcm2835_gpio_fsel>
   13250:	e3a0000a 	mov	r0, #10
   13254:	e3a01004 	mov	r1, #4
   13258:	eb0011fe 	bl	17a58 <bcm2835_gpio_fsel>
   1325c:	e3a0000b 	mov	r0, #11
   13260:	e3a01004 	mov	r1, #4
   13264:	eb0011fb 	bl	17a58 <bcm2835_gpio_fsel>
   13268:	e5940018 	ldr	r0, [r4, #24]
   1326c:	e3500000 	cmp	r0, #0
   13270:	1a000016 	bne	132d0 <spi_init+0xc0>
   13274:	e5940020 	ldr	r0, [r4, #32]
   13278:	e59f50d4 	ldr	r5, [pc, #212]	; 13354 <spi_init+0x144>
   1327c:	e3500000 	cmp	r0, #0
   13280:	1a00001b 	bne	132f4 <spi_init+0xe4>
   13284:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   13288:	e59f50c4 	ldr	r5, [pc, #196]	; 13354 <spi_init+0x144>
   1328c:	e3500000 	cmp	r0, #0
   13290:	1a000020 	bne	13318 <spi_init+0x108>
   13294:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13298:	e59f40b4 	ldr	r4, [pc, #180]	; 13354 <spi_init+0x144>
   1329c:	e3500000 	cmp	r0, #0
   132a0:	1a000025 	bne	1333c <spi_init+0x12c>
   132a4:	e3a00001 	mov	r0, #1
   132a8:	eb001368 	bl	18050 <bcm2835_spi_setBitOrder>
   132ac:	e3a00000 	mov	r0, #0
   132b0:	eb00136d 	bl	1806c <bcm2835_spi_setDataMode>
   132b4:	e59f309c 	ldr	r3, [pc, #156]	; 13358 <spi_init+0x148>
   132b8:	e1d300b0 	ldrh	r0, [r3]
   132bc:	eb001364 	bl	18054 <bcm2835_spi_setClockDivider>
   132c0:	e3a00003 	mov	r0, #3
   132c4:	eb001441 	bl	183d0 <bcm2835_spi_chipSelect>
   132c8:	e3a00000 	mov	r0, #0
   132cc:	e8bd8038 	pop	{r3, r4, r5, pc}
   132d0:	e6ef0070 	uxtb	r0, r0
   132d4:	e3a01001 	mov	r1, #1
   132d8:	eb0011de 	bl	17a58 <bcm2835_gpio_fsel>
   132dc:	e5d40018 	ldrb	r0, [r4, #24]
   132e0:	eb0011ef 	bl	17aa4 <bcm2835_gpio_set>
   132e4:	e5940020 	ldr	r0, [r4, #32]
   132e8:	e59f5064 	ldr	r5, [pc, #100]	; 13354 <spi_init+0x144>
   132ec:	e3500000 	cmp	r0, #0
   132f0:	0affffe3 	beq	13284 <spi_init+0x74>
   132f4:	e6ef0070 	uxtb	r0, r0
   132f8:	e3a01001 	mov	r1, #1
   132fc:	eb0011d5 	bl	17a58 <bcm2835_gpio_fsel>
   13300:	e5d50020 	ldrb	r0, [r5, #32]
   13304:	eb0011e6 	bl	17aa4 <bcm2835_gpio_set>
   13308:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   1330c:	e59f5040 	ldr	r5, [pc, #64]	; 13354 <spi_init+0x144>
   13310:	e3500000 	cmp	r0, #0
   13314:	0affffde 	beq	13294 <spi_init+0x84>
   13318:	e6ef0070 	uxtb	r0, r0
   1331c:	e3a01001 	mov	r1, #1
   13320:	eb0011cc 	bl	17a58 <bcm2835_gpio_fsel>
   13324:	e5d50030 	ldrb	r0, [r5, #48]	; 0x30
   13328:	eb0011dd 	bl	17aa4 <bcm2835_gpio_set>
   1332c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13330:	e59f401c 	ldr	r4, [pc, #28]	; 13354 <spi_init+0x144>
   13334:	e3500000 	cmp	r0, #0
   13338:	0affffd9 	beq	132a4 <spi_init+0x94>
   1333c:	e6ef0070 	uxtb	r0, r0
   13340:	e3a01001 	mov	r1, #1
   13344:	eb0011c3 	bl	17a58 <bcm2835_gpio_fsel>
   13348:	e5d40028 	ldrb	r0, [r4, #40]	; 0x28
   1334c:	eb0011d4 	bl	17aa4 <bcm2835_gpio_set>
   13350:	eaffffd3 	b	132a4 <spi_init+0x94>
   13354:	0002d184 	.word	0x0002d184
   13358:	0002b998 	.word	0x0002b998

0001335c <spi_release>:
   1335c:	e92d4010 	push	{r4, lr}
   13360:	eb001778 	bl	19148 <bcm2835_init>
   13364:	e3500000 	cmp	r0, #0
   13368:	08bd8010 	popeq	{r4, pc}
   1336c:	e3a00009 	mov	r0, #9
   13370:	e3a01000 	mov	r1, #0
   13374:	e59f40ac 	ldr	r4, [pc, #172]	; 13428 <spi_release+0xcc>
   13378:	eb0011b6 	bl	17a58 <bcm2835_gpio_fsel>
   1337c:	e3a0000a 	mov	r0, #10
   13380:	e3a01000 	mov	r1, #0
   13384:	eb0011b3 	bl	17a58 <bcm2835_gpio_fsel>
   13388:	e3a0000b 	mov	r0, #11
   1338c:	e3a01000 	mov	r1, #0
   13390:	eb0011b0 	bl	17a58 <bcm2835_gpio_fsel>
   13394:	e5940018 	ldr	r0, [r4, #24]
   13398:	e3500000 	cmp	r0, #0
   1339c:	1a00000a 	bne	133cc <spi_release+0x70>
   133a0:	e5940020 	ldr	r0, [r4, #32]
   133a4:	e3500000 	cmp	r0, #0
   133a8:	1a00000d 	bne	133e4 <spi_release+0x88>
   133ac:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   133b0:	e3500000 	cmp	r0, #0
   133b4:	1a000010 	bne	133fc <spi_release+0xa0>
   133b8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   133bc:	e3500000 	cmp	r0, #0
   133c0:	1a000013 	bne	13414 <spi_release+0xb8>
   133c4:	e8bd4010 	pop	{r4, lr}
   133c8:	ea00181d 	b	19444 <bcm2835_close>
   133cc:	e6ef0070 	uxtb	r0, r0
   133d0:	e3a01000 	mov	r1, #0
   133d4:	eb00119f 	bl	17a58 <bcm2835_gpio_fsel>
   133d8:	e5940020 	ldr	r0, [r4, #32]
   133dc:	e3500000 	cmp	r0, #0
   133e0:	0afffff1 	beq	133ac <spi_release+0x50>
   133e4:	e6ef0070 	uxtb	r0, r0
   133e8:	e3a01000 	mov	r1, #0
   133ec:	eb001199 	bl	17a58 <bcm2835_gpio_fsel>
   133f0:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   133f4:	e3500000 	cmp	r0, #0
   133f8:	0affffee 	beq	133b8 <spi_release+0x5c>
   133fc:	e6ef0070 	uxtb	r0, r0
   13400:	e3a01000 	mov	r1, #0
   13404:	eb001193 	bl	17a58 <bcm2835_gpio_fsel>
   13408:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   1340c:	e3500000 	cmp	r0, #0
   13410:	0affffeb 	beq	133c4 <spi_release+0x68>
   13414:	e6ef0070 	uxtb	r0, r0
   13418:	e3a01000 	mov	r1, #0
   1341c:	eb00118d 	bl	17a58 <bcm2835_gpio_fsel>
   13420:	e8bd4010 	pop	{r4, lr}
   13424:	ea001806 	b	19444 <bcm2835_close>
   13428:	0002d184 	.word	0x0002d184

0001342c <spi_xmit>:
   1342c:	e92d4070 	push	{r4, r5, r6, lr}
   13430:	e1a05002 	mov	r5, r2
   13434:	e1a06001 	mov	r6, r1
   13438:	e1a04000 	mov	r4, r0
   1343c:	e5d00000 	ldrb	r0, [r0]
   13440:	eb0011a1 	bl	17acc <bcm2835_gpio_clr>
   13444:	e1a00006 	mov	r0, r6
   13448:	e1a01005 	mov	r1, r5
   1344c:	eb0013dc 	bl	183c4 <bcm2835_spi_transfern>
   13450:	e5d40000 	ldrb	r0, [r4]
   13454:	eb001192 	bl	17aa4 <bcm2835_gpio_set>
   13458:	e3a00064 	mov	r0, #100	; 0x64
   1345c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13460:	eafff6d1 	b	10fac <usleep@plt>

00013464 <spi_5V>:
   13464:	e92d4010 	push	{r4, lr}
   13468:	e3500000 	cmp	r0, #0
   1346c:	e59f4024 	ldr	r4, [pc, #36]	; 13498 <spi_5V+0x34>
   13470:	e5d40020 	ldrb	r0, [r4, #32]
   13474:	1a000003 	bne	13488 <spi_5V+0x24>
   13478:	eb001193 	bl	17acc <bcm2835_gpio_clr>
   1347c:	e5d40028 	ldrb	r0, [r4, #40]	; 0x28
   13480:	e8bd4010 	pop	{r4, lr}
   13484:	ea001190 	b	17acc <bcm2835_gpio_clr>
   13488:	eb001185 	bl	17aa4 <bcm2835_gpio_set>
   1348c:	e5d40028 	ldrb	r0, [r4, #40]	; 0x28
   13490:	e8bd4010 	pop	{r4, lr}
   13494:	ea001182 	b	17aa4 <bcm2835_gpio_set>
   13498:	0002d184 	.word	0x0002d184

0001349c <spi_3V>:
   1349c:	e59f3010 	ldr	r3, [pc, #16]	; 134b4 <spi_3V+0x18>
   134a0:	e3500000 	cmp	r0, #0
   134a4:	e5d30030 	ldrb	r0, [r3, #48]	; 0x30
   134a8:	1a000000 	bne	134b0 <spi_3V+0x14>
   134ac:	ea001186 	b	17acc <bcm2835_gpio_clr>
   134b0:	ea00117b 	b	17aa4 <bcm2835_gpio_set>
   134b4:	0002d184 	.word	0x0002d184

000134b8 <spi_read>:
   134b8:	e352003f 	cmp	r2, #63	; 0x3f
   134bc:	8a00003d 	bhi	135b8 <spi_read+0x100>
   134c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134c4:	e2425001 	sub	r5, r2, #1
   134c8:	e24dd040 	sub	sp, sp, #64	; 0x40
   134cc:	e59fa118 	ldr	sl, [pc, #280]	; 135ec <spi_read+0x134>
   134d0:	e1a09001 	mov	r9, r1
   134d4:	e1a08000 	mov	r8, r0
   134d8:	e1a06002 	mov	r6, r2
   134dc:	e08d5005 	add	r5, sp, r5
   134e0:	e3a07014 	mov	r7, #20
   134e4:	e3560000 	cmp	r6, #0
   134e8:	0a000034 	beq	135c0 <spi_read+0x108>
   134ec:	e1a02006 	mov	r2, r6
   134f0:	e1a01009 	mov	r1, r9
   134f4:	e1a0000d 	mov	r0, sp
   134f8:	ebfff687 	bl	10f1c <memcpy@plt>
   134fc:	e5d80000 	ldrb	r0, [r8]
   13500:	eb001171 	bl	17acc <bcm2835_gpio_clr>
   13504:	e1a01006 	mov	r1, r6
   13508:	e1a0000d 	mov	r0, sp
   1350c:	eb0013ac 	bl	183c4 <bcm2835_spi_transfern>
   13510:	e5d80000 	ldrb	r0, [r8]
   13514:	eb001162 	bl	17aa4 <bcm2835_gpio_set>
   13518:	e3a00064 	mov	r0, #100	; 0x64
   1351c:	ebfff6a2 	bl	10fac <usleep@plt>
   13520:	e24d4001 	sub	r4, sp, #1
   13524:	e3a00000 	mov	r0, #0
   13528:	e5f41001 	ldrb	r1, [r4, #1]!
   1352c:	eb00046c 	bl	146e4 <_crc_ibutton_update>
   13530:	e1540005 	cmp	r4, r5
   13534:	1afffffb 	bne	13528 <spi_read+0x70>
   13538:	e16f0f10 	clz	r0, r0
   1353c:	e1a002a0 	lsr	r0, r0, #5
   13540:	e5dd3000 	ldrb	r3, [sp]
   13544:	e3530000 	cmp	r3, #0
   13548:	03a00000 	moveq	r0, #0
   1354c:	12000001 	andne	r0, r0, #1
   13550:	e3500000 	cmp	r0, #0
   13554:	1a00000e 	bne	13594 <spi_read+0xdc>
   13558:	e59a3000 	ldr	r3, [sl]
   1355c:	e3530002 	cmp	r3, #2
   13560:	ca000006 	bgt	13580 <spi_read+0xc8>
   13564:	e59f0084 	ldr	r0, [pc, #132]	; 135f0 <spi_read+0x138>
   13568:	ebfff68f 	bl	10fac <usleep@plt>
   1356c:	e2577001 	subs	r7, r7, #1
   13570:	1affffdb 	bne	134e4 <spi_read+0x2c>
   13574:	e3a00001 	mov	r0, #1
   13578:	e28dd040 	add	sp, sp, #64	; 0x40
   1357c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13580:	e3a0001b 	mov	r0, #27
   13584:	e59f1068 	ldr	r1, [pc, #104]	; 135f4 <spi_read+0x13c>
   13588:	e5982000 	ldr	r2, [r8]
   1358c:	ebfff6f5 	bl	11168 <syslog@plt>
   13590:	eafffff3 	b	13564 <spi_read+0xac>
   13594:	e3560000 	cmp	r6, #0
   13598:	0a000003 	beq	135ac <spi_read+0xf4>
   1359c:	e1a00009 	mov	r0, r9
   135a0:	e1a0100d 	mov	r1, sp
   135a4:	e1a02006 	mov	r2, r6
   135a8:	ebfff65b 	bl	10f1c <memcpy@plt>
   135ac:	e3a00000 	mov	r0, #0
   135b0:	e28dd040 	add	sp, sp, #64	; 0x40
   135b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   135b8:	e3a00001 	mov	r0, #1
   135bc:	e12fff1e 	bx	lr
   135c0:	e5d80000 	ldrb	r0, [r8]
   135c4:	eb001140 	bl	17acc <bcm2835_gpio_clr>
   135c8:	e1a01006 	mov	r1, r6
   135cc:	e1a0000d 	mov	r0, sp
   135d0:	eb00137b 	bl	183c4 <bcm2835_spi_transfern>
   135d4:	e5d80000 	ldrb	r0, [r8]
   135d8:	eb001131 	bl	17aa4 <bcm2835_gpio_set>
   135dc:	e3a00064 	mov	r0, #100	; 0x64
   135e0:	ebfff671 	bl	10fac <usleep@plt>
   135e4:	e3a00001 	mov	r0, #1
   135e8:	eaffffd4 	b	13540 <spi_read+0x88>
   135ec:	0002d0ec 	.word	0x0002d0ec
   135f0:	00002328 	.word	0x00002328
   135f4:	000196f8 	.word	0x000196f8

000135f8 <spi_write>:
   135f8:	e352003d 	cmp	r2, #61	; 0x3d
   135fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13600:	e1a08002 	mov	r8, r2
   13604:	e24dd054 	sub	sp, sp, #84	; 0x54
   13608:	8a00003f 	bhi	1370c <spi_write+0x114>
   1360c:	e2823001 	add	r3, r2, #1
   13610:	e2424001 	sub	r4, r2, #1
   13614:	e28d2050 	add	r2, sp, #80	; 0x50
   13618:	e0823003 	add	r3, r2, r3
   1361c:	e58d3008 	str	r3, [sp, #8]
   13620:	e59fb140 	ldr	fp, [pc, #320]	; 13768 <spi_write+0x170>
   13624:	e2883002 	add	r3, r8, #2
   13628:	e58d3004 	str	r3, [sp, #4]
   1362c:	e1a09000 	mov	r9, r0
   13630:	e3a03014 	mov	r3, #20
   13634:	e1a06001 	mov	r6, r1
   13638:	e0814004 	add	r4, r1, r4
   1363c:	e58d3000 	str	r3, [sp]
   13640:	e0823008 	add	r3, r2, r8
   13644:	e58d300c 	str	r3, [sp, #12]
   13648:	e3580000 	cmp	r8, #0
   1364c:	0a000036 	beq	1372c <spi_write+0x134>
   13650:	e3a0a000 	mov	sl, #0
   13654:	e2465001 	sub	r5, r6, #1
   13658:	e28d700f 	add	r7, sp, #15
   1365c:	e1a0000a 	mov	r0, sl
   13660:	e5f51001 	ldrb	r1, [r5, #1]!
   13664:	eb00041e 	bl	146e4 <_crc_ibutton_update>
   13668:	e1550004 	cmp	r5, r4
   1366c:	e5d53000 	ldrb	r3, [r5]
   13670:	e5e73001 	strb	r3, [r7, #1]!
   13674:	1afffff9 	bne	13660 <spi_write+0x68>
   13678:	e59d300c 	ldr	r3, [sp, #12]
   1367c:	e1a0a000 	mov	sl, r0
   13680:	e5d90000 	ldrb	r0, [r9]
   13684:	e543a040 	strb	sl, [r3, #-64]	; 0xffffffc0
   13688:	eb00110f 	bl	17acc <bcm2835_gpio_clr>
   1368c:	e59d1004 	ldr	r1, [sp, #4]
   13690:	e28d0010 	add	r0, sp, #16
   13694:	eb00134a 	bl	183c4 <bcm2835_spi_transfern>
   13698:	e5d90000 	ldrb	r0, [r9]
   1369c:	eb001100 	bl	17aa4 <bcm2835_gpio_set>
   136a0:	e3a00064 	mov	r0, #100	; 0x64
   136a4:	ebfff640 	bl	10fac <usleep@plt>
   136a8:	e3a00000 	mov	r0, #0
   136ac:	e5dd1010 	ldrb	r1, [sp, #16]
   136b0:	eb00040b 	bl	146e4 <_crc_ibutton_update>
   136b4:	e1a07006 	mov	r7, r6
   136b8:	e0865008 	add	r5, r6, r8
   136bc:	e4d71001 	ldrb	r1, [r7], #1
   136c0:	eb000407 	bl	146e4 <_crc_ibutton_update>
   136c4:	e1570005 	cmp	r7, r5
   136c8:	1afffffb 	bne	136bc <spi_write+0xc4>
   136cc:	e1a0100a 	mov	r1, sl
   136d0:	eb000403 	bl	146e4 <_crc_ibutton_update>
   136d4:	e59d3008 	ldr	r3, [sp, #8]
   136d8:	e5531040 	ldrb	r1, [r3, #-64]	; 0xffffffc0
   136dc:	eb000400 	bl	146e4 <_crc_ibutton_update>
   136e0:	e3500000 	cmp	r0, #0
   136e4:	0a000009 	beq	13710 <spi_write+0x118>
   136e8:	e59b3000 	ldr	r3, [fp]
   136ec:	e3530002 	cmp	r3, #2
   136f0:	ca000008 	bgt	13718 <spi_write+0x120>
   136f4:	e59f0070 	ldr	r0, [pc, #112]	; 1376c <spi_write+0x174>
   136f8:	ebfff62b 	bl	10fac <usleep@plt>
   136fc:	e59d3000 	ldr	r3, [sp]
   13700:	e2533001 	subs	r3, r3, #1
   13704:	e58d3000 	str	r3, [sp]
   13708:	1affffce 	bne	13648 <spi_write+0x50>
   1370c:	e3a00001 	mov	r0, #1
   13710:	e28dd054 	add	sp, sp, #84	; 0x54
   13714:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13718:	e3a0001b 	mov	r0, #27
   1371c:	e59f104c 	ldr	r1, [pc, #76]	; 13770 <spi_write+0x178>
   13720:	e5992000 	ldr	r2, [r9]
   13724:	ebfff68f 	bl	11168 <syslog@plt>
   13728:	eafffff1 	b	136f4 <spi_write+0xfc>
   1372c:	e5d90000 	ldrb	r0, [r9]
   13730:	e5cd8010 	strb	r8, [sp, #16]
   13734:	eb0010e4 	bl	17acc <bcm2835_gpio_clr>
   13738:	e59d1004 	ldr	r1, [sp, #4]
   1373c:	e28d0010 	add	r0, sp, #16
   13740:	eb00131f 	bl	183c4 <bcm2835_spi_transfern>
   13744:	e5d90000 	ldrb	r0, [r9]
   13748:	eb0010d5 	bl	17aa4 <bcm2835_gpio_set>
   1374c:	e3a00064 	mov	r0, #100	; 0x64
   13750:	ebfff615 	bl	10fac <usleep@plt>
   13754:	e1a00008 	mov	r0, r8
   13758:	e5dd1010 	ldrb	r1, [sp, #16]
   1375c:	eb0003e0 	bl	146e4 <_crc_ibutton_update>
   13760:	e1a0a008 	mov	sl, r8
   13764:	eaffffd8 	b	136cc <spi_write+0xd4>
   13768:	0002d0ec 	.word	0x0002d0ec
   1376c:	00002328 	.word	0x00002328
   13770:	00019714 	.word	0x00019714

00013774 <get_irq>:
   13774:	e92d4038 	push	{r3, r4, r5, lr}
   13778:	e1a05000 	mov	r5, r0
   1377c:	e6ef0070 	uxtb	r0, r0
   13780:	eb0010e7 	bl	17b24 <bcm2835_gpio_lev>
   13784:	e3500001 	cmp	r0, #1
   13788:	e1a04000 	mov	r4, r0
   1378c:	0a000001 	beq	13798 <get_irq+0x24>
   13790:	e1a00004 	mov	r0, r4
   13794:	e8bd8038 	pop	{r3, r4, r5, pc}
   13798:	e59f302c 	ldr	r3, [pc, #44]	; 137cc <get_irq+0x58>
   1379c:	e5933000 	ldr	r3, [r3]
   137a0:	e3530002 	cmp	r3, #2
   137a4:	dafffff9 	ble	13790 <get_irq+0x1c>
   137a8:	e59f3020 	ldr	r3, [pc, #32]	; 137d0 <get_irq+0x5c>
   137ac:	e3550011 	cmp	r5, #17
   137b0:	e59f201c 	ldr	r2, [pc, #28]	; 137d4 <get_irq+0x60>
   137b4:	e3a0001f 	mov	r0, #31
   137b8:	11a02003 	movne	r2, r3
   137bc:	e59f1014 	ldr	r1, [pc, #20]	; 137d8 <get_irq+0x64>
   137c0:	ebfff668 	bl	11168 <syslog@plt>
   137c4:	e1a00004 	mov	r0, r4
   137c8:	e8bd8038 	pop	{r3, r4, r5, pc}
   137cc:	0002d0ec 	.word	0x0002d0ec
   137d0:	0001a1b8 	.word	0x0001a1b8
   137d4:	0001a1b0 	.word	0x0001a1b0
   137d8:	00019730 	.word	0x00019730

000137dc <cfg_copy_str>:
   137dc:	e92d4070 	push	{r4, r5, r6, lr}
   137e0:	e1a04001 	mov	r4, r1
   137e4:	e1a05000 	mov	r5, r0
   137e8:	e3a0100a 	mov	r1, #10
   137ec:	e1a00004 	mov	r0, r4
   137f0:	e1a06002 	mov	r6, r2
   137f4:	ebfff61f 	bl	11078 <strchr@plt>
   137f8:	e3a0100d 	mov	r1, #13
   137fc:	e3500000 	cmp	r0, #0
   13800:	13a03000 	movne	r3, #0
   13804:	15c03000 	strbne	r3, [r0]
   13808:	e1a00004 	mov	r0, r4
   1380c:	ebfff619 	bl	11078 <strchr@plt>
   13810:	e3a01009 	mov	r1, #9
   13814:	e3500000 	cmp	r0, #0
   13818:	13a03000 	movne	r3, #0
   1381c:	15c03000 	strbne	r3, [r0]
   13820:	e1a00004 	mov	r0, r4
   13824:	ebfff613 	bl	11078 <strchr@plt>
   13828:	e3500000 	cmp	r0, #0
   1382c:	13a03020 	movne	r3, #32
   13830:	15c03000 	strbne	r3, [r0]
   13834:	e1a00004 	mov	r0, r4
   13838:	ebfff605 	bl	11054 <strlen@plt>
   1383c:	e2462001 	sub	r2, r6, #1
   13840:	e1500002 	cmp	r0, r2
   13844:	8a000018 	bhi	138ac <cfg_copy_str+0xd0>
   13848:	e0856006 	add	r6, r5, r6
   1384c:	e1a01004 	mov	r1, r4
   13850:	e1a00005 	mov	r0, r5
   13854:	e3a04000 	mov	r4, #0
   13858:	ebfff624 	bl	110f0 <strncpy@plt>
   1385c:	e5464001 	strb	r4, [r6, #-1]
   13860:	e1a00005 	mov	r0, r5
   13864:	e3a0100a 	mov	r1, #10
   13868:	ebfff602 	bl	11078 <strchr@plt>
   1386c:	e3a0100d 	mov	r1, #13
   13870:	e3500000 	cmp	r0, #0
   13874:	15c04000 	strbne	r4, [r0]
   13878:	e1a00005 	mov	r0, r5
   1387c:	ebfff5fd 	bl	11078 <strchr@plt>
   13880:	e3a01009 	mov	r1, #9
   13884:	e3500000 	cmp	r0, #0
   13888:	13a03000 	movne	r3, #0
   1388c:	15c03000 	strbne	r3, [r0]
   13890:	e1a00005 	mov	r0, r5
   13894:	ebfff5f7 	bl	11078 <strchr@plt>
   13898:	e3500000 	cmp	r0, #0
   1389c:	13a03020 	movne	r3, #32
   138a0:	15c03000 	strbne	r3, [r0]
   138a4:	13a00000 	movne	r0, #0
   138a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   138ac:	e1a02004 	mov	r2, r4
   138b0:	e3a0001b 	mov	r0, #27
   138b4:	e59f1008 	ldr	r1, [pc, #8]	; 138c4 <cfg_copy_str+0xe8>
   138b8:	ebfff62a 	bl	11168 <syslog@plt>
   138bc:	e3a00001 	mov	r0, #1
   138c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   138c4:	00019740 	.word	0x00019740

000138c8 <cfg_copy_str.constprop.0>:
   138c8:	e92d4038 	push	{r3, r4, r5, lr}
   138cc:	e1a04001 	mov	r4, r1
   138d0:	e1a05000 	mov	r5, r0
   138d4:	e3a0100a 	mov	r1, #10
   138d8:	e1a00004 	mov	r0, r4
   138dc:	ebfff5e5 	bl	11078 <strchr@plt>
   138e0:	e3a0100d 	mov	r1, #13
   138e4:	e3500000 	cmp	r0, #0
   138e8:	13a03000 	movne	r3, #0
   138ec:	15c03000 	strbne	r3, [r0]
   138f0:	e1a00004 	mov	r0, r4
   138f4:	ebfff5df 	bl	11078 <strchr@plt>
   138f8:	e3a01009 	mov	r1, #9
   138fc:	e3500000 	cmp	r0, #0
   13900:	13a03000 	movne	r3, #0
   13904:	15c03000 	strbne	r3, [r0]
   13908:	e1a00004 	mov	r0, r4
   1390c:	ebfff5d9 	bl	11078 <strchr@plt>
   13910:	e3500000 	cmp	r0, #0
   13914:	13a03020 	movne	r3, #32
   13918:	15c03000 	strbne	r3, [r0]
   1391c:	e1a00004 	mov	r0, r4
   13920:	ebfff5cb 	bl	11054 <strlen@plt>
   13924:	e350004f 	cmp	r0, #79	; 0x4f
   13928:	8a000018 	bhi	13990 <cfg_copy_str.constprop.0+0xc8>
   1392c:	e3a0204f 	mov	r2, #79	; 0x4f
   13930:	e1a01004 	mov	r1, r4
   13934:	e1a00005 	mov	r0, r5
   13938:	e3a04000 	mov	r4, #0
   1393c:	ebfff5eb 	bl	110f0 <strncpy@plt>
   13940:	e5c5404f 	strb	r4, [r5, #79]	; 0x4f
   13944:	e1a00005 	mov	r0, r5
   13948:	e3a0100a 	mov	r1, #10
   1394c:	ebfff5c9 	bl	11078 <strchr@plt>
   13950:	e3a0100d 	mov	r1, #13
   13954:	e3500000 	cmp	r0, #0
   13958:	15c04000 	strbne	r4, [r0]
   1395c:	e1a00005 	mov	r0, r5
   13960:	ebfff5c4 	bl	11078 <strchr@plt>
   13964:	e3a01009 	mov	r1, #9
   13968:	e3500000 	cmp	r0, #0
   1396c:	13a03000 	movne	r3, #0
   13970:	15c03000 	strbne	r3, [r0]
   13974:	e1a00005 	mov	r0, r5
   13978:	ebfff5be 	bl	11078 <strchr@plt>
   1397c:	e3500000 	cmp	r0, #0
   13980:	13a03020 	movne	r3, #32
   13984:	15c03000 	strbne	r3, [r0]
   13988:	13a00000 	movne	r0, #0
   1398c:	e8bd8038 	pop	{r3, r4, r5, pc}
   13990:	e1a02004 	mov	r2, r4
   13994:	e3a0001b 	mov	r0, #27
   13998:	e59f1008 	ldr	r1, [pc, #8]	; 139a8 <cfg_copy_str.constprop.0+0xe0>
   1399c:	ebfff5f1 	bl	11168 <syslog@plt>
   139a0:	e3a00001 	mov	r0, #1
   139a4:	e8bd8038 	pop	{r3, r4, r5, pc}
   139a8:	00019740 	.word	0x00019740

000139ac <parse_config_file>:
   139ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   139b0:	e24ddb01 	sub	sp, sp, #1024	; 0x400
   139b4:	e59f0a9c 	ldr	r0, [pc, #2716]	; 14458 <parse_config_file+0xaac>
   139b8:	e59f1a9c 	ldr	r1, [pc, #2716]	; 1445c <parse_config_file+0xab0>
   139bc:	ebfff544 	bl	10ed4 <fopen@plt>
   139c0:	e2506000 	subs	r6, r0, #0
   139c4:	0a00029c 	beq	1443c <parse_config_file+0xa90>
   139c8:	e59f5a90 	ldr	r5, [pc, #2704]	; 14460 <parse_config_file+0xab4>
   139cc:	e59f7a90 	ldr	r7, [pc, #2704]	; 14464 <parse_config_file+0xab8>
   139d0:	e3a03000 	mov	r3, #0
   139d4:	e3a01001 	mov	r1, #1
   139d8:	e3a0e009 	mov	lr, #9
   139dc:	e3a0c00a 	mov	ip, #10
   139e0:	e3a0000b 	mov	r0, #11
   139e4:	e5c53000 	strb	r3, [r5]
   139e8:	e5c53001 	strb	r3, [r5, #1]
   139ec:	e5c53003 	strb	r3, [r5, #3]
   139f0:	e5c53006 	strb	r3, [r5, #6]
   139f4:	e1a04003 	mov	r4, r3
   139f8:	e5c53007 	strb	r3, [r5, #7]
   139fc:	e5c53008 	strb	r3, [r5, #8]
   13a00:	e5c53009 	strb	r3, [r5, #9]
   13a04:	e5c5300a 	strb	r3, [r5, #10]
   13a08:	e5c5300c 	strb	r3, [r5, #12]
   13a0c:	e5873018 	str	r3, [r7, #24]
   13a10:	e5873020 	str	r3, [r7, #32]
   13a14:	e5873028 	str	r3, [r7, #40]	; 0x28
   13a18:	e5873030 	str	r3, [r7, #48]	; 0x30
   13a1c:	e587e000 	str	lr, [r7]
   13a20:	e587c008 	str	ip, [r7, #8]
   13a24:	e5870010 	str	r0, [r7, #16]
   13a28:	e5c5100b 	strb	r1, [r5, #11]
   13a2c:	e5c51002 	strb	r1, [r5, #2]
   13a30:	e5c51004 	strb	r1, [r5, #4]
   13a34:	e5c51005 	strb	r1, [r5, #5]
   13a38:	ea000129 	b	13ee4 <parse_config_file+0x538>
   13a3c:	e1a0100d 	mov	r1, sp
   13a40:	e59f0a20 	ldr	r0, [pc, #2592]	; 14468 <parse_config_file+0xabc>
   13a44:	e3a02005 	mov	r2, #5
   13a48:	ebfff59c 	bl	110c0 <strncasecmp@plt>
   13a4c:	e2501000 	subs	r1, r0, #0
   13a50:	0a00026f 	beq	14414 <parse_config_file+0xa68>
   13a54:	e1a0100d 	mov	r1, sp
   13a58:	e59f0a0c 	ldr	r0, [pc, #2572]	; 1446c <parse_config_file+0xac0>
   13a5c:	e3a02005 	mov	r2, #5
   13a60:	ebfff596 	bl	110c0 <strncasecmp@plt>
   13a64:	e2501000 	subs	r1, r0, #0
   13a68:	0a00026e 	beq	14428 <parse_config_file+0xa7c>
   13a6c:	e1a0100d 	mov	r1, sp
   13a70:	e59f09f8 	ldr	r0, [pc, #2552]	; 14470 <parse_config_file+0xac4>
   13a74:	e3a0200b 	mov	r2, #11
   13a78:	ebfff590 	bl	110c0 <strncasecmp@plt>
   13a7c:	e2501000 	subs	r1, r0, #0
   13a80:	0a00025e 	beq	14400 <parse_config_file+0xa54>
   13a84:	e1a0100d 	mov	r1, sp
   13a88:	e59f09e4 	ldr	r0, [pc, #2532]	; 14474 <parse_config_file+0xac8>
   13a8c:	e3a02006 	mov	r2, #6
   13a90:	ebfff58a 	bl	110c0 <strncasecmp@plt>
   13a94:	e2501000 	subs	r1, r0, #0
   13a98:	0a000253 	beq	143ec <parse_config_file+0xa40>
   13a9c:	e1a0100d 	mov	r1, sp
   13aa0:	e59f09d0 	ldr	r0, [pc, #2512]	; 14478 <parse_config_file+0xacc>
   13aa4:	e3a02009 	mov	r2, #9
   13aa8:	ebfff584 	bl	110c0 <strncasecmp@plt>
   13aac:	e2501000 	subs	r1, r0, #0
   13ab0:	0a000248 	beq	143d8 <parse_config_file+0xa2c>
   13ab4:	e1a0100d 	mov	r1, sp
   13ab8:	e59f09bc 	ldr	r0, [pc, #2492]	; 1447c <parse_config_file+0xad0>
   13abc:	e3a02005 	mov	r2, #5
   13ac0:	ebfff57e 	bl	110c0 <strncasecmp@plt>
   13ac4:	e2501000 	subs	r1, r0, #0
   13ac8:	0a00023d 	beq	143c4 <parse_config_file+0xa18>
   13acc:	e1a0100d 	mov	r1, sp
   13ad0:	e59f09a8 	ldr	r0, [pc, #2472]	; 14480 <parse_config_file+0xad4>
   13ad4:	e3a0200a 	mov	r2, #10
   13ad8:	ebfff578 	bl	110c0 <strncasecmp@plt>
   13adc:	e2501000 	subs	r1, r0, #0
   13ae0:	0a000231 	beq	143ac <parse_config_file+0xa00>
   13ae4:	e1a0100d 	mov	r1, sp
   13ae8:	e59f0994 	ldr	r0, [pc, #2452]	; 14484 <parse_config_file+0xad8>
   13aec:	e3a02010 	mov	r2, #16
   13af0:	ebfff572 	bl	110c0 <strncasecmp@plt>
   13af4:	e2501000 	subs	r1, r0, #0
   13af8:	0a000226 	beq	14398 <parse_config_file+0x9ec>
   13afc:	e59f0984 	ldr	r0, [pc, #2436]	; 14488 <parse_config_file+0xadc>
   13b00:	e1a0100d 	mov	r1, sp
   13b04:	e3a0200b 	mov	r2, #11
   13b08:	ebfff56c 	bl	110c0 <strncasecmp@plt>
   13b0c:	e3500000 	cmp	r0, #0
   13b10:	0a000218 	beq	14378 <parse_config_file+0x9cc>
   13b14:	e1a0100d 	mov	r1, sp
   13b18:	e59f096c 	ldr	r0, [pc, #2412]	; 1448c <parse_config_file+0xae0>
   13b1c:	e3a0200d 	mov	r2, #13
   13b20:	ebfff566 	bl	110c0 <strncasecmp@plt>
   13b24:	e2501000 	subs	r1, r0, #0
   13b28:	0a00020c 	beq	14360 <parse_config_file+0x9b4>
   13b2c:	e59f095c 	ldr	r0, [pc, #2396]	; 14490 <parse_config_file+0xae4>
   13b30:	e1a0100d 	mov	r1, sp
   13b34:	e3a02014 	mov	r2, #20
   13b38:	ebfff560 	bl	110c0 <strncasecmp@plt>
   13b3c:	e3500000 	cmp	r0, #0
   13b40:	0a000200 	beq	14348 <parse_config_file+0x99c>
   13b44:	e59f0948 	ldr	r0, [pc, #2376]	; 14494 <parse_config_file+0xae8>
   13b48:	e1a0100d 	mov	r1, sp
   13b4c:	e3a02011 	mov	r2, #17
   13b50:	ebfff55a 	bl	110c0 <strncasecmp@plt>
   13b54:	e3500000 	cmp	r0, #0
   13b58:	0a0001f4 	beq	14330 <parse_config_file+0x984>
   13b5c:	e59f0934 	ldr	r0, [pc, #2356]	; 14498 <parse_config_file+0xaec>
   13b60:	e1a0100d 	mov	r1, sp
   13b64:	e3a02014 	mov	r2, #20
   13b68:	ebfff554 	bl	110c0 <strncasecmp@plt>
   13b6c:	e3500000 	cmp	r0, #0
   13b70:	0a0001e8 	beq	14318 <parse_config_file+0x96c>
   13b74:	e59f0920 	ldr	r0, [pc, #2336]	; 1449c <parse_config_file+0xaf0>
   13b78:	e1a0100d 	mov	r1, sp
   13b7c:	e3a02015 	mov	r2, #21
   13b80:	ebfff54e 	bl	110c0 <strncasecmp@plt>
   13b84:	e3500000 	cmp	r0, #0
   13b88:	0a0001dc 	beq	14300 <parse_config_file+0x954>
   13b8c:	e1a0100d 	mov	r1, sp
   13b90:	e59f0908 	ldr	r0, [pc, #2312]	; 144a0 <parse_config_file+0xaf4>
   13b94:	e3a02007 	mov	r2, #7
   13b98:	ebfff548 	bl	110c0 <strncasecmp@plt>
   13b9c:	e2501000 	subs	r1, r0, #0
   13ba0:	0a0001cf 	beq	142e4 <parse_config_file+0x938>
   13ba4:	e1a0100d 	mov	r1, sp
   13ba8:	e59f08f4 	ldr	r0, [pc, #2292]	; 144a4 <parse_config_file+0xaf8>
   13bac:	e3a02007 	mov	r2, #7
   13bb0:	ebfff542 	bl	110c0 <strncasecmp@plt>
   13bb4:	e2501000 	subs	r1, r0, #0
   13bb8:	0a0001c2 	beq	142c8 <parse_config_file+0x91c>
   13bbc:	e1a0100d 	mov	r1, sp
   13bc0:	e59f08e0 	ldr	r0, [pc, #2272]	; 144a8 <parse_config_file+0xafc>
   13bc4:	e3a02009 	mov	r2, #9
   13bc8:	ebfff53c 	bl	110c0 <strncasecmp@plt>
   13bcc:	e2501000 	subs	r1, r0, #0
   13bd0:	0a0001b5 	beq	142ac <parse_config_file+0x900>
   13bd4:	e1a0100d 	mov	r1, sp
   13bd8:	e59f08cc 	ldr	r0, [pc, #2252]	; 144ac <parse_config_file+0xb00>
   13bdc:	e3a02008 	mov	r2, #8
   13be0:	ebfff536 	bl	110c0 <strncasecmp@plt>
   13be4:	e2501000 	subs	r1, r0, #0
   13be8:	0a0001a3 	beq	1427c <parse_config_file+0x8d0>
   13bec:	e1a0100d 	mov	r1, sp
   13bf0:	e59f08b8 	ldr	r0, [pc, #2232]	; 144b0 <parse_config_file+0xb04>
   13bf4:	e3a02008 	mov	r2, #8
   13bf8:	ebfff530 	bl	110c0 <strncasecmp@plt>
   13bfc:	e2501000 	subs	r1, r0, #0
   13c00:	0a000191 	beq	1424c <parse_config_file+0x8a0>
   13c04:	e1a0100d 	mov	r1, sp
   13c08:	e59f08a4 	ldr	r0, [pc, #2212]	; 144b4 <parse_config_file+0xb08>
   13c0c:	e3a02008 	mov	r2, #8
   13c10:	ebfff52a 	bl	110c0 <strncasecmp@plt>
   13c14:	e2501000 	subs	r1, r0, #0
   13c18:	0a00017f 	beq	1421c <parse_config_file+0x870>
   13c1c:	e1a0100d 	mov	r1, sp
   13c20:	e59f0890 	ldr	r0, [pc, #2192]	; 144b8 <parse_config_file+0xb0c>
   13c24:	e3a02007 	mov	r2, #7
   13c28:	ebfff524 	bl	110c0 <strncasecmp@plt>
   13c2c:	e2501000 	subs	r1, r0, #0
   13c30:	0a000172 	beq	14200 <parse_config_file+0x854>
   13c34:	e59f0880 	ldr	r0, [pc, #2176]	; 144bc <parse_config_file+0xb10>
   13c38:	e1a0100d 	mov	r1, sp
   13c3c:	e3a0200e 	mov	r2, #14
   13c40:	ebfff51e 	bl	110c0 <strncasecmp@plt>
   13c44:	e3500000 	cmp	r0, #0
   13c48:	0a000167 	beq	141ec <parse_config_file+0x840>
   13c4c:	e59f086c 	ldr	r0, [pc, #2156]	; 144c0 <parse_config_file+0xb14>
   13c50:	e1a0100d 	mov	r1, sp
   13c54:	e3a0200e 	mov	r2, #14
   13c58:	ebfff518 	bl	110c0 <strncasecmp@plt>
   13c5c:	e3500000 	cmp	r0, #0
   13c60:	0a00015c 	beq	141d8 <parse_config_file+0x82c>
   13c64:	e59f0858 	ldr	r0, [pc, #2136]	; 144c4 <parse_config_file+0xb18>
   13c68:	e1a0100d 	mov	r1, sp
   13c6c:	e3a0200e 	mov	r2, #14
   13c70:	ebfff512 	bl	110c0 <strncasecmp@plt>
   13c74:	e3500000 	cmp	r0, #0
   13c78:	0a000151 	beq	141c4 <parse_config_file+0x818>
   13c7c:	e59f0844 	ldr	r0, [pc, #2116]	; 144c8 <parse_config_file+0xb1c>
   13c80:	e1a0100d 	mov	r1, sp
   13c84:	e3a0200e 	mov	r2, #14
   13c88:	ebfff50c 	bl	110c0 <strncasecmp@plt>
   13c8c:	e3500000 	cmp	r0, #0
   13c90:	0a000146 	beq	141b0 <parse_config_file+0x804>
   13c94:	e59f0830 	ldr	r0, [pc, #2096]	; 144cc <parse_config_file+0xb20>
   13c98:	e1a0100d 	mov	r1, sp
   13c9c:	e3a0200d 	mov	r2, #13
   13ca0:	ebfff506 	bl	110c0 <strncasecmp@plt>
   13ca4:	e3500000 	cmp	r0, #0
   13ca8:	0a00013b 	beq	1419c <parse_config_file+0x7f0>
   13cac:	e59f081c 	ldr	r0, [pc, #2076]	; 144d0 <parse_config_file+0xb24>
   13cb0:	e1a0100d 	mov	r1, sp
   13cb4:	e3a0200d 	mov	r2, #13
   13cb8:	ebfff500 	bl	110c0 <strncasecmp@plt>
   13cbc:	e3500000 	cmp	r0, #0
   13cc0:	0a000130 	beq	14188 <parse_config_file+0x7dc>
   13cc4:	e59f0808 	ldr	r0, [pc, #2056]	; 144d4 <parse_config_file+0xb28>
   13cc8:	e1a0100d 	mov	r1, sp
   13ccc:	e3a0200e 	mov	r2, #14
   13cd0:	ebfff4fa 	bl	110c0 <strncasecmp@plt>
   13cd4:	e3500000 	cmp	r0, #0
   13cd8:	0a000125 	beq	14174 <parse_config_file+0x7c8>
   13cdc:	e59f07f4 	ldr	r0, [pc, #2036]	; 144d8 <parse_config_file+0xb2c>
   13ce0:	e1a0100d 	mov	r1, sp
   13ce4:	e3a0200e 	mov	r2, #14
   13ce8:	ebfff4f4 	bl	110c0 <strncasecmp@plt>
   13cec:	e3500000 	cmp	r0, #0
   13cf0:	0a00011a 	beq	14160 <parse_config_file+0x7b4>
   13cf4:	e59f07e0 	ldr	r0, [pc, #2016]	; 144dc <parse_config_file+0xb30>
   13cf8:	e1a0100d 	mov	r1, sp
   13cfc:	e3a0200e 	mov	r2, #14
   13d00:	ebfff4ee 	bl	110c0 <strncasecmp@plt>
   13d04:	e3500000 	cmp	r0, #0
   13d08:	0a00010f 	beq	1414c <parse_config_file+0x7a0>
   13d0c:	e59f07cc 	ldr	r0, [pc, #1996]	; 144e0 <parse_config_file+0xb34>
   13d10:	e1a0100d 	mov	r1, sp
   13d14:	e3a0200e 	mov	r2, #14
   13d18:	ebfff4e8 	bl	110c0 <strncasecmp@plt>
   13d1c:	e3500000 	cmp	r0, #0
   13d20:	0a000104 	beq	14138 <parse_config_file+0x78c>
   13d24:	e59f07b8 	ldr	r0, [pc, #1976]	; 144e4 <parse_config_file+0xb38>
   13d28:	e1a0100d 	mov	r1, sp
   13d2c:	e3a0200e 	mov	r2, #14
   13d30:	ebfff4e2 	bl	110c0 <strncasecmp@plt>
   13d34:	e3500000 	cmp	r0, #0
   13d38:	0a0000f9 	beq	14124 <parse_config_file+0x778>
   13d3c:	e59f07a4 	ldr	r0, [pc, #1956]	; 144e8 <parse_config_file+0xb3c>
   13d40:	e1a0100d 	mov	r1, sp
   13d44:	e3a0200e 	mov	r2, #14
   13d48:	ebfff4dc 	bl	110c0 <strncasecmp@plt>
   13d4c:	e3500000 	cmp	r0, #0
   13d50:	0a0000ee 	beq	14110 <parse_config_file+0x764>
   13d54:	e59f0790 	ldr	r0, [pc, #1936]	; 144ec <parse_config_file+0xb40>
   13d58:	e1a0100d 	mov	r1, sp
   13d5c:	e3a0200e 	mov	r2, #14
   13d60:	ebfff4d6 	bl	110c0 <strncasecmp@plt>
   13d64:	e3500000 	cmp	r0, #0
   13d68:	0a0000e3 	beq	140fc <parse_config_file+0x750>
   13d6c:	e59f077c 	ldr	r0, [pc, #1916]	; 144f0 <parse_config_file+0xb44>
   13d70:	e1a0100d 	mov	r1, sp
   13d74:	e3a0200e 	mov	r2, #14
   13d78:	ebfff4d0 	bl	110c0 <strncasecmp@plt>
   13d7c:	e3500000 	cmp	r0, #0
   13d80:	0a0000d8 	beq	140e8 <parse_config_file+0x73c>
   13d84:	e59f0768 	ldr	r0, [pc, #1896]	; 144f4 <parse_config_file+0xb48>
   13d88:	e1a0100d 	mov	r1, sp
   13d8c:	e3a0200e 	mov	r2, #14
   13d90:	ebfff4ca 	bl	110c0 <strncasecmp@plt>
   13d94:	e3500000 	cmp	r0, #0
   13d98:	0a0000cd 	beq	140d4 <parse_config_file+0x728>
   13d9c:	e59f0754 	ldr	r0, [pc, #1876]	; 144f8 <parse_config_file+0xb4c>
   13da0:	e1a0100d 	mov	r1, sp
   13da4:	e3a02007 	mov	r2, #7
   13da8:	ebfff4c4 	bl	110c0 <strncasecmp@plt>
   13dac:	e3500000 	cmp	r0, #0
   13db0:	0a0000bf 	beq	140b4 <parse_config_file+0x708>
   13db4:	e59f0740 	ldr	r0, [pc, #1856]	; 144fc <parse_config_file+0xb50>
   13db8:	e1a0100d 	mov	r1, sp
   13dbc:	e3a02007 	mov	r2, #7
   13dc0:	ebfff4be 	bl	110c0 <strncasecmp@plt>
   13dc4:	e3500000 	cmp	r0, #0
   13dc8:	0a0000b1 	beq	14094 <parse_config_file+0x6e8>
   13dcc:	e59f072c 	ldr	r0, [pc, #1836]	; 14500 <parse_config_file+0xb54>
   13dd0:	e1a0100d 	mov	r1, sp
   13dd4:	e3a0200c 	mov	r2, #12
   13dd8:	ebfff4b8 	bl	110c0 <strncasecmp@plt>
   13ddc:	e3500000 	cmp	r0, #0
   13de0:	0a0000a5 	beq	1407c <parse_config_file+0x6d0>
   13de4:	e59f0718 	ldr	r0, [pc, #1816]	; 14504 <parse_config_file+0xb58>
   13de8:	e1a0100d 	mov	r1, sp
   13dec:	e3a0200f 	mov	r2, #15
   13df0:	ebfff4b2 	bl	110c0 <strncasecmp@plt>
   13df4:	e3500000 	cmp	r0, #0
   13df8:	0a000099 	beq	14064 <parse_config_file+0x6b8>
   13dfc:	e59f0704 	ldr	r0, [pc, #1796]	; 14508 <parse_config_file+0xb5c>
   13e00:	e1a0100d 	mov	r1, sp
   13e04:	e3a0200d 	mov	r2, #13
   13e08:	ebfff4ac 	bl	110c0 <strncasecmp@plt>
   13e0c:	e3500000 	cmp	r0, #0
   13e10:	0a00008d 	beq	1404c <parse_config_file+0x6a0>
   13e14:	e59f06f0 	ldr	r0, [pc, #1776]	; 1450c <parse_config_file+0xb60>
   13e18:	e1a0100d 	mov	r1, sp
   13e1c:	e3a0200f 	mov	r2, #15
   13e20:	ebfff4a6 	bl	110c0 <strncasecmp@plt>
   13e24:	e3500000 	cmp	r0, #0
   13e28:	0a000081 	beq	14034 <parse_config_file+0x688>
   13e2c:	e59f06dc 	ldr	r0, [pc, #1756]	; 14510 <parse_config_file+0xb64>
   13e30:	e1a0100d 	mov	r1, sp
   13e34:	e3a0200d 	mov	r2, #13
   13e38:	ebfff4a0 	bl	110c0 <strncasecmp@plt>
   13e3c:	e3500000 	cmp	r0, #0
   13e40:	0a000066 	beq	13fe0 <parse_config_file+0x634>
   13e44:	e1a0100d 	mov	r1, sp
   13e48:	e59f06c4 	ldr	r0, [pc, #1732]	; 14514 <parse_config_file+0xb68>
   13e4c:	e3a02012 	mov	r2, #18
   13e50:	ebfff49a 	bl	110c0 <strncasecmp@plt>
   13e54:	e2501000 	subs	r1, r0, #0
   13e58:	0a00005a 	beq	13fc8 <parse_config_file+0x61c>
   13e5c:	e1a0100d 	mov	r1, sp
   13e60:	e59f06b0 	ldr	r0, [pc, #1712]	; 14518 <parse_config_file+0xb6c>
   13e64:	e3a02009 	mov	r2, #9
   13e68:	ebfff494 	bl	110c0 <strncasecmp@plt>
   13e6c:	e2501000 	subs	r1, r0, #0
   13e70:	0a00004e 	beq	13fb0 <parse_config_file+0x604>
   13e74:	e1a0100d 	mov	r1, sp
   13e78:	e59f069c 	ldr	r0, [pc, #1692]	; 1451c <parse_config_file+0xb70>
   13e7c:	e3a0200a 	mov	r2, #10
   13e80:	ebfff48e 	bl	110c0 <strncasecmp@plt>
   13e84:	e2501000 	subs	r1, r0, #0
   13e88:	0a000042 	beq	13f98 <parse_config_file+0x5ec>
   13e8c:	e1a0100d 	mov	r1, sp
   13e90:	e59f0688 	ldr	r0, [pc, #1672]	; 14520 <parse_config_file+0xb74>
   13e94:	e3a02009 	mov	r2, #9
   13e98:	ebfff488 	bl	110c0 <strncasecmp@plt>
   13e9c:	e2501000 	subs	r1, r0, #0
   13ea0:	0a000036 	beq	13f80 <parse_config_file+0x5d4>
   13ea4:	e1a0100d 	mov	r1, sp
   13ea8:	e59f0674 	ldr	r0, [pc, #1652]	; 14524 <parse_config_file+0xb78>
   13eac:	e3a0200a 	mov	r2, #10
   13eb0:	ebfff482 	bl	110c0 <strncasecmp@plt>
   13eb4:	e2501000 	subs	r1, r0, #0
   13eb8:	0a00002a 	beq	13f68 <parse_config_file+0x5bc>
   13ebc:	e59f0664 	ldr	r0, [pc, #1636]	; 14528 <parse_config_file+0xb7c>
   13ec0:	e1a0100d 	mov	r1, sp
   13ec4:	e3a02009 	mov	r2, #9
   13ec8:	ebfff47c 	bl	110c0 <strncasecmp@plt>
   13ecc:	e3500000 	cmp	r0, #0
   13ed0:	0a000016 	beq	13f30 <parse_config_file+0x584>
   13ed4:	e1a00006 	mov	r0, r6
   13ed8:	ebfff45a 	bl	11048 <feof@plt>
   13edc:	e3500000 	cmp	r0, #0
   13ee0:	1a00001b 	bne	13f54 <parse_config_file+0x5a8>
   13ee4:	e1a0000d 	mov	r0, sp
   13ee8:	e3a01b01 	mov	r1, #1024	; 0x400
   13eec:	e1a02006 	mov	r2, r6
   13ef0:	ebfff403 	bl	10f04 <fgets@plt>
   13ef4:	e5dd3000 	ldrb	r3, [sp]
   13ef8:	e353000a 	cmp	r3, #10
   13efc:	13530023 	cmpne	r3, #35	; 0x23
   13f00:	0afffff3 	beq	13ed4 <parse_config_file+0x528>
   13f04:	e1a0100d 	mov	r1, sp
   13f08:	e59f061c 	ldr	r0, [pc, #1564]	; 1452c <parse_config_file+0xb80>
   13f0c:	e3a02005 	mov	r2, #5
   13f10:	ebfff46a 	bl	110c0 <strncasecmp@plt>
   13f14:	e2501000 	subs	r1, r0, #0
   13f18:	1afffec7 	bne	13a3c <parse_config_file+0x90>
   13f1c:	e28d0005 	add	r0, sp, #5
   13f20:	e3a0200a 	mov	r2, #10
   13f24:	ebfff3e1 	bl	10eb0 <strtol@plt>
   13f28:	e5870008 	str	r0, [r7, #8]
   13f2c:	eafffec2 	b	13a3c <parse_config_file+0x90>
   13f30:	e28d1009 	add	r1, sp, #9
   13f34:	e3a02b01 	mov	r2, #1024	; 0x400
   13f38:	e59f05f0 	ldr	r0, [pc, #1520]	; 14530 <parse_config_file+0xb84>
   13f3c:	ebfffe26 	bl	137dc <cfg_copy_str>
   13f40:	e1a04000 	mov	r4, r0
   13f44:	e1a00006 	mov	r0, r6
   13f48:	ebfff43e 	bl	11048 <feof@plt>
   13f4c:	e3500000 	cmp	r0, #0
   13f50:	0affffe3 	beq	13ee4 <parse_config_file+0x538>
   13f54:	e1a00006 	mov	r0, r6
   13f58:	ebfff473 	bl	1112c <fclose@plt>
   13f5c:	e1a00004 	mov	r0, r4
   13f60:	e28ddb01 	add	sp, sp, #1024	; 0x400
   13f64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13f68:	e28d000a 	add	r0, sp, #10
   13f6c:	e3a0200a 	mov	r2, #10
   13f70:	ebfff3ce 	bl	10eb0 <strtol@plt>
   13f74:	e59f35b8 	ldr	r3, [pc, #1464]	; 14534 <parse_config_file+0xb88>
   13f78:	e5830000 	str	r0, [r3]
   13f7c:	eaffffce 	b	13ebc <parse_config_file+0x510>
   13f80:	e28d0009 	add	r0, sp, #9
   13f84:	e3a0200a 	mov	r2, #10
   13f88:	ebfff3c8 	bl	10eb0 <strtol@plt>
   13f8c:	e59f35a4 	ldr	r3, [pc, #1444]	; 14538 <parse_config_file+0xb8c>
   13f90:	e5830000 	str	r0, [r3]
   13f94:	eaffffc2 	b	13ea4 <parse_config_file+0x4f8>
   13f98:	e28d000a 	add	r0, sp, #10
   13f9c:	e3a0200a 	mov	r2, #10
   13fa0:	ebfff3c2 	bl	10eb0 <strtol@plt>
   13fa4:	e59f3590 	ldr	r3, [pc, #1424]	; 1453c <parse_config_file+0xb90>
   13fa8:	e5830000 	str	r0, [r3]
   13fac:	eaffffb6 	b	13e8c <parse_config_file+0x4e0>
   13fb0:	e28d0009 	add	r0, sp, #9
   13fb4:	e3a0200a 	mov	r2, #10
   13fb8:	ebfff3bc 	bl	10eb0 <strtol@plt>
   13fbc:	e59f357c 	ldr	r3, [pc, #1404]	; 14540 <parse_config_file+0xb94>
   13fc0:	e5830000 	str	r0, [r3]
   13fc4:	eaffffaa 	b	13e74 <parse_config_file+0x4c8>
   13fc8:	e28d0012 	add	r0, sp, #18
   13fcc:	e3a0200a 	mov	r2, #10
   13fd0:	ebfff3b6 	bl	10eb0 <strtol@plt>
   13fd4:	e59f3568 	ldr	r3, [pc, #1384]	; 14544 <parse_config_file+0xb98>
   13fd8:	e5830000 	str	r0, [r3]
   13fdc:	eaffff9e 	b	13e5c <parse_config_file+0x4b0>
   13fe0:	e59f8560 	ldr	r8, [pc, #1376]	; 14548 <parse_config_file+0xb9c>
   13fe4:	e28d100d 	add	r1, sp, #13
   13fe8:	e3a02007 	mov	r2, #7
   13fec:	e1a00008 	mov	r0, r8
   13ff0:	ebfff43e 	bl	110f0 <strncpy@plt>
   13ff4:	e59f1550 	ldr	r1, [pc, #1360]	; 1454c <parse_config_file+0xba0>
   13ff8:	e59f3550 	ldr	r3, [pc, #1360]	; 14550 <parse_config_file+0xba4>
   13ffc:	e1d800b4 	ldrh	r0, [r8, #4]
   14000:	e591c000 	ldr	ip, [r1]
   14004:	e5d82006 	ldrb	r2, [r8, #6]
   14008:	e5981000 	ldr	r1, [r8]
   1400c:	e35c0002 	cmp	ip, #2
   14010:	e1c300b4 	strh	r0, [r3, #4]
   14014:	e5831000 	str	r1, [r3]
   14018:	e5c32006 	strb	r2, [r3, #6]
   1401c:	daffff88 	ble	13e44 <parse_config_file+0x498>
   14020:	e1a02008 	mov	r2, r8
   14024:	e3a0001b 	mov	r0, #27
   14028:	e59f1524 	ldr	r1, [pc, #1316]	; 14554 <parse_config_file+0xba8>
   1402c:	ebfff44d 	bl	11168 <syslog@plt>
   14030:	eaffff83 	b	13e44 <parse_config_file+0x498>
   14034:	e59f051c 	ldr	r0, [pc, #1308]	; 14558 <parse_config_file+0xbac>
   14038:	e28d100f 	add	r1, sp, #15
   1403c:	e3a02b01 	mov	r2, #1024	; 0x400
   14040:	ebfffde5 	bl	137dc <cfg_copy_str>
   14044:	e1a04000 	mov	r4, r0
   14048:	eaffff77 	b	13e2c <parse_config_file+0x480>
   1404c:	e59f0508 	ldr	r0, [pc, #1288]	; 1455c <parse_config_file+0xbb0>
   14050:	e28d100d 	add	r1, sp, #13
   14054:	e3a02b01 	mov	r2, #1024	; 0x400
   14058:	ebfffddf 	bl	137dc <cfg_copy_str>
   1405c:	e1a04000 	mov	r4, r0
   14060:	eaffff6b 	b	13e14 <parse_config_file+0x468>
   14064:	e59f04f4 	ldr	r0, [pc, #1268]	; 14560 <parse_config_file+0xbb4>
   14068:	e28d100f 	add	r1, sp, #15
   1406c:	e3a02b01 	mov	r2, #1024	; 0x400
   14070:	ebfffdd9 	bl	137dc <cfg_copy_str>
   14074:	e1a04000 	mov	r4, r0
   14078:	eaffff5f 	b	13dfc <parse_config_file+0x450>
   1407c:	e59f04e0 	ldr	r0, [pc, #1248]	; 14564 <parse_config_file+0xbb8>
   14080:	e28d100c 	add	r1, sp, #12
   14084:	e3a02b01 	mov	r2, #1024	; 0x400
   14088:	ebfffdd3 	bl	137dc <cfg_copy_str>
   1408c:	e1a04000 	mov	r4, r0
   14090:	eaffff53 	b	13de4 <parse_config_file+0x438>
   14094:	e59f04cc 	ldr	r0, [pc, #1228]	; 14568 <parse_config_file+0xbbc>
   14098:	e28d1007 	add	r1, sp, #7
   1409c:	ebfffe09 	bl	138c8 <cfg_copy_str.constprop.0>
   140a0:	e59f34c4 	ldr	r3, [pc, #1220]	; 1456c <parse_config_file+0xbc0>
   140a4:	e3a02001 	mov	r2, #1
   140a8:	e5832000 	str	r2, [r3]
   140ac:	e1a04000 	mov	r4, r0
   140b0:	eaffff45 	b	13dcc <parse_config_file+0x420>
   140b4:	e59f04b4 	ldr	r0, [pc, #1204]	; 14570 <parse_config_file+0xbc4>
   140b8:	e28d1007 	add	r1, sp, #7
   140bc:	ebfffe01 	bl	138c8 <cfg_copy_str.constprop.0>
   140c0:	e59f34ac 	ldr	r3, [pc, #1196]	; 14574 <parse_config_file+0xbc8>
   140c4:	e3a02001 	mov	r2, #1
   140c8:	e5832000 	str	r2, [r3]
   140cc:	e1a04000 	mov	r4, r0
   140d0:	eaffff37 	b	13db4 <parse_config_file+0x408>
   140d4:	e59f049c 	ldr	r0, [pc, #1180]	; 14578 <parse_config_file+0xbcc>
   140d8:	e28d100e 	add	r1, sp, #14
   140dc:	ebfffdf9 	bl	138c8 <cfg_copy_str.constprop.0>
   140e0:	e1a04000 	mov	r4, r0
   140e4:	eaffff2c 	b	13d9c <parse_config_file+0x3f0>
   140e8:	e59f048c 	ldr	r0, [pc, #1164]	; 1457c <parse_config_file+0xbd0>
   140ec:	e28d100e 	add	r1, sp, #14
   140f0:	ebfffdf4 	bl	138c8 <cfg_copy_str.constprop.0>
   140f4:	e1a04000 	mov	r4, r0
   140f8:	eaffff21 	b	13d84 <parse_config_file+0x3d8>
   140fc:	e59f047c 	ldr	r0, [pc, #1148]	; 14580 <parse_config_file+0xbd4>
   14100:	e28d100e 	add	r1, sp, #14
   14104:	ebfffdef 	bl	138c8 <cfg_copy_str.constprop.0>
   14108:	e1a04000 	mov	r4, r0
   1410c:	eaffff16 	b	13d6c <parse_config_file+0x3c0>
   14110:	e59f046c 	ldr	r0, [pc, #1132]	; 14584 <parse_config_file+0xbd8>
   14114:	e28d100e 	add	r1, sp, #14
   14118:	ebfffdea 	bl	138c8 <cfg_copy_str.constprop.0>
   1411c:	e1a04000 	mov	r4, r0
   14120:	eaffff0b 	b	13d54 <parse_config_file+0x3a8>
   14124:	e59f045c 	ldr	r0, [pc, #1116]	; 14588 <parse_config_file+0xbdc>
   14128:	e28d100e 	add	r1, sp, #14
   1412c:	ebfffde5 	bl	138c8 <cfg_copy_str.constprop.0>
   14130:	e1a04000 	mov	r4, r0
   14134:	eaffff00 	b	13d3c <parse_config_file+0x390>
   14138:	e59f044c 	ldr	r0, [pc, #1100]	; 1458c <parse_config_file+0xbe0>
   1413c:	e28d100e 	add	r1, sp, #14
   14140:	ebfffde0 	bl	138c8 <cfg_copy_str.constprop.0>
   14144:	e1a04000 	mov	r4, r0
   14148:	eafffef5 	b	13d24 <parse_config_file+0x378>
   1414c:	e59f043c 	ldr	r0, [pc, #1084]	; 14590 <parse_config_file+0xbe4>
   14150:	e28d100e 	add	r1, sp, #14
   14154:	ebfffddb 	bl	138c8 <cfg_copy_str.constprop.0>
   14158:	e1a04000 	mov	r4, r0
   1415c:	eafffeea 	b	13d0c <parse_config_file+0x360>
   14160:	e59f042c 	ldr	r0, [pc, #1068]	; 14594 <parse_config_file+0xbe8>
   14164:	e28d100e 	add	r1, sp, #14
   14168:	ebfffdd6 	bl	138c8 <cfg_copy_str.constprop.0>
   1416c:	e1a04000 	mov	r4, r0
   14170:	eafffedf 	b	13cf4 <parse_config_file+0x348>
   14174:	e59f041c 	ldr	r0, [pc, #1052]	; 14598 <parse_config_file+0xbec>
   14178:	e28d100e 	add	r1, sp, #14
   1417c:	ebfffdd1 	bl	138c8 <cfg_copy_str.constprop.0>
   14180:	e1a04000 	mov	r4, r0
   14184:	eafffed4 	b	13cdc <parse_config_file+0x330>
   14188:	e59f040c 	ldr	r0, [pc, #1036]	; 1459c <parse_config_file+0xbf0>
   1418c:	e28d100d 	add	r1, sp, #13
   14190:	ebfffdcc 	bl	138c8 <cfg_copy_str.constprop.0>
   14194:	e1a04000 	mov	r4, r0
   14198:	eafffec9 	b	13cc4 <parse_config_file+0x318>
   1419c:	e59f03fc 	ldr	r0, [pc, #1020]	; 145a0 <parse_config_file+0xbf4>
   141a0:	e28d100d 	add	r1, sp, #13
   141a4:	ebfffdc7 	bl	138c8 <cfg_copy_str.constprop.0>
   141a8:	e1a04000 	mov	r4, r0
   141ac:	eafffebe 	b	13cac <parse_config_file+0x300>
   141b0:	e59f03ec 	ldr	r0, [pc, #1004]	; 145a4 <parse_config_file+0xbf8>
   141b4:	e28d100e 	add	r1, sp, #14
   141b8:	ebfffdc2 	bl	138c8 <cfg_copy_str.constprop.0>
   141bc:	e1a04000 	mov	r4, r0
   141c0:	eafffeb3 	b	13c94 <parse_config_file+0x2e8>
   141c4:	e59f03dc 	ldr	r0, [pc, #988]	; 145a8 <parse_config_file+0xbfc>
   141c8:	e28d100e 	add	r1, sp, #14
   141cc:	ebfffdbd 	bl	138c8 <cfg_copy_str.constprop.0>
   141d0:	e1a04000 	mov	r4, r0
   141d4:	eafffea8 	b	13c7c <parse_config_file+0x2d0>
   141d8:	e59f03cc 	ldr	r0, [pc, #972]	; 145ac <parse_config_file+0xc00>
   141dc:	e28d100e 	add	r1, sp, #14
   141e0:	ebfffdb8 	bl	138c8 <cfg_copy_str.constprop.0>
   141e4:	e1a04000 	mov	r4, r0
   141e8:	eafffe9d 	b	13c64 <parse_config_file+0x2b8>
   141ec:	e59f03bc 	ldr	r0, [pc, #956]	; 145b0 <parse_config_file+0xc04>
   141f0:	e28d100e 	add	r1, sp, #14
   141f4:	ebfffdb3 	bl	138c8 <cfg_copy_str.constprop.0>
   141f8:	e1a04000 	mov	r4, r0
   141fc:	eafffe92 	b	13c4c <parse_config_file+0x2a0>
   14200:	e28d0007 	add	r0, sp, #7
   14204:	e3a0200a 	mov	r2, #10
   14208:	ebfff328 	bl	10eb0 <strtol@plt>
   1420c:	e2900000 	adds	r0, r0, #0
   14210:	13a00001 	movne	r0, #1
   14214:	e5c5000a 	strb	r0, [r5, #10]
   14218:	eafffe85 	b	13c34 <parse_config_file+0x288>
   1421c:	e3a0200a 	mov	r2, #10
   14220:	e28d0008 	add	r0, sp, #8
   14224:	ebfff321 	bl	10eb0 <strtol@plt>
   14228:	e2900000 	adds	r0, r0, #0
   1422c:	13a00001 	movne	r0, #1
   14230:	e3500000 	cmp	r0, #0
   14234:	13a02003 	movne	r2, #3
   14238:	159f3374 	ldrne	r3, [pc, #884]	; 145b4 <parse_config_file+0xc08>
   1423c:	e5c50008 	strb	r0, [r5, #8]
   14240:	1583200c 	strne	r2, [r3, #12]
   14244:	15832010 	strne	r2, [r3, #16]
   14248:	eafffe73 	b	13c1c <parse_config_file+0x270>
   1424c:	e3a0200a 	mov	r2, #10
   14250:	e28d0008 	add	r0, sp, #8
   14254:	ebfff315 	bl	10eb0 <strtol@plt>
   14258:	e2900000 	adds	r0, r0, #0
   1425c:	13a00001 	movne	r0, #1
   14260:	e3500000 	cmp	r0, #0
   14264:	13a02003 	movne	r2, #3
   14268:	159f3348 	ldrne	r3, [pc, #840]	; 145b8 <parse_config_file+0xc0c>
   1426c:	e5c50007 	strb	r0, [r5, #7]
   14270:	1583200c 	strne	r2, [r3, #12]
   14274:	15832010 	strne	r2, [r3, #16]
   14278:	eafffe61 	b	13c04 <parse_config_file+0x258>
   1427c:	e3a0200a 	mov	r2, #10
   14280:	e28d0008 	add	r0, sp, #8
   14284:	ebfff309 	bl	10eb0 <strtol@plt>
   14288:	e2900000 	adds	r0, r0, #0
   1428c:	13a00001 	movne	r0, #1
   14290:	e3500000 	cmp	r0, #0
   14294:	13a02003 	movne	r2, #3
   14298:	159f331c 	ldrne	r3, [pc, #796]	; 145bc <parse_config_file+0xc10>
   1429c:	e5c50006 	strb	r0, [r5, #6]
   142a0:	1583200c 	strne	r2, [r3, #12]
   142a4:	15832010 	strne	r2, [r3, #16]
   142a8:	eafffe4f 	b	13bec <parse_config_file+0x240>
   142ac:	e28d0009 	add	r0, sp, #9
   142b0:	e3a0200a 	mov	r2, #10
   142b4:	ebfff2fd 	bl	10eb0 <strtol@plt>
   142b8:	e2900000 	adds	r0, r0, #0
   142bc:	13a00001 	movne	r0, #1
   142c0:	e5c50003 	strb	r0, [r5, #3]
   142c4:	eafffe42 	b	13bd4 <parse_config_file+0x228>
   142c8:	e28d0007 	add	r0, sp, #7
   142cc:	e3a0200a 	mov	r2, #10
   142d0:	ebfff2f6 	bl	10eb0 <strtol@plt>
   142d4:	e2900000 	adds	r0, r0, #0
   142d8:	13a00001 	movne	r0, #1
   142dc:	e5c50001 	strb	r0, [r5, #1]
   142e0:	eafffe35 	b	13bbc <parse_config_file+0x210>
   142e4:	e28d0007 	add	r0, sp, #7
   142e8:	e3a0200a 	mov	r2, #10
   142ec:	ebfff2ef 	bl	10eb0 <strtol@plt>
   142f0:	e2900000 	adds	r0, r0, #0
   142f4:	13a00001 	movne	r0, #1
   142f8:	e5c50000 	strb	r0, [r5]
   142fc:	eafffe28 	b	13ba4 <parse_config_file+0x1f8>
   14300:	e59f02b8 	ldr	r0, [pc, #696]	; 145c0 <parse_config_file+0xc14>
   14304:	e28d1015 	add	r1, sp, #21
   14308:	e3a02033 	mov	r2, #51	; 0x33
   1430c:	ebfffd32 	bl	137dc <cfg_copy_str>
   14310:	e1a04000 	mov	r4, r0
   14314:	eafffe1c 	b	13b8c <parse_config_file+0x1e0>
   14318:	e59f02a4 	ldr	r0, [pc, #676]	; 145c4 <parse_config_file+0xc18>
   1431c:	e28d1014 	add	r1, sp, #20
   14320:	e3a02033 	mov	r2, #51	; 0x33
   14324:	ebfffd2c 	bl	137dc <cfg_copy_str>
   14328:	e1a04000 	mov	r4, r0
   1432c:	eafffe10 	b	13b74 <parse_config_file+0x1c8>
   14330:	e59f0290 	ldr	r0, [pc, #656]	; 145c8 <parse_config_file+0xc1c>
   14334:	e28d1011 	add	r1, sp, #17
   14338:	e3a02033 	mov	r2, #51	; 0x33
   1433c:	ebfffd26 	bl	137dc <cfg_copy_str>
   14340:	e1a04000 	mov	r4, r0
   14344:	eafffe04 	b	13b5c <parse_config_file+0x1b0>
   14348:	e59f027c 	ldr	r0, [pc, #636]	; 145cc <parse_config_file+0xc20>
   1434c:	e28d1014 	add	r1, sp, #20
   14350:	e3a02033 	mov	r2, #51	; 0x33
   14354:	ebfffd20 	bl	137dc <cfg_copy_str>
   14358:	e1a04000 	mov	r4, r0
   1435c:	eafffdf8 	b	13b44 <parse_config_file+0x198>
   14360:	e28d000d 	add	r0, sp, #13
   14364:	e3a0200a 	mov	r2, #10
   14368:	ebfff2d0 	bl	10eb0 <strtol@plt>
   1436c:	e59f325c 	ldr	r3, [pc, #604]	; 145d0 <parse_config_file+0xc24>
   14370:	e5830000 	str	r0, [r3]
   14374:	eafffdec 	b	13b2c <parse_config_file+0x180>
   14378:	e59f0254 	ldr	r0, [pc, #596]	; 145d4 <parse_config_file+0xc28>
   1437c:	e28d100b 	add	r1, sp, #11
   14380:	ebfffd50 	bl	138c8 <cfg_copy_str.constprop.0>
   14384:	e59f324c 	ldr	r3, [pc, #588]	; 145d8 <parse_config_file+0xc2c>
   14388:	e3a02001 	mov	r2, #1
   1438c:	e5832000 	str	r2, [r3]
   14390:	e1a04000 	mov	r4, r0
   14394:	eafffdde 	b	13b14 <parse_config_file+0x168>
   14398:	e3a0200a 	mov	r2, #10
   1439c:	e28d0010 	add	r0, sp, #16
   143a0:	ebfff2c2 	bl	10eb0 <strtol@plt>
   143a4:	ebfffb95 	bl	13200 <spi_set_clock>
   143a8:	eafffdd3 	b	13afc <parse_config_file+0x150>
   143ac:	e28d000a 	add	r0, sp, #10
   143b0:	e3a0200a 	mov	r2, #10
   143b4:	ebfff2bd 	bl	10eb0 <strtol@plt>
   143b8:	e59f318c 	ldr	r3, [pc, #396]	; 1454c <parse_config_file+0xba0>
   143bc:	e5830000 	str	r0, [r3]
   143c0:	eafffdc7 	b	13ae4 <parse_config_file+0x138>
   143c4:	e28d0005 	add	r0, sp, #5
   143c8:	e3a0200a 	mov	r2, #10
   143cc:	ebfff2b7 	bl	10eb0 <strtol@plt>
   143d0:	e5870030 	str	r0, [r7, #48]	; 0x30
   143d4:	eafffdbc 	b	13acc <parse_config_file+0x120>
   143d8:	e28d0009 	add	r0, sp, #9
   143dc:	e3a0200a 	mov	r2, #10
   143e0:	ebfff2b2 	bl	10eb0 <strtol@plt>
   143e4:	e5870028 	str	r0, [r7, #40]	; 0x28
   143e8:	eafffdb1 	b	13ab4 <parse_config_file+0x108>
   143ec:	e28d0006 	add	r0, sp, #6
   143f0:	e3a0200a 	mov	r2, #10
   143f4:	ebfff2ad 	bl	10eb0 <strtol@plt>
   143f8:	e5870020 	str	r0, [r7, #32]
   143fc:	eafffda6 	b	13a9c <parse_config_file+0xf0>
   14400:	e28d000b 	add	r0, sp, #11
   14404:	e3a0200a 	mov	r2, #10
   14408:	ebfff2a8 	bl	10eb0 <strtol@plt>
   1440c:	e5870018 	str	r0, [r7, #24]
   14410:	eafffd9b 	b	13a84 <parse_config_file+0xd8>
   14414:	e28d0005 	add	r0, sp, #5
   14418:	e3a0200a 	mov	r2, #10
   1441c:	ebfff2a3 	bl	10eb0 <strtol@plt>
   14420:	e5870000 	str	r0, [r7]
   14424:	eafffd8a 	b	13a54 <parse_config_file+0xa8>
   14428:	e28d0005 	add	r0, sp, #5
   1442c:	e3a0200a 	mov	r2, #10
   14430:	ebfff29e 	bl	10eb0 <strtol@plt>
   14434:	e5870010 	str	r0, [r7, #16]
   14438:	eafffd8b 	b	13a6c <parse_config_file+0xc0>
   1443c:	e59f3198 	ldr	r3, [pc, #408]	; 145dc <parse_config_file+0xc30>
   14440:	e59f1198 	ldr	r1, [pc, #408]	; 145e0 <parse_config_file+0xc34>
   14444:	e59f200c 	ldr	r2, [pc, #12]	; 14458 <parse_config_file+0xaac>
   14448:	e5930000 	ldr	r0, [r3]
   1444c:	ebfff30c 	bl	11084 <fprintf@plt>
   14450:	e3a00001 	mov	r0, #1
   14454:	eafffec1 	b	13f60 <parse_config_file+0x5b4>
   14458:	0002b360 	.word	0x0002b360
   1445c:	0001a71c 	.word	0x0001a71c
   14460:	0002d174 	.word	0x0002d174
   14464:	0002d184 	.word	0x0002d184
   14468:	00019780 	.word	0x00019780
   1446c:	00019788 	.word	0x00019788
   14470:	00019790 	.word	0x00019790
   14474:	0001979c 	.word	0x0001979c
   14478:	000197a4 	.word	0x000197a4
   1447c:	000197b0 	.word	0x000197b0
   14480:	000197b8 	.word	0x000197b8
   14484:	000197c4 	.word	0x000197c4
   14488:	000197d8 	.word	0x000197d8
   1448c:	000197e4 	.word	0x000197e4
   14490:	000197f4 	.word	0x000197f4
   14494:	0001980c 	.word	0x0001980c
   14498:	00019820 	.word	0x00019820
   1449c:	00019838 	.word	0x00019838
   144a0:	00019850 	.word	0x00019850
   144a4:	00019858 	.word	0x00019858
   144a8:	00019860 	.word	0x00019860
   144ac:	0001986c 	.word	0x0001986c
   144b0:	00019878 	.word	0x00019878
   144b4:	00019884 	.word	0x00019884
   144b8:	00019890 	.word	0x00019890
   144bc:	00019898 	.word	0x00019898
   144c0:	000198a8 	.word	0x000198a8
   144c4:	000198b8 	.word	0x000198b8
   144c8:	000198c8 	.word	0x000198c8
   144cc:	000198d8 	.word	0x000198d8
   144d0:	000198e8 	.word	0x000198e8
   144d4:	000198f8 	.word	0x000198f8
   144d8:	00019908 	.word	0x00019908
   144dc:	00019918 	.word	0x00019918
   144e0:	00019928 	.word	0x00019928
   144e4:	00019938 	.word	0x00019938
   144e8:	00019948 	.word	0x00019948
   144ec:	00019958 	.word	0x00019958
   144f0:	00019968 	.word	0x00019968
   144f4:	00019978 	.word	0x00019978
   144f8:	00019988 	.word	0x00019988
   144fc:	00019990 	.word	0x00019990
   14500:	00019998 	.word	0x00019998
   14504:	000199a8 	.word	0x000199a8
   14508:	000199b8 	.word	0x000199b8
   1450c:	000199c8 	.word	0x000199c8
   14510:	000199d8 	.word	0x000199d8
   14514:	000199f8 	.word	0x000199f8
   14518:	00019a0c 	.word	0x00019a0c
   1451c:	00019a18 	.word	0x00019a18
   14520:	00019a24 	.word	0x00019a24
   14524:	00019a30 	.word	0x00019a30
   14528:	00019a3c 	.word	0x00019a3c
   1452c:	00019778 	.word	0x00019778
   14530:	0002b9cc 	.word	0x0002b9cc
   14534:	0002b9c0 	.word	0x0002b9c0
   14538:	0002b3b4 	.word	0x0002b3b4
   1453c:	0002b3b8 	.word	0x0002b3b8
   14540:	0002b9c4 	.word	0x0002b9c4
   14544:	0002b3b0 	.word	0x0002b3b0
   14548:	0002b9ac 	.word	0x0002b9ac
   1454c:	0002d0ec 	.word	0x0002d0ec
   14550:	0002b9a4 	.word	0x0002b9a4
   14554:	000199e8 	.word	0x000199e8
   14558:	0002bdcc 	.word	0x0002bdcc
   1455c:	0002c1cc 	.word	0x0002c1cc
   14560:	0002c5cc 	.word	0x0002c5cc
   14564:	0002c9cc 	.word	0x0002c9cc
   14568:	0002ce9c 	.word	0x0002ce9c
   1456c:	0002ce90 	.word	0x0002ce90
   14570:	0002cf48 	.word	0x0002cf48
   14574:	0002cf3c 	.word	0x0002cf3c
   14578:	0002b478 	.word	0x0002b478
   1457c:	0002b428 	.word	0x0002b428
   14580:	0002b3d8 	.word	0x0002b3d8
   14584:	0002b57c 	.word	0x0002b57c
   14588:	0002b52c 	.word	0x0002b52c
   1458c:	0002b4dc 	.word	0x0002b4dc
   14590:	0002b680 	.word	0x0002b680
   14594:	0002b630 	.word	0x0002b630
   14598:	0002b5e0 	.word	0x0002b5e0
   1459c:	0002ce40 	.word	0x0002ce40
   145a0:	0002cdf0 	.word	0x0002cdf0
   145a4:	0002d044 	.word	0x0002d044
   145a8:	0002cff4 	.word	0x0002cff4
   145ac:	0002b72c 	.word	0x0002b72c
   145b0:	0002b6dc 	.word	0x0002b6dc
   145b4:	0002b3c4 	.word	0x0002b3c4
   145b8:	0002b4c8 	.word	0x0002b4c8
   145bc:	0002b5cc 	.word	0x0002b5cc
   145c0:	0002b77c 	.word	0x0002b77c
   145c4:	0002b7b0 	.word	0x0002b7b0
   145c8:	0002b7e4 	.word	0x0002b7e4
   145cc:	0002b818 	.word	0x0002b818
   145d0:	0002b84c 	.word	0x0002b84c
   145d4:	0002d09c 	.word	0x0002d09c
   145d8:	0002b850 	.word	0x0002b850
   145dc:	0002b990 	.word	0x0002b990
   145e0:	0001975c 	.word	0x0001975c

000145e4 <usage>:
   145e4:	e92d4008 	push	{r3, lr}
   145e8:	e1a01000 	mov	r1, r0
   145ec:	e59f000c 	ldr	r0, [pc, #12]	; 14600 <usage+0x1c>
   145f0:	ebfff234 	bl	10ec8 <printf@plt>
   145f4:	e59f0008 	ldr	r0, [pc, #8]	; 14604 <usage+0x20>
   145f8:	e8bd4008 	pop	{r3, lr}
   145fc:	eafff273 	b	10fd0 <puts@plt>
   14600:	00019a48 	.word	0x00019a48
   14604:	00019ad0 	.word	0x00019ad0

00014608 <parse_cmd_cfg>:
   14608:	e3500001 	cmp	r0, #1
   1460c:	da00002d 	ble	146c8 <parse_cmd_cfg+0xc0>
   14610:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14614:	e1a08000 	mov	r8, r0
   14618:	e59f90ac 	ldr	r9, [pc, #172]	; 146cc <parse_cmd_cfg+0xc4>
   1461c:	e1a04001 	mov	r4, r1
   14620:	e3a05001 	mov	r5, #1
   14624:	ea000004 	b	1463c <parse_cmd_cfg+0x34>
   14628:	e5b41008 	ldr	r1, [r4, #8]!
   1462c:	ebfff2af 	bl	110f0 <strncpy@plt>
   14630:	e1580005 	cmp	r8, r5
   14634:	e5c9704f 	strb	r7, [r9, #79]	; 0x4f
   14638:	da000017 	ble	1469c <parse_cmd_cfg+0x94>
   1463c:	e5946004 	ldr	r6, [r4, #4]
   14640:	e3a02002 	mov	r2, #2
   14644:	e59f0084 	ldr	r0, [pc, #132]	; 146d0 <parse_cmd_cfg+0xc8>
   14648:	e1a01006 	mov	r1, r6
   1464c:	ebfff2e0 	bl	111d4 <strncmp@plt>
   14650:	e2855002 	add	r5, r5, #2
   14654:	e3a0204f 	mov	r2, #79	; 0x4f
   14658:	e2507000 	subs	r7, r0, #0
   1465c:	e59f0068 	ldr	r0, [pc, #104]	; 146cc <parse_cmd_cfg+0xc4>
   14660:	0afffff0 	beq	14628 <parse_cmd_cfg+0x20>
   14664:	e59f0068 	ldr	r0, [pc, #104]	; 146d4 <parse_cmd_cfg+0xcc>
   14668:	e1a01006 	mov	r1, r6
   1466c:	e3a02002 	mov	r2, #2
   14670:	ebfff2d7 	bl	111d4 <strncmp@plt>
   14674:	e3500000 	cmp	r0, #0
   14678:	0a000009 	beq	146a4 <parse_cmd_cfg+0x9c>
   1467c:	e59f0054 	ldr	r0, [pc, #84]	; 146d8 <parse_cmd_cfg+0xd0>
   14680:	e1a01006 	mov	r1, r6
   14684:	e3a02002 	mov	r2, #2
   14688:	ebfff2d1 	bl	111d4 <strncmp@plt>
   1468c:	e3500000 	cmp	r0, #0
   14690:	1a000005 	bne	146ac <parse_cmd_cfg+0xa4>
   14694:	e3a00002 	mov	r0, #2
   14698:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1469c:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   146a0:	eafffcc1 	b	139ac <parse_config_file>
   146a4:	e3a00001 	mov	r0, #1
   146a8:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146ac:	e59f3028 	ldr	r3, [pc, #40]	; 146dc <parse_cmd_cfg+0xd4>
   146b0:	e1a02006 	mov	r2, r6
   146b4:	e59f1024 	ldr	r1, [pc, #36]	; 146e0 <parse_cmd_cfg+0xd8>
   146b8:	e5930000 	ldr	r0, [r3]
   146bc:	ebfff270 	bl	11084 <fprintf@plt>
   146c0:	e3a00001 	mov	r0, #1
   146c4:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146c8:	eafffcb7 	b	139ac <parse_config_file>
   146cc:	0002b360 	.word	0x0002b360
   146d0:	00019c28 	.word	0x00019c28
   146d4:	00019c2c 	.word	0x00019c2c
   146d8:	00019c30 	.word	0x00019c30
   146dc:	0002b990 	.word	0x0002b990
   146e0:	00019c34 	.word	0x00019c34

000146e4 <_crc_ibutton_update>:
   146e4:	e0200001 	eor	r0, r0, r1
   146e8:	e3100001 	tst	r0, #1
   146ec:	e1a000a0 	lsr	r0, r0, #1
   146f0:	e220308c 	eor	r3, r0, #140	; 0x8c
   146f4:	11a00003 	movne	r0, r3
   146f8:	e6ef0070 	uxtb	r0, r0
   146fc:	e3100001 	tst	r0, #1
   14700:	e1a000a0 	lsr	r0, r0, #1
   14704:	e220308c 	eor	r3, r0, #140	; 0x8c
   14708:	11a00003 	movne	r0, r3
   1470c:	e6ef0070 	uxtb	r0, r0
   14710:	e3100001 	tst	r0, #1
   14714:	e1a000a0 	lsr	r0, r0, #1
   14718:	e220308c 	eor	r3, r0, #140	; 0x8c
   1471c:	11a00003 	movne	r0, r3
   14720:	e6ef0070 	uxtb	r0, r0
   14724:	e3100001 	tst	r0, #1
   14728:	e1a000a0 	lsr	r0, r0, #1
   1472c:	e220308c 	eor	r3, r0, #140	; 0x8c
   14730:	11a00003 	movne	r0, r3
   14734:	e6ef0070 	uxtb	r0, r0
   14738:	e3100001 	tst	r0, #1
   1473c:	e1a000a0 	lsr	r0, r0, #1
   14740:	e220308c 	eor	r3, r0, #140	; 0x8c
   14744:	11a00003 	movne	r0, r3
   14748:	e6ef0070 	uxtb	r0, r0
   1474c:	e3100001 	tst	r0, #1
   14750:	e1a000a0 	lsr	r0, r0, #1
   14754:	e220308c 	eor	r3, r0, #140	; 0x8c
   14758:	11a00003 	movne	r0, r3
   1475c:	e6ef0070 	uxtb	r0, r0
   14760:	e3100001 	tst	r0, #1
   14764:	e1a000a0 	lsr	r0, r0, #1
   14768:	e220308c 	eor	r3, r0, #140	; 0x8c
   1476c:	11a00003 	movne	r0, r3
   14770:	e6ef0070 	uxtb	r0, r0
   14774:	e3100001 	tst	r0, #1
   14778:	e1a000a0 	lsr	r0, r0, #1
   1477c:	e220308c 	eor	r3, r0, #140	; 0x8c
   14780:	11a00003 	movne	r0, r3
   14784:	e6ef0070 	uxtb	r0, r0
   14788:	e12fff1e 	bx	lr

0001478c <land_connect>:
   1478c:	e92d4030 	push	{r4, r5, lr}
   14790:	e24dd014 	sub	sp, sp, #20
   14794:	e59f5224 	ldr	r5, [pc, #548]	; 149c0 <land_connect+0x234>
   14798:	e5954000 	ldr	r4, [r5]
   1479c:	e3540000 	cmp	r4, #0
   147a0:	1a000007 	bne	147c4 <land_connect+0x38>
   147a4:	e1a02004 	mov	r2, r4
   147a8:	e3a00002 	mov	r0, #2
   147ac:	e3a01001 	mov	r1, #1
   147b0:	ebfff278 	bl	11198 <socket@plt>
   147b4:	e3500000 	cmp	r0, #0
   147b8:	e1a04000 	mov	r4, r0
   147bc:	e5850000 	str	r0, [r5]
   147c0:	ba000042 	blt	148d0 <land_connect+0x144>
   147c4:	ebfff219 	bl	11030 <getpid@plt>
   147c8:	e3a01008 	mov	r1, #8
   147cc:	e1a02000 	mov	r2, r0
   147d0:	e1a00004 	mov	r0, r4
   147d4:	ebfff22d 	bl	11090 <fcntl@plt>
   147d8:	e3500000 	cmp	r0, #0
   147dc:	ba000046 	blt	148fc <land_connect+0x170>
   147e0:	e5950000 	ldr	r0, [r5]
   147e4:	e3a01003 	mov	r1, #3
   147e8:	ebfff228 	bl	11090 <fcntl@plt>
   147ec:	e59f41cc 	ldr	r4, [pc, #460]	; 149c0 <land_connect+0x234>
   147f0:	e3500000 	cmp	r0, #0
   147f4:	ba00004b 	blt	14928 <land_connect+0x19c>
   147f8:	e3802b0a 	orr	r2, r0, #10240	; 0x2800
   147fc:	e3a01004 	mov	r1, #4
   14800:	e5940000 	ldr	r0, [r4]
   14804:	ebfff221 	bl	11090 <fcntl@plt>
   14808:	e3500000 	cmp	r0, #0
   1480c:	ba000050 	blt	14954 <land_connect+0x1c8>
   14810:	e5940000 	ldr	r0, [r4]
   14814:	e3a0100a 	mov	r1, #10
   14818:	e3a0201d 	mov	r2, #29
   1481c:	ebfff21b 	bl	11090 <fcntl@plt>
   14820:	e3500000 	cmp	r0, #0
   14824:	ba000055 	blt	14980 <land_connect+0x1f4>
   14828:	e59f0194 	ldr	r0, [pc, #404]	; 149c4 <land_connect+0x238>
   1482c:	ebfff25f 	bl	111b0 <gethostbyname@plt>
   14830:	e3500000 	cmp	r0, #0
   14834:	0a00005c 	beq	149ac <land_connect+0x220>
   14838:	e59f2188 	ldr	r2, [pc, #392]	; 149c8 <land_connect+0x23c>
   1483c:	e5903010 	ldr	r3, [r0, #16]
   14840:	e3a0c002 	mov	ip, #2
   14844:	e5922000 	ldr	r2, [r2]
   14848:	e5931000 	ldr	r1, [r3]
   1484c:	e5940000 	ldr	r0, [r4]
   14850:	e6ff3072 	uxth	r3, r2
   14854:	e591e000 	ldr	lr, [r1]
   14858:	e1a03423 	lsr	r3, r3, #8
   1485c:	e1833402 	orr	r3, r3, r2, lsl #8
   14860:	e1a0100d 	mov	r1, sp
   14864:	e3a02010 	mov	r2, #16
   14868:	e58de004 	str	lr, [sp, #4]
   1486c:	e1cd30b2 	strh	r3, [sp, #2]
   14870:	e1cdc0b0 	strh	ip, [sp]
   14874:	ebfff268 	bl	1121c <connect@plt>
   14878:	e3500000 	cmp	r0, #0
   1487c:	a3a00000 	movge	r0, #0
   14880:	ba000001 	blt	1488c <land_connect+0x100>
   14884:	e28dd014 	add	sp, sp, #20
   14888:	e8bd8030 	pop	{r4, r5, pc}
   1488c:	ebfff208 	bl	110b4 <__errno_location@plt>
   14890:	e5904000 	ldr	r4, [r0]
   14894:	e2440072 	sub	r0, r4, #114	; 0x72
   14898:	e354006a 	cmp	r4, #106	; 0x6a
   1489c:	13500001 	cmpne	r0, #1
   148a0:	83a00001 	movhi	r0, #1
   148a4:	93a00000 	movls	r0, #0
   148a8:	9afffff5 	bls	14884 <land_connect+0xf8>
   148ac:	e1a00004 	mov	r0, r4
   148b0:	ebfff1cf 	bl	10ff4 <strerror@plt>
   148b4:	e1a02004 	mov	r2, r4
   148b8:	e59f110c 	ldr	r1, [pc, #268]	; 149cc <land_connect+0x240>
   148bc:	e1a03000 	mov	r3, r0
   148c0:	e3a0001b 	mov	r0, #27
   148c4:	ebfff227 	bl	11168 <syslog@plt>
   148c8:	e3e00000 	mvn	r0, #0
   148cc:	eaffffec 	b	14884 <land_connect+0xf8>
   148d0:	ebfff1f7 	bl	110b4 <__errno_location@plt>
   148d4:	e5904000 	ldr	r4, [r0]
   148d8:	e1a00004 	mov	r0, r4
   148dc:	ebfff1c4 	bl	10ff4 <strerror@plt>
   148e0:	e1a02004 	mov	r2, r4
   148e4:	e59f10e4 	ldr	r1, [pc, #228]	; 149d0 <land_connect+0x244>
   148e8:	e1a03000 	mov	r3, r0
   148ec:	e3a0001b 	mov	r0, #27
   148f0:	ebfff21c 	bl	11168 <syslog@plt>
   148f4:	e3e00000 	mvn	r0, #0
   148f8:	eaffffe1 	b	14884 <land_connect+0xf8>
   148fc:	ebfff1ec 	bl	110b4 <__errno_location@plt>
   14900:	e5904000 	ldr	r4, [r0]
   14904:	e1a00004 	mov	r0, r4
   14908:	ebfff1b9 	bl	10ff4 <strerror@plt>
   1490c:	e1a02004 	mov	r2, r4
   14910:	e59f10bc 	ldr	r1, [pc, #188]	; 149d4 <land_connect+0x248>
   14914:	e1a03000 	mov	r3, r0
   14918:	e3a0001b 	mov	r0, #27
   1491c:	ebfff211 	bl	11168 <syslog@plt>
   14920:	e3e00000 	mvn	r0, #0
   14924:	eaffffd6 	b	14884 <land_connect+0xf8>
   14928:	ebfff1e1 	bl	110b4 <__errno_location@plt>
   1492c:	e5904000 	ldr	r4, [r0]
   14930:	e1a00004 	mov	r0, r4
   14934:	ebfff1ae 	bl	10ff4 <strerror@plt>
   14938:	e1a02004 	mov	r2, r4
   1493c:	e59f1094 	ldr	r1, [pc, #148]	; 149d8 <land_connect+0x24c>
   14940:	e1a03000 	mov	r3, r0
   14944:	e3a0001b 	mov	r0, #27
   14948:	ebfff206 	bl	11168 <syslog@plt>
   1494c:	e3e00000 	mvn	r0, #0
   14950:	eaffffcb 	b	14884 <land_connect+0xf8>
   14954:	ebfff1d6 	bl	110b4 <__errno_location@plt>
   14958:	e5904000 	ldr	r4, [r0]
   1495c:	e1a00004 	mov	r0, r4
   14960:	ebfff1a3 	bl	10ff4 <strerror@plt>
   14964:	e1a02004 	mov	r2, r4
   14968:	e59f106c 	ldr	r1, [pc, #108]	; 149dc <land_connect+0x250>
   1496c:	e1a03000 	mov	r3, r0
   14970:	e3a0001b 	mov	r0, #27
   14974:	ebfff1fb 	bl	11168 <syslog@plt>
   14978:	e3e00000 	mvn	r0, #0
   1497c:	eaffffc0 	b	14884 <land_connect+0xf8>
   14980:	ebfff1cb 	bl	110b4 <__errno_location@plt>
   14984:	e5904000 	ldr	r4, [r0]
   14988:	e1a00004 	mov	r0, r4
   1498c:	ebfff198 	bl	10ff4 <strerror@plt>
   14990:	e1a02004 	mov	r2, r4
   14994:	e59f1044 	ldr	r1, [pc, #68]	; 149e0 <land_connect+0x254>
   14998:	e1a03000 	mov	r3, r0
   1499c:	e3a0001b 	mov	r0, #27
   149a0:	ebfff1f0 	bl	11168 <syslog@plt>
   149a4:	e3e00000 	mvn	r0, #0
   149a8:	eaffffb5 	b	14884 <land_connect+0xf8>
   149ac:	e3a0001b 	mov	r0, #27
   149b0:	e59f102c 	ldr	r1, [pc, #44]	; 149e4 <land_connect+0x258>
   149b4:	ebfff1eb 	bl	11168 <syslog@plt>
   149b8:	e3e00000 	mvn	r0, #0
   149bc:	eaffffb0 	b	14884 <land_connect+0xf8>
   149c0:	0002d098 	.word	0x0002d098
   149c4:	0002d09c 	.word	0x0002d09c
   149c8:	0002b84c 	.word	0x0002b84c
   149cc:	00019d10 	.word	0x00019d10
   149d0:	00019c4c 	.word	0x00019c4c
   149d4:	00019c68 	.word	0x00019c68
   149d8:	00019c8c 	.word	0x00019c8c
   149dc:	00019cb0 	.word	0x00019cb0
   149e0:	00019cd4 	.word	0x00019cd4
   149e4:	00019cf8 	.word	0x00019cf8

000149e8 <land_cmd>:
   149e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   149ec:	e24dd078 	sub	sp, sp, #120	; 0x78
   149f0:	e3a03068 	mov	r3, #104	; 0x68
   149f4:	e58d300c 	str	r3, [sp, #12]
   149f8:	e1a06000 	mov	r6, r0
   149fc:	ebfff194 	bl	11054 <strlen@plt>
   14a00:	e59f41a4 	ldr	r4, [pc, #420]	; 14bac <land_cmd+0x1c4>
   14a04:	e1a01006 	mov	r1, r6
   14a08:	e3a02064 	mov	r2, #100	; 0x64
   14a0c:	e6ef5070 	uxtb	r5, r0
   14a10:	e59f0198 	ldr	r0, [pc, #408]	; 14bb0 <land_cmd+0x1c8>
   14a14:	e5c45000 	strb	r5, [r4]
   14a18:	ebfff1b4 	bl	110f0 <strncpy@plt>
   14a1c:	e3550050 	cmp	r5, #80	; 0x50
   14a20:	e59f518c 	ldr	r5, [pc, #396]	; 14bb4 <land_cmd+0x1cc>
   14a24:	83a03050 	movhi	r3, #80	; 0x50
   14a28:	85c43000 	strbhi	r3, [r4]
   14a2c:	e5953004 	ldr	r3, [r5, #4]
   14a30:	e3530000 	cmp	r3, #0
   14a34:	0a000047 	beq	14b58 <land_cmd+0x170>
   14a38:	e59f7178 	ldr	r7, [pc, #376]	; 14bb8 <land_cmd+0x1d0>
   14a3c:	e59f8178 	ldr	r8, [pc, #376]	; 14bbc <land_cmd+0x1d4>
   14a40:	e28d300c 	add	r3, sp, #12
   14a44:	e58d3000 	str	r3, [sp]
   14a48:	e5970000 	ldr	r0, [r7]
   14a4c:	e28d3010 	add	r3, sp, #16
   14a50:	e3a01006 	mov	r1, #6
   14a54:	e3a0200b 	mov	r2, #11
   14a58:	ebfff150 	bl	10fa0 <getsockopt@plt>
   14a5c:	e5983000 	ldr	r3, [r8]
   14a60:	e3530002 	cmp	r3, #2
   14a64:	ca00003e 	bgt	14b64 <land_cmd+0x17c>
   14a68:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   14a6c:	e3530000 	cmp	r3, #0
   14a70:	1a00002e 	bne	14b30 <land_cmd+0x148>
   14a74:	e1a01006 	mov	r1, r6
   14a78:	e59f0140 	ldr	r0, [pc, #320]	; 14bc0 <land_cmd+0x1d8>
   14a7c:	e3a02050 	mov	r2, #80	; 0x50
   14a80:	ebfff19a 	bl	110f0 <strncpy@plt>
   14a84:	e59f5120 	ldr	r5, [pc, #288]	; 14bac <land_cmd+0x1c4>
   14a88:	e5d42000 	ldrb	r2, [r4]
   14a8c:	e3a03000 	mov	r3, #0
   14a90:	e5970000 	ldr	r0, [r7]
   14a94:	e2851004 	add	r1, r5, #4
   14a98:	ebfff1dc 	bl	11210 <send@plt>
   14a9c:	e5982000 	ldr	r2, [r8]
   14aa0:	e59f311c 	ldr	r3, [pc, #284]	; 14bc4 <land_cmd+0x1dc>
   14aa4:	e3520002 	cmp	r2, #2
   14aa8:	e3a0203c 	mov	r2, #60	; 0x3c
   14aac:	e5832000 	str	r2, [r3]
   14ab0:	da000015 	ble	14b0c <land_cmd+0x124>
   14ab4:	e3a03000 	mov	r3, #0
   14ab8:	e5c53053 	strb	r3, [r5, #83]	; 0x53
   14abc:	e3a0402e 	mov	r4, #46	; 0x2e
   14ac0:	ea000000 	b	14ac8 <land_cmd+0xe0>
   14ac4:	e5c04000 	strb	r4, [r0]
   14ac8:	e59f00f0 	ldr	r0, [pc, #240]	; 14bc0 <land_cmd+0x1d8>
   14acc:	e3a0100d 	mov	r1, #13
   14ad0:	ebfff168 	bl	11078 <strchr@plt>
   14ad4:	e3500000 	cmp	r0, #0
   14ad8:	1afffff9 	bne	14ac4 <land_cmd+0xdc>
   14adc:	e3a0405e 	mov	r4, #94	; 0x5e
   14ae0:	ea000000 	b	14ae8 <land_cmd+0x100>
   14ae4:	e5c04000 	strb	r4, [r0]
   14ae8:	e59f00d0 	ldr	r0, [pc, #208]	; 14bc0 <land_cmd+0x1d8>
   14aec:	e3a0100a 	mov	r1, #10
   14af0:	ebfff160 	bl	11078 <strchr@plt>
   14af4:	e3500000 	cmp	r0, #0
   14af8:	1afffff9 	bne	14ae4 <land_cmd+0xfc>
   14afc:	e3a0001f 	mov	r0, #31
   14b00:	e59f10c0 	ldr	r1, [pc, #192]	; 14bc8 <land_cmd+0x1e0>
   14b04:	e59f20b4 	ldr	r2, [pc, #180]	; 14bc0 <land_cmd+0x1d8>
   14b08:	ebfff196 	bl	11168 <syslog@plt>
   14b0c:	ebfff0ea 	bl	10ebc <pause@plt>
   14b10:	e28dd078 	add	sp, sp, #120	; 0x78
   14b14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b18:	e5983000 	ldr	r3, [r8]
   14b1c:	e3530002 	cmp	r3, #2
   14b20:	da000002 	ble	14b30 <land_cmd+0x148>
   14b24:	e3a0001f 	mov	r0, #31
   14b28:	e59f109c 	ldr	r1, [pc, #156]	; 14bcc <land_cmd+0x1e4>
   14b2c:	ebfff18d 	bl	11168 <syslog@plt>
   14b30:	e3a01002 	mov	r1, #2
   14b34:	e5970000 	ldr	r0, [r7]
   14b38:	ebfff181 	bl	11144 <shutdown@plt>
   14b3c:	e5970000 	ldr	r0, [r7]
   14b40:	ebfff1ac 	bl	111f8 <close@plt>
   14b44:	e59f306c 	ldr	r3, [pc, #108]	; 14bb8 <land_cmd+0x1d0>
   14b48:	e3500000 	cmp	r0, #0
   14b4c:	05830000 	streq	r0, [r3]
   14b50:	e3a03000 	mov	r3, #0
   14b54:	e5853004 	str	r3, [r5, #4]
   14b58:	ebffff0b 	bl	1478c <land_connect>
   14b5c:	e28dd078 	add	sp, sp, #120	; 0x78
   14b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b64:	e3a0001f 	mov	r0, #31
   14b68:	e59f1060 	ldr	r1, [pc, #96]	; 14bd0 <land_cmd+0x1e8>
   14b6c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   14b70:	ebfff17c 	bl	11168 <syslog@plt>
   14b74:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   14b78:	e3530000 	cmp	r3, #0
   14b7c:	1affffe5 	bne	14b18 <land_cmd+0x130>
   14b80:	e5985000 	ldr	r5, [r8]
   14b84:	e1a01006 	mov	r1, r6
   14b88:	e59f0030 	ldr	r0, [pc, #48]	; 14bc0 <land_cmd+0x1d8>
   14b8c:	e3a02050 	mov	r2, #80	; 0x50
   14b90:	ebfff156 	bl	110f0 <strncpy@plt>
   14b94:	e3550002 	cmp	r5, #2
   14b98:	daffffb9 	ble	14a84 <land_cmd+0x9c>
   14b9c:	e3a0001f 	mov	r0, #31
   14ba0:	e59f102c 	ldr	r1, [pc, #44]	; 14bd4 <land_cmd+0x1ec>
   14ba4:	ebfff16f 	bl	11168 <syslog@plt>
   14ba8:	eaffffb5 	b	14a84 <land_cmd+0x9c>
   14bac:	0002d0f8 	.word	0x0002d0f8
   14bb0:	0002d1c0 	.word	0x0002d1c0
   14bb4:	0002b850 	.word	0x0002b850
   14bb8:	0002d098 	.word	0x0002d098
   14bbc:	0002d0ec 	.word	0x0002d0ec
   14bc0:	0002d0fc 	.word	0x0002d0fc
   14bc4:	0002b908 	.word	0x0002b908
   14bc8:	00019d70 	.word	0x00019d70
   14bcc:	00019d4c 	.word	0x00019d4c
   14bd0:	00019d34 	.word	0x00019d34
   14bd4:	00019d60 	.word	0x00019d60

00014bd8 <land_clear>:
   14bd8:	e59f3090 	ldr	r3, [pc, #144]	; 14c70 <land_clear+0x98>
   14bdc:	e92d4010 	push	{r4, lr}
   14be0:	e24dd050 	sub	sp, sp, #80	; 0x50
   14be4:	e5930000 	ldr	r0, [r3]
   14be8:	e3a0204f 	mov	r2, #79	; 0x4f
   14bec:	e3a03901 	mov	r3, #16384	; 0x4000
   14bf0:	e1a0100d 	mov	r1, sp
   14bf4:	ebfff17c 	bl	111ec <recv@plt>
   14bf8:	e59f2074 	ldr	r2, [pc, #116]	; 14c74 <land_clear+0x9c>
   14bfc:	e3a03000 	mov	r3, #0
   14c00:	e5922000 	ldr	r2, [r2]
   14c04:	e3520002 	cmp	r2, #2
   14c08:	e28d2050 	add	r2, sp, #80	; 0x50
   14c0c:	c3a0402e 	movgt	r4, #46	; 0x2e
   14c10:	e0820000 	add	r0, r2, r0
   14c14:	e5403050 	strb	r3, [r0, #-80]	; 0xffffffb0
   14c18:	ca000001 	bgt	14c24 <land_clear+0x4c>
   14c1c:	ea000011 	b	14c68 <land_clear+0x90>
   14c20:	e5c04000 	strb	r4, [r0]
   14c24:	e1a0000d 	mov	r0, sp
   14c28:	e3a0100d 	mov	r1, #13
   14c2c:	ebfff111 	bl	11078 <strchr@plt>
   14c30:	e3500000 	cmp	r0, #0
   14c34:	1afffff9 	bne	14c20 <land_clear+0x48>
   14c38:	e3a0405e 	mov	r4, #94	; 0x5e
   14c3c:	ea000000 	b	14c44 <land_clear+0x6c>
   14c40:	e5c04000 	strb	r4, [r0]
   14c44:	e1a0000d 	mov	r0, sp
   14c48:	e3a0100a 	mov	r1, #10
   14c4c:	ebfff109 	bl	11078 <strchr@plt>
   14c50:	e3500000 	cmp	r0, #0
   14c54:	1afffff9 	bne	14c40 <land_clear+0x68>
   14c58:	e1a0200d 	mov	r2, sp
   14c5c:	e3a0001f 	mov	r0, #31
   14c60:	e59f1010 	ldr	r1, [pc, #16]	; 14c78 <land_clear+0xa0>
   14c64:	ebfff13f 	bl	11168 <syslog@plt>
   14c68:	e28dd050 	add	sp, sp, #80	; 0x50
   14c6c:	e8bd8010 	pop	{r4, pc}
   14c70:	0002d098 	.word	0x0002d098
   14c74:	0002d0ec 	.word	0x0002d0ec
   14c78:	00019d88 	.word	0x00019d88

00014c7c <land_close>:
   14c7c:	e92d4010 	push	{r4, lr}
   14c80:	e3a01002 	mov	r1, #2
   14c84:	e59f4018 	ldr	r4, [pc, #24]	; 14ca4 <land_close+0x28>
   14c88:	e5940000 	ldr	r0, [r4]
   14c8c:	ebfff12c 	bl	11144 <shutdown@plt>
   14c90:	e5940000 	ldr	r0, [r4]
   14c94:	ebfff157 	bl	111f8 <close@plt>
   14c98:	e3500000 	cmp	r0, #0
   14c9c:	05840000 	streq	r0, [r4]
   14ca0:	e8bd8010 	pop	{r4, pc}
   14ca4:	0002d098 	.word	0x0002d098

00014ca8 <sig_alarm_h>:
   14ca8:	e59f2030 	ldr	r2, [pc, #48]	; 14ce0 <sig_alarm_h+0x38>
   14cac:	e5923000 	ldr	r3, [r2]
   14cb0:	e3530000 	cmp	r3, #0
   14cb4:	c2433001 	subgt	r3, r3, #1
   14cb8:	c5823000 	strgt	r3, [r2]
   14cbc:	e59f2020 	ldr	r2, [pc, #32]	; 14ce4 <sig_alarm_h+0x3c>
   14cc0:	e5923000 	ldr	r3, [r2]
   14cc4:	e2833001 	add	r3, r3, #1
   14cc8:	e3530005 	cmp	r3, #5
   14ccc:	c3a01000 	movgt	r1, #0
   14cd0:	c3a03001 	movgt	r3, #1
   14cd4:	d5823000 	strle	r3, [r2]
   14cd8:	c882000a 	stmgt	r2, {r1, r3}
   14cdc:	e12fff1e 	bx	lr
   14ce0:	0002b900 	.word	0x0002b900
   14ce4:	0002d14c 	.word	0x0002d14c

00014ce8 <sigsegv_action>:
   14ce8:	e92d4070 	push	{r4, r5, r6, lr}
   14cec:	e1a04001 	mov	r4, r1
   14cf0:	e5913008 	ldr	r3, [r1, #8]
   14cf4:	e24dd008 	sub	sp, sp, #8
   14cf8:	e1a06000 	mov	r6, r0
   14cfc:	e5910000 	ldr	r0, [r1]
   14d00:	e591100c 	ldr	r1, [r1, #12]
   14d04:	e1a05002 	mov	r5, r2
   14d08:	e58d1000 	str	r1, [sp]
   14d0c:	e1a02000 	mov	r2, r0
   14d10:	e59f1024 	ldr	r1, [pc, #36]	; 14d3c <sigsegv_action+0x54>
   14d14:	e3a0001f 	mov	r0, #31
   14d18:	ebfff112 	bl	11168 <syslog@plt>
   14d1c:	e59f301c 	ldr	r3, [pc, #28]	; 14d40 <sigsegv_action+0x58>
   14d20:	e1a00006 	mov	r0, r6
   14d24:	e1a01004 	mov	r1, r4
   14d28:	e1a02005 	mov	r2, r5
   14d2c:	e5933000 	ldr	r3, [r3]
   14d30:	e28dd008 	add	sp, sp, #8
   14d34:	e8bd4070 	pop	{r4, r5, r6, lr}
   14d38:	e12fff13 	bx	r3
   14d3c:	00019da0 	.word	0x00019da0
   14d40:	0002d224 	.word	0x0002d224

00014d44 <sig_term_h>:
   14d44:	e59f3058 	ldr	r3, [pc, #88]	; 14da4 <sig_term_h+0x60>
   14d48:	e92d4010 	push	{r4, lr}
   14d4c:	e5934000 	ldr	r4, [r3]
   14d50:	e3540000 	cmp	r4, #0
   14d54:	0a000005 	beq	14d70 <sig_term_h+0x2c>
   14d58:	e5940000 	ldr	r0, [r4]
   14d5c:	e3a0100f 	mov	r1, #15
   14d60:	ebfff082 	bl	10f70 <killpg@plt>
   14d64:	e5944008 	ldr	r4, [r4, #8]
   14d68:	e3540000 	cmp	r4, #0
   14d6c:	1afffff9 	bne	14d58 <sig_term_h+0x14>
   14d70:	e3a00000 	mov	r0, #0
   14d74:	e1a01000 	mov	r1, r0
   14d78:	e1a02000 	mov	r2, r0
   14d7c:	ebfff0de 	bl	110fc <wait3@plt>
   14d80:	e3500000 	cmp	r0, #0
   14d84:	cafffff9 	bgt	14d70 <sig_term_h+0x2c>
   14d88:	ebfff973 	bl	1335c <spi_release>
   14d8c:	ebffffba 	bl	14c7c <land_close>
   14d90:	e3a0001e 	mov	r0, #30
   14d94:	e59f100c 	ldr	r1, [pc, #12]	; 14da8 <sig_term_h+0x64>
   14d98:	ebfff0f2 	bl	11168 <syslog@plt>
   14d9c:	e3a00000 	mov	r0, #0
   14da0:	ebfff0a5 	bl	1103c <exit@plt>
   14da4:	0002cdd0 	.word	0x0002cdd0
   14da8:	00019dc8 	.word	0x00019dc8

00014dac <fifo_action>:
   14dac:	e92d4030 	push	{r4, r5, lr}
   14db0:	e1a04001 	mov	r4, r1
   14db4:	e59f513c 	ldr	r5, [pc, #316]	; 14ef8 <fifo_action+0x14c>
   14db8:	e24dd00c 	sub	sp, sp, #12
   14dbc:	e5953000 	ldr	r3, [r5]
   14dc0:	e3530002 	cmp	r3, #2
   14dc4:	1a00000b 	bne	14df8 <fifo_action+0x4c>
   14dc8:	e59f312c 	ldr	r3, [pc, #300]	; 14efc <fifo_action+0x150>
   14dcc:	e5911010 	ldr	r1, [r1, #16]
   14dd0:	e5933000 	ldr	r3, [r3]
   14dd4:	e1510003 	cmp	r1, r3
   14dd8:	0a000006 	beq	14df8 <fifo_action+0x4c>
   14ddc:	e594000c 	ldr	r0, [r4, #12]
   14de0:	e5942000 	ldr	r2, [r4]
   14de4:	e5943008 	ldr	r3, [r4, #8]
   14de8:	e88d0003 	stm	sp, {r0, r1}
   14dec:	e3a0001f 	mov	r0, #31
   14df0:	e59f1108 	ldr	r1, [pc, #264]	; 14f00 <fifo_action+0x154>
   14df4:	ebfff0db 	bl	11168 <syslog@plt>
   14df8:	e5943000 	ldr	r3, [r4]
   14dfc:	e353001d 	cmp	r3, #29
   14e00:	0a000001 	beq	14e0c <fifo_action+0x60>
   14e04:	e28dd00c 	add	sp, sp, #12
   14e08:	e8bd8030 	pop	{r4, r5, pc}
   14e0c:	e59f20f0 	ldr	r2, [pc, #240]	; 14f04 <fifo_action+0x158>
   14e10:	e5943010 	ldr	r3, [r4, #16]
   14e14:	e5922000 	ldr	r2, [r2]
   14e18:	e1530002 	cmp	r3, r2
   14e1c:	0a000021 	beq	14ea8 <fifo_action+0xfc>
   14e20:	e59f20d4 	ldr	r2, [pc, #212]	; 14efc <fifo_action+0x150>
   14e24:	e5922000 	ldr	r2, [r2]
   14e28:	e3520000 	cmp	r2, #0
   14e2c:	e0623003 	rsb	r3, r2, r3
   14e30:	e16f3f13 	clz	r3, r3
   14e34:	e1a032a3 	lsr	r3, r3, #5
   14e38:	d3a03000 	movle	r3, #0
   14e3c:	e3530000 	cmp	r3, #0
   14e40:	0affffef 	beq	14e04 <fifo_action+0x58>
   14e44:	e5943008 	ldr	r3, [r4, #8]
   14e48:	e2433001 	sub	r3, r3, #1
   14e4c:	e3530005 	cmp	r3, #5
   14e50:	8affffeb 	bhi	14e04 <fifo_action+0x58>
   14e54:	e3a02001 	mov	r2, #1
   14e58:	e1a03312 	lsl	r3, r2, r3
   14e5c:	e3130015 	tst	r3, #21
   14e60:	1a000014 	bne	14eb8 <fifo_action+0x10c>
   14e64:	e3130028 	tst	r3, #40	; 0x28
   14e68:	1a000015 	bne	14ec4 <fifo_action+0x118>
   14e6c:	e3130002 	tst	r3, #2
   14e70:	0affffe3 	beq	14e04 <fifo_action+0x58>
   14e74:	e59f308c 	ldr	r3, [pc, #140]	; 14f08 <fifo_action+0x15c>
   14e78:	e59f108c 	ldr	r1, [pc, #140]	; 14f0c <fifo_action+0x160>
   14e7c:	e1a00003 	mov	r0, r3
   14e80:	e5832004 	str	r2, [r3, #4]
   14e84:	eb00042a 	bl	15f34 <MS_most_sensor_check>
   14e88:	e5953000 	ldr	r3, [r5]
   14e8c:	e3530001 	cmp	r3, #1
   14e90:	daffffdb 	ble	14e04 <fifo_action+0x58>
   14e94:	e59f1074 	ldr	r1, [pc, #116]	; 14f10 <fifo_action+0x164>
   14e98:	e3a0001f 	mov	r0, #31
   14e9c:	e28dd00c 	add	sp, sp, #12
   14ea0:	e8bd4030 	pop	{r4, r5, lr}
   14ea4:	eafff0af 	b	11168 <syslog@plt>
   14ea8:	e59f3064 	ldr	r3, [pc, #100]	; 14f14 <fifo_action+0x168>
   14eac:	e3a02001 	mov	r2, #1
   14eb0:	e5832000 	str	r2, [r3]
   14eb4:	eaffffd2 	b	14e04 <fifo_action+0x58>
   14eb8:	e28dd00c 	add	sp, sp, #12
   14ebc:	e8bd4030 	pop	{r4, r5, lr}
   14ec0:	eaffff44 	b	14bd8 <land_clear>
   14ec4:	e59f003c 	ldr	r0, [pc, #60]	; 14f08 <fifo_action+0x15c>
   14ec8:	e5903004 	ldr	r3, [r0, #4]
   14ecc:	e3530000 	cmp	r3, #0
   14ed0:	0a000005 	beq	14eec <fifo_action+0x140>
   14ed4:	e5953000 	ldr	r3, [r5]
   14ed8:	e3530001 	cmp	r3, #1
   14edc:	daffffc8 	ble	14e04 <fifo_action+0x58>
   14ee0:	e3a0001f 	mov	r0, #31
   14ee4:	e59f102c 	ldr	r1, [pc, #44]	; 14f18 <fifo_action+0x16c>
   14ee8:	eaffffeb 	b	14e9c <fifo_action+0xf0>
   14eec:	e59f1028 	ldr	r1, [pc, #40]	; 14f1c <fifo_action+0x170>
   14ef0:	eb00040f 	bl	15f34 <MS_most_sensor_check>
   14ef4:	eafffff6 	b	14ed4 <fifo_action+0x128>
   14ef8:	0002d0ec 	.word	0x0002d0ec
   14efc:	0002d098 	.word	0x0002d098
   14f00:	00019de4 	.word	0x00019de4
   14f04:	0002d0f0 	.word	0x0002d0f0
   14f08:	0002b850 	.word	0x0002b850
   14f0c:	00019e10 	.word	0x00019e10
   14f10:	00019e20 	.word	0x00019e20
   14f14:	0002d0f4 	.word	0x0002d0f4
   14f18:	00019e44 	.word	0x00019e44
   14f1c:	00019e38 	.word	0x00019e38

00014f20 <write_mode>:
   14f20:	e92d4010 	push	{r4, lr}
   14f24:	e3a01041 	mov	r1, #65	; 0x41
   14f28:	e59f007c 	ldr	r0, [pc, #124]	; 14fac <write_mode+0x8c>
   14f2c:	ebfff039 	bl	11018 <open@plt>
   14f30:	e2504000 	subs	r4, r0, #0
   14f34:	ba000006 	blt	14f54 <write_mode+0x34>
   14f38:	e59f1070 	ldr	r1, [pc, #112]	; 14fb0 <write_mode+0x90>
   14f3c:	e3a02004 	mov	r2, #4
   14f40:	ebfff070 	bl	11108 <write@plt>
   14f44:	e3500004 	cmp	r0, #4
   14f48:	0a00000a 	beq	14f78 <write_mode+0x58>
   14f4c:	e3a00001 	mov	r0, #1
   14f50:	e8bd8010 	pop	{r4, pc}
   14f54:	ebfff056 	bl	110b4 <__errno_location@plt>
   14f58:	e5900000 	ldr	r0, [r0]
   14f5c:	ebfff024 	bl	10ff4 <strerror@plt>
   14f60:	e59f104c 	ldr	r1, [pc, #76]	; 14fb4 <write_mode+0x94>
   14f64:	e1a02000 	mov	r2, r0
   14f68:	e3a0001b 	mov	r0, #27
   14f6c:	ebfff07d 	bl	11168 <syslog@plt>
   14f70:	e3a00001 	mov	r0, #1
   14f74:	e8bd8010 	pop	{r4, pc}
   14f78:	e1a00004 	mov	r0, r4
   14f7c:	ebfff09d 	bl	111f8 <close@plt>
   14f80:	e59f3030 	ldr	r3, [pc, #48]	; 14fb8 <write_mode+0x98>
   14f84:	e5933000 	ldr	r3, [r3]
   14f88:	e3530001 	cmp	r3, #1
   14f8c:	da000004 	ble	14fa4 <write_mode+0x84>
   14f90:	e3a0001f 	mov	r0, #31
   14f94:	e59f1020 	ldr	r1, [pc, #32]	; 14fbc <write_mode+0x9c>
   14f98:	ebfff072 	bl	11168 <syslog@plt>
   14f9c:	e3a00000 	mov	r0, #0
   14fa0:	e8bd8010 	pop	{r4, pc}
   14fa4:	e3a00000 	mov	r0, #0
   14fa8:	e8bd8010 	pop	{r4, pc}
   14fac:	00019e60 	.word	0x00019e60
   14fb0:	0002cdcc 	.word	0x0002cdcc
   14fb4:	00019e78 	.word	0x00019e78
   14fb8:	0002d0ec 	.word	0x0002d0ec
   14fbc:	00019eb0 	.word	0x00019eb0

00014fc0 <create_landing_color.constprop.5>:
   14fc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14fc4:	e24dd044 	sub	sp, sp, #68	; 0x44
   14fc8:	e59f5210 	ldr	r5, [pc, #528]	; 151e0 <create_landing_color.constprop.5+0x220>
   14fcc:	e1a04000 	mov	r4, r0
   14fd0:	e59f120c 	ldr	r1, [pc, #524]	; 151e4 <create_landing_color.constprop.5+0x224>
   14fd4:	e1a0000d 	mov	r0, sp
   14fd8:	e59f2208 	ldr	r2, [pc, #520]	; 151e8 <create_landing_color.constprop.5+0x228>
   14fdc:	ebfff064 	bl	11174 <sprintf@plt>
   14fe0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   14fe4:	e3530000 	cmp	r3, #0
   14fe8:	1a000036 	bne	150c8 <create_landing_color.constprop.5+0x108>
   14fec:	e5953020 	ldr	r3, [r5, #32]
   14ff0:	e3530000 	cmp	r3, #0
   14ff4:	0a00004f 	beq	15138 <create_landing_color.constprop.5+0x178>
   14ff8:	e59f01ec 	ldr	r0, [pc, #492]	; 151ec <create_landing_color.constprop.5+0x22c>
   14ffc:	e59fc1ec 	ldr	ip, [pc, #492]	; 151f0 <create_landing_color.constprop.5+0x230>
   15000:	e59f11ec 	ldr	r1, [pc, #492]	; 151f4 <create_landing_color.constprop.5+0x234>
   15004:	e59f21ec 	ldr	r2, [pc, #492]	; 151f8 <create_landing_color.constprop.5+0x238>
   15008:	e59f31ec 	ldr	r3, [pc, #492]	; 151fc <create_landing_color.constprop.5+0x23c>
   1500c:	e5900000 	ldr	r0, [r0]
   15010:	e59c6000 	ldr	r6, [ip]
   15014:	e5911000 	ldr	r1, [r1]
   15018:	e593e000 	ldr	lr, [r3]
   1501c:	e0666000 	rsb	r6, r6, r0
   15020:	e5922000 	ldr	r2, [r2]
   15024:	e2811002 	add	r1, r1, #2
   15028:	e1560001 	cmp	r6, r1
   1502c:	d3a06000 	movle	r6, #0
   15030:	c3a06001 	movgt	r6, #1
   15034:	e152000e 	cmp	r2, lr
   15038:	a3a0e000 	movge	lr, #0
   1503c:	b3a0e001 	movlt	lr, #1
   15040:	e59f51b8 	ldr	r5, [pc, #440]	; 15200 <create_landing_color.constprop.5+0x240>
   15044:	e5d52009 	ldrb	r2, [r5, #9]
   15048:	e18ee006 	orr	lr, lr, r6
   1504c:	e59f11ac 	ldr	r1, [pc, #428]	; 15200 <create_landing_color.constprop.5+0x240>
   15050:	e6ef307e 	uxtb	r3, lr
   15054:	e1520003 	cmp	r2, r3
   15058:	01a03002 	moveq	r3, r2
   1505c:	15c13009 	strbne	r3, [r1, #9]
   15060:	13a04001 	movne	r4, #1
   15064:	e3530000 	cmp	r3, #0
   15068:	0a000009 	beq	15094 <create_landing_color.constprop.5+0xd4>
   1506c:	e59f3190 	ldr	r3, [pc, #400]	; 15204 <create_landing_color.constprop.5+0x244>
   15070:	e28d200b 	add	r2, sp, #11
   15074:	e283c032 	add	ip, r3, #50	; 0x32
   15078:	e5f31001 	ldrb	r1, [r3, #1]!
   1507c:	e2822001 	add	r2, r2, #1
   15080:	e20100df 	and	r0, r1, #223	; 0xdf
   15084:	e3500058 	cmp	r0, #88	; 0x58
   15088:	15421001 	strbne	r1, [r2, #-1]
   1508c:	e153000c 	cmp	r3, ip
   15090:	1afffff8 	bne	15078 <create_landing_color.constprop.5+0xb8>
   15094:	e59f316c 	ldr	r3, [pc, #364]	; 15208 <create_landing_color.constprop.5+0x248>
   15098:	e5d5200a 	ldrb	r2, [r5, #10]
   1509c:	e59f115c 	ldr	r1, [pc, #348]	; 15200 <create_landing_color.constprop.5+0x240>
   150a0:	e5d33000 	ldrb	r3, [r3]
   150a4:	e2033002 	and	r3, r3, #2
   150a8:	e6ef3073 	uxtb	r3, r3
   150ac:	e1520003 	cmp	r2, r3
   150b0:	0a000028 	beq	15158 <create_landing_color.constprop.5+0x198>
   150b4:	e3530000 	cmp	r3, #0
   150b8:	e5c1300a 	strb	r3, [r1, #10]
   150bc:	0a000021 	beq	15148 <create_landing_color.constprop.5+0x188>
   150c0:	e3a04001 	mov	r4, #1
   150c4:	ea000025 	b	15160 <create_landing_color.constprop.5+0x1a0>
   150c8:	eb00067b 	bl	16abc <PWR_get_wc_lamp>
   150cc:	e5957020 	ldr	r7, [r5, #32]
   150d0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   150d4:	e3570000 	cmp	r7, #0
   150d8:	1a00002b 	bne	1518c <create_landing_color.constprop.5+0x1cc>
   150dc:	e3530000 	cmp	r3, #0
   150e0:	0a000014 	beq	15138 <create_landing_color.constprop.5+0x178>
   150e4:	e1a0e007 	mov	lr, r7
   150e8:	e1a06007 	mov	r6, r7
   150ec:	e59f510c 	ldr	r5, [pc, #268]	; 15200 <create_landing_color.constprop.5+0x240>
   150f0:	e5d53008 	ldrb	r3, [r5, #8]
   150f4:	e1530000 	cmp	r3, r0
   150f8:	13a04001 	movne	r4, #1
   150fc:	15c50008 	strbne	r0, [r5, #8]
   15100:	e3500000 	cmp	r0, #0
   15104:	0a000009 	beq	15130 <create_landing_color.constprop.5+0x170>
   15108:	e59f30fc 	ldr	r3, [pc, #252]	; 1520c <create_landing_color.constprop.5+0x24c>
   1510c:	e28d200b 	add	r2, sp, #11
   15110:	e283c032 	add	ip, r3, #50	; 0x32
   15114:	e5f31001 	ldrb	r1, [r3, #1]!
   15118:	e2822001 	add	r2, r2, #1
   1511c:	e20100df 	and	r0, r1, #223	; 0xdf
   15120:	e3500058 	cmp	r0, #88	; 0x58
   15124:	15421001 	strbne	r1, [r2, #-1]
   15128:	e153000c 	cmp	r3, ip
   1512c:	1afffff8 	bne	15114 <create_landing_color.constprop.5+0x154>
   15130:	e3570000 	cmp	r7, #0
   15134:	1affffc2 	bne	15044 <create_landing_color.constprop.5+0x84>
   15138:	e3540000 	cmp	r4, #0
   1513c:	1a000001 	bne	15148 <create_landing_color.constprop.5+0x188>
   15140:	e28dd044 	add	sp, sp, #68	; 0x44
   15144:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15148:	e1a0000d 	mov	r0, sp
   1514c:	ebfffe25 	bl	149e8 <land_cmd>
   15150:	e28dd044 	add	sp, sp, #68	; 0x44
   15154:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15158:	e3520000 	cmp	r2, #0
   1515c:	0afffff5 	beq	15138 <create_landing_color.constprop.5+0x178>
   15160:	e59f30a8 	ldr	r3, [pc, #168]	; 15210 <create_landing_color.constprop.5+0x250>
   15164:	e28d200b 	add	r2, sp, #11
   15168:	e283c032 	add	ip, r3, #50	; 0x32
   1516c:	e5f31001 	ldrb	r1, [r3, #1]!
   15170:	e2822001 	add	r2, r2, #1
   15174:	e20100df 	and	r0, r1, #223	; 0xdf
   15178:	e3500058 	cmp	r0, #88	; 0x58
   1517c:	15421001 	strbne	r1, [r2, #-1]
   15180:	e153000c 	cmp	r3, ip
   15184:	1afffff8 	bne	1516c <create_landing_color.constprop.5+0x1ac>
   15188:	eaffffea 	b	15138 <create_landing_color.constprop.5+0x178>
   1518c:	e59fc058 	ldr	ip, [pc, #88]	; 151ec <create_landing_color.constprop.5+0x22c>
   15190:	e59f5058 	ldr	r5, [pc, #88]	; 151f0 <create_landing_color.constprop.5+0x230>
   15194:	e59f1058 	ldr	r1, [pc, #88]	; 151f4 <create_landing_color.constprop.5+0x234>
   15198:	e59f2058 	ldr	r2, [pc, #88]	; 151f8 <create_landing_color.constprop.5+0x238>
   1519c:	e59fe058 	ldr	lr, [pc, #88]	; 151fc <create_landing_color.constprop.5+0x23c>
   151a0:	e59cc000 	ldr	ip, [ip]
   151a4:	e5956000 	ldr	r6, [r5]
   151a8:	e5911000 	ldr	r1, [r1]
   151ac:	e59ee000 	ldr	lr, [lr]
   151b0:	e066600c 	rsb	r6, r6, ip
   151b4:	e5922000 	ldr	r2, [r2]
   151b8:	e2811002 	add	r1, r1, #2
   151bc:	e1560001 	cmp	r6, r1
   151c0:	d3a06000 	movle	r6, #0
   151c4:	c3a06001 	movgt	r6, #1
   151c8:	e152000e 	cmp	r2, lr
   151cc:	a3a0e000 	movge	lr, #0
   151d0:	b3a0e001 	movlt	lr, #1
   151d4:	e3530000 	cmp	r3, #0
   151d8:	1affffc3 	bne	150ec <create_landing_color.constprop.5+0x12c>
   151dc:	eaffff97 	b	15040 <create_landing_color.constprop.5+0x80>
   151e0:	0002d184 	.word	0x0002d184
   151e4:	00019ed8 	.word	0x00019ed8
   151e8:	0002b818 	.word	0x0002b818
   151ec:	0002b9c4 	.word	0x0002b9c4
   151f0:	0002b9c8 	.word	0x0002b9c8
   151f4:	0002b3b4 	.word	0x0002b3b4
   151f8:	0002b9bc 	.word	0x0002b9bc
   151fc:	0002b9c0 	.word	0x0002b9c0
   15200:	0002d14c 	.word	0x0002d14c
   15204:	0002b7af 	.word	0x0002b7af
   15208:	0002b9bb 	.word	0x0002b9bb
   1520c:	0002b7e3 	.word	0x0002b7e3
   15210:	0002b77b 	.word	0x0002b77b

00015214 <check_duplicate>:
   15214:	e92d4010 	push	{r4, lr}
   15218:	e3a01041 	mov	r1, #65	; 0x41
   1521c:	e24dd010 	sub	sp, sp, #16
   15220:	e59f0090 	ldr	r0, [pc, #144]	; 152b8 <check_duplicate+0xa4>
   15224:	ebffef7b 	bl	11018 <open@plt>
   15228:	e3a01002 	mov	r1, #2
   1522c:	e3a02000 	mov	r2, #0
   15230:	e1a04000 	mov	r4, r0
   15234:	ebffefa7 	bl	110d8 <lockf@plt>
   15238:	e3500000 	cmp	r0, #0
   1523c:	a3a00000 	movge	r0, #0
   15240:	ba000001 	blt	1524c <check_duplicate+0x38>
   15244:	e28dd010 	add	sp, sp, #16
   15248:	e8bd8010 	pop	{r4, pc}
   1524c:	e3a03000 	mov	r3, #0
   15250:	e1a0200d 	mov	r2, sp
   15254:	e3a01005 	mov	r1, #5
   15258:	e1a00004 	mov	r0, r4
   1525c:	e58d3000 	str	r3, [sp]
   15260:	e58d3004 	str	r3, [sp, #4]
   15264:	e58d3008 	str	r3, [sp, #8]
   15268:	e58d300c 	str	r3, [sp, #12]
   1526c:	ebffef87 	bl	11090 <fcntl@plt>
   15270:	ebffef8f 	bl	110b4 <__errno_location@plt>
   15274:	e1a04000 	mov	r4, r0
   15278:	e5900000 	ldr	r0, [r0]
   1527c:	ebffef5c 	bl	10ff4 <strerror@plt>
   15280:	e59d200c 	ldr	r2, [sp, #12]
   15284:	e1a01000 	mov	r1, r0
   15288:	e59f002c 	ldr	r0, [pc, #44]	; 152bc <check_duplicate+0xa8>
   1528c:	ebffef0d 	bl	10ec8 <printf@plt>
   15290:	e5940000 	ldr	r0, [r4]
   15294:	ebffef56 	bl	10ff4 <strerror@plt>
   15298:	e59f1020 	ldr	r1, [pc, #32]	; 152c0 <check_duplicate+0xac>
   1529c:	e59d300c 	ldr	r3, [sp, #12]
   152a0:	e1a02000 	mov	r2, r0
   152a4:	e3a0001b 	mov	r0, #27
   152a8:	ebffefae 	bl	11168 <syslog@plt>
   152ac:	e3a00001 	mov	r0, #1
   152b0:	e28dd010 	add	sp, sp, #16
   152b4:	e8bd8010 	pop	{r4, pc}
   152b8:	00019ee8 	.word	0x00019ee8
   152bc:	00019ef8 	.word	0x00019ef8
   152c0:	00019f20 	.word	0x00019f20

000152c4 <set_sigact>:
   152c4:	e92d4030 	push	{r4, r5, lr}
   152c8:	e24ddf47 	sub	sp, sp, #284	; 0x11c
   152cc:	e59f3064 	ldr	r3, [pc, #100]	; 15338 <set_sigact+0x74>
   152d0:	e28d4f46 	add	r4, sp, #280	; 0x118
   152d4:	e28d0004 	add	r0, sp, #4
   152d8:	e5243118 	str	r3, [r4, #-280]!	; 0xfffffee8
   152dc:	e3a05004 	mov	r5, #4
   152e0:	ebffef9a 	bl	11150 <sigemptyset@plt>
   152e4:	e1a01004 	mov	r1, r4
   152e8:	e3a0001d 	mov	r0, #29
   152ec:	e3a02000 	mov	r2, #0
   152f0:	e58d5084 	str	r5, [sp, #132]	; 0x84
   152f4:	ebffef23 	bl	10f88 <sigaction@plt>
   152f8:	e3500000 	cmp	r0, #0
   152fc:	b3a00001 	movlt	r0, #1
   15300:	ba00000a 	blt	15330 <set_sigact+0x6c>
   15304:	e59f3030 	ldr	r3, [pc, #48]	; 1533c <set_sigact+0x78>
   15308:	e28d4f46 	add	r4, sp, #280	; 0x118
   1530c:	e28d0090 	add	r0, sp, #144	; 0x90
   15310:	e524308c 	str	r3, [r4, #-140]!	; 0xffffff74
   15314:	ebffef8d 	bl	11150 <sigemptyset@plt>
   15318:	e1a01004 	mov	r1, r4
   1531c:	e3a0000b 	mov	r0, #11
   15320:	e59f2018 	ldr	r2, [pc, #24]	; 15340 <set_sigact+0x7c>
   15324:	e58d5110 	str	r5, [sp, #272]	; 0x110
   15328:	ebffef16 	bl	10f88 <sigaction@plt>
   1532c:	e1a00fa0 	lsr	r0, r0, #31
   15330:	e28ddf47 	add	sp, sp, #284	; 0x11c
   15334:	e8bd8030 	pop	{r4, r5, pc}
   15338:	00014dac 	.word	0x00014dac
   1533c:	00014ce8 	.word	0x00014ce8
   15340:	0002d224 	.word	0x0002d224

00015344 <create_fifo>:
   15344:	e92d4038 	push	{r3, r4, r5, lr}
   15348:	e3a00049 	mov	r0, #73	; 0x49
   1534c:	ebffef94 	bl	111a4 <umask@plt>
   15350:	e59f00a8 	ldr	r0, [pc, #168]	; 15400 <create_fifo+0xbc>
   15354:	ebffeeff 	bl	10f58 <unlink@plt>
   15358:	e59f00a0 	ldr	r0, [pc, #160]	; 15400 <create_fifo+0xbc>
   1535c:	e59f10a0 	ldr	r1, [pc, #160]	; 15404 <create_fifo+0xc0>
   15360:	ebffefa7 	bl	11204 <mkfifo@plt>
   15364:	e3500000 	cmp	r0, #0
   15368:	0a000001 	beq	15374 <create_fifo+0x30>
   1536c:	e3a00001 	mov	r0, #1
   15370:	e8bd8038 	pop	{r3, r4, r5, pc}
   15374:	e59f0084 	ldr	r0, [pc, #132]	; 15400 <create_fifo+0xbc>
   15378:	e3a01d21 	mov	r1, #2112	; 0x840
   1537c:	e59f2080 	ldr	r2, [pc, #128]	; 15404 <create_fifo+0xc0>
   15380:	ebffef24 	bl	11018 <open@plt>
   15384:	e59f507c 	ldr	r5, [pc, #124]	; 15408 <create_fifo+0xc4>
   15388:	e3500000 	cmp	r0, #0
   1538c:	e1a04000 	mov	r4, r0
   15390:	e5850000 	str	r0, [r5]
   15394:	bafffff4 	blt	1536c <create_fifo+0x28>
   15398:	ebffef24 	bl	11030 <getpid@plt>
   1539c:	e3a01008 	mov	r1, #8
   153a0:	e1a02000 	mov	r2, r0
   153a4:	e1a00004 	mov	r0, r4
   153a8:	ebffef38 	bl	11090 <fcntl@plt>
   153ac:	e3500000 	cmp	r0, #0
   153b0:	baffffed 	blt	1536c <create_fifo+0x28>
   153b4:	e5950000 	ldr	r0, [r5]
   153b8:	e3a01003 	mov	r1, #3
   153bc:	ebffef33 	bl	11090 <fcntl@plt>
   153c0:	e3500000 	cmp	r0, #0
   153c4:	baffffe8 	blt	1536c <create_fifo+0x28>
   153c8:	e3802a02 	orr	r2, r0, #8192	; 0x2000
   153cc:	e3a01004 	mov	r1, #4
   153d0:	e5950000 	ldr	r0, [r5]
   153d4:	ebffef2d 	bl	11090 <fcntl@plt>
   153d8:	e3500000 	cmp	r0, #0
   153dc:	baffffe2 	blt	1536c <create_fifo+0x28>
   153e0:	e5950000 	ldr	r0, [r5]
   153e4:	e3a0100a 	mov	r1, #10
   153e8:	e3a0201d 	mov	r2, #29
   153ec:	ebffef27 	bl	11090 <fcntl@plt>
   153f0:	e3500000 	cmp	r0, #0
   153f4:	baffffdc 	blt	1536c <create_fifo+0x28>
   153f8:	e8bd4038 	pop	{r3, r4, r5, lr}
   153fc:	eaffffb0 	b	152c4 <set_sigact>
   15400:	00019f44 	.word	0x00019f44
   15404:	000001ff 	.word	0x000001ff
   15408:	0002d0f0 	.word	0x0002d0f0
   1540c:	00000000 	.word	0x00000000

00015410 <MS_get_main_on_off>:
   15410:	e92d4010 	push	{r4, lr}
   15414:	e24dd010 	sub	sp, sp, #16
   15418:	e28d1010 	add	r1, sp, #16
   1541c:	e3a03010 	mov	r3, #16
   15420:	e1a04000 	mov	r4, r0
   15424:	e5613010 	strb	r3, [r1, #-16]!
   15428:	e59f004c 	ldr	r0, [pc, #76]	; 1547c <MS_get_main_on_off+0x6c>
   1542c:	e3a0200f 	mov	r2, #15
   15430:	ebfff820 	bl	134b8 <spi_read>
   15434:	e3500000 	cmp	r0, #0
   15438:	1a00000a 	bne	15468 <MS_get_main_on_off+0x58>
   1543c:	e28d3010 	add	r3, sp, #16
   15440:	e533200f 	ldr	r2, [r3, #-15]!
   15444:	e5842000 	str	r2, [r4]
   15448:	e5d3100c 	ldrb	r1, [r3, #12]
   1544c:	e5932004 	ldr	r2, [r3, #4]
   15450:	e5933008 	ldr	r3, [r3, #8]
   15454:	e5c4100c 	strb	r1, [r4, #12]
   15458:	e5842004 	str	r2, [r4, #4]
   1545c:	e5843008 	str	r3, [r4, #8]
   15460:	e28dd010 	add	sp, sp, #16
   15464:	e8bd8010 	pop	{r4, pc}
   15468:	e3a0001b 	mov	r0, #27
   1546c:	e59f100c 	ldr	r1, [pc, #12]	; 15480 <MS_get_main_on_off+0x70>
   15470:	ebffef3c 	bl	11168 <syslog@plt>
   15474:	e28dd010 	add	sp, sp, #16
   15478:	e8bd8010 	pop	{r4, pc}
   1547c:	0002d19c 	.word	0x0002d19c
   15480:	0001a5b0 	.word	0x0001a5b0

00015484 <MS_set_main_on_off>:
   15484:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15488:	e24dd00c 	sub	sp, sp, #12
   1548c:	e3a02002 	mov	r2, #2
   15490:	e5cd0004 	strb	r0, [sp, #4]
   15494:	e5cd1005 	strb	r1, [sp, #5]
   15498:	e59f0028 	ldr	r0, [pc, #40]	; 154c8 <MS_set_main_on_off+0x44>
   1549c:	e28d1004 	add	r1, sp, #4
   154a0:	ebfff854 	bl	135f8 <spi_write>
   154a4:	e3500000 	cmp	r0, #0
   154a8:	1a000001 	bne	154b4 <MS_set_main_on_off+0x30>
   154ac:	e28dd00c 	add	sp, sp, #12
   154b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   154b4:	e3a0001b 	mov	r0, #27
   154b8:	e59f100c 	ldr	r1, [pc, #12]	; 154cc <MS_set_main_on_off+0x48>
   154bc:	ebffef29 	bl	11168 <syslog@plt>
   154c0:	e28dd00c 	add	sp, sp, #12
   154c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   154c8:	0002d19c 	.word	0x0002d19c
   154cc:	0001a5d0 	.word	0x0001a5d0

000154d0 <MS_get_main_sens>:
   154d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154d4:	e24dd00c 	sub	sp, sp, #12
   154d8:	e28d1008 	add	r1, sp, #8
   154dc:	e3a03000 	mov	r3, #0
   154e0:	e5613008 	strb	r3, [r1, #-8]!
   154e4:	e59f015c 	ldr	r0, [pc, #348]	; 15648 <MS_get_main_sens+0x178>
   154e8:	e3a02006 	mov	r2, #6
   154ec:	ebfff7f1 	bl	134b8 <spi_read>
   154f0:	e3500000 	cmp	r0, #0
   154f4:	1a00004e 	bne	15634 <MS_get_main_sens+0x164>
   154f8:	e5dd3001 	ldrb	r3, [sp, #1]
   154fc:	e3130040 	tst	r3, #64	; 0x40
   15500:	1a000041 	bne	1560c <MS_get_main_sens+0x13c>
   15504:	e5ddc003 	ldrb	ip, [sp, #3]
   15508:	e59f113c 	ldr	r1, [pc, #316]	; 1564c <MS_get_main_sens+0x17c>
   1550c:	e59f713c 	ldr	r7, [pc, #316]	; 15650 <MS_get_main_sens+0x180>
   15510:	e5dd2002 	ldrb	r2, [sp, #2]
   15514:	e1a0b1ac 	lsr	fp, ip, #3
   15518:	e5d18000 	ldrb	r8, [r1]
   1551c:	e1a0af0c 	lsl	sl, ip, #30
   15520:	e1a09e8c 	lsl	r9, ip, #29
   15524:	e1a0022c 	lsr	r0, ip, #4
   15528:	e1a012ac 	lsr	r1, ip, #5
   1552c:	e20bb002 	and	fp, fp, #2
   15530:	e20cc001 	and	ip, ip, #1
   15534:	e59f5118 	ldr	r5, [pc, #280]	; 15654 <MS_get_main_sens+0x184>
   15538:	e08bc00c 	add	ip, fp, ip
   1553c:	e59f6114 	ldr	r6, [pc, #276]	; 15658 <MS_get_main_sens+0x188>
   15540:	e587c00c 	str	ip, [r7, #12]
   15544:	e2011002 	and	r1, r1, #2
   15548:	e203c001 	and	ip, r3, #1
   1554c:	e59fe108 	ldr	lr, [pc, #264]	; 1565c <MS_get_main_sens+0x18c>
   15550:	e0811fa9 	add	r1, r1, r9, lsr #31
   15554:	e587c004 	str	ip, [r7, #4]
   15558:	e2000002 	and	r0, r0, #2
   1555c:	e1a0c0a3 	lsr	ip, r3, #1
   15560:	e59f40f8 	ldr	r4, [pc, #248]	; 15660 <MS_get_main_sens+0x190>
   15564:	e0800faa 	add	r0, r0, sl, lsr #31
   15568:	e585100c 	str	r1, [r5, #12]
   1556c:	e20cc001 	and	ip, ip, #1
   15570:	e1a01122 	lsr	r1, r2, #2
   15574:	e586000c 	str	r0, [r6, #12]
   15578:	e586c004 	str	ip, [r6, #4]
   1557c:	e1a00123 	lsr	r0, r3, #2
   15580:	e1a060a2 	lsr	r6, r2, #1
   15584:	e1a0c1a2 	lsr	ip, r2, #3
   15588:	e2011001 	and	r1, r1, #1
   1558c:	e3580000 	cmp	r8, #0
   15590:	e59fb0cc 	ldr	fp, [pc, #204]	; 15664 <MS_get_main_sens+0x194>
   15594:	e59fa0cc 	ldr	sl, [pc, #204]	; 15668 <MS_get_main_sens+0x198>
   15598:	e59f90cc 	ldr	r9, [pc, #204]	; 1566c <MS_get_main_sens+0x19c>
   1559c:	e59f80cc 	ldr	r8, [pc, #204]	; 15670 <MS_get_main_sens+0x1a0>
   155a0:	e2000001 	and	r0, r0, #1
   155a4:	e2066001 	and	r6, r6, #1
   155a8:	e20cc001 	and	ip, ip, #1
   155ac:	e58e1004 	str	r1, [lr, #4]
   155b0:	e59f10bc 	ldr	r1, [pc, #188]	; 15674 <MS_get_main_sens+0x1a4>
   155b4:	e5850004 	str	r0, [r5, #4]
   155b8:	e5846000 	str	r6, [r4]
   155bc:	e1a05323 	lsr	r5, r3, #6
   155c0:	e1a002a3 	lsr	r0, r3, #5
   155c4:	e1a06223 	lsr	r6, r3, #4
   155c8:	e584c004 	str	ip, [r4, #4]
   155cc:	e1a0c1a3 	lsr	ip, r3, #3
   155d0:	e2055001 	and	r5, r5, #1
   155d4:	e2000001 	and	r0, r0, #1
   155d8:	e2066001 	and	r6, r6, #1
   155dc:	e20cc001 	and	ip, ip, #1
   155e0:	e1a033a3 	lsr	r3, r3, #7
   155e4:	11a02222 	lsrne	r2, r2, #4
   155e8:	02022001 	andeq	r2, r2, #1
   155ec:	e58b5004 	str	r5, [fp, #4]
   155f0:	e58a0004 	str	r0, [sl, #4]
   155f4:	e5896004 	str	r6, [r9, #4]
   155f8:	e588c004 	str	ip, [r8, #4]
   155fc:	e5813004 	str	r3, [r1, #4]
   15600:	e58e2000 	str	r2, [lr]
   15604:	e28dd00c 	add	sp, sp, #12
   15608:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1560c:	e3a0001f 	mov	r0, #31
   15610:	e59f1060 	ldr	r1, [pc, #96]	; 15678 <MS_get_main_sens+0x1a8>
   15614:	e5dd2000 	ldrb	r2, [sp]
   15618:	ebffeed2 	bl	11168 <syslog@plt>
   1561c:	e3a0001f 	mov	r0, #31
   15620:	e59f1054 	ldr	r1, [pc, #84]	; 1567c <MS_get_main_sens+0x1ac>
   15624:	e5dd2001 	ldrb	r2, [sp, #1]
   15628:	ebffeece 	bl	11168 <syslog@plt>
   1562c:	e5dd3001 	ldrb	r3, [sp, #1]
   15630:	eaffffb3 	b	15504 <MS_get_main_sens+0x34>
   15634:	e3a0001b 	mov	r0, #27
   15638:	e59f1040 	ldr	r1, [pc, #64]	; 15680 <MS_get_main_sens+0x1b0>
   1563c:	ebffeec9 	bl	11168 <syslog@plt>
   15640:	e28dd00c 	add	sp, sp, #12
   15644:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15648:	0002d19c 	.word	0x0002d19c
   1564c:	0002d094 	.word	0x0002d094
   15650:	0002b5cc 	.word	0x0002b5cc
   15654:	0002b3c4 	.word	0x0002b3c4
   15658:	0002b4c8 	.word	0x0002b4c8
   1565c:	0002cddc 	.word	0x0002cddc
   15660:	0002cdd4 	.word	0x0002cdd4
   15664:	0002cfe8 	.word	0x0002cfe8
   15668:	0002ce90 	.word	0x0002ce90
   1566c:	0002cf3c 	.word	0x0002cf3c
   15670:	0002cde4 	.word	0x0002cde4
   15674:	0002b6d0 	.word	0x0002b6d0
   15678:	0001a608 	.word	0x0001a608
   1567c:	0001a620 	.word	0x0001a620
   15680:	0001a5f0 	.word	0x0001a5f0

00015684 <MS_get_door_mode>:
   15684:	e92d4010 	push	{r4, lr}
   15688:	e24dd008 	sub	sp, sp, #8
   1568c:	e28d1008 	add	r1, sp, #8
   15690:	e3a03004 	mov	r3, #4
   15694:	e1a04000 	mov	r4, r0
   15698:	e5613004 	strb	r3, [r1, #-4]!
   1569c:	e59f0034 	ldr	r0, [pc, #52]	; 156d8 <MS_get_door_mode+0x54>
   156a0:	e3a02003 	mov	r2, #3
   156a4:	ebfff783 	bl	134b8 <spi_read>
   156a8:	e3500000 	cmp	r0, #0
   156ac:	1a000003 	bne	156c0 <MS_get_door_mode+0x3c>
   156b0:	e5dd3005 	ldrb	r3, [sp, #5]
   156b4:	e5c43000 	strb	r3, [r4]
   156b8:	e28dd008 	add	sp, sp, #8
   156bc:	e8bd8010 	pop	{r4, pc}
   156c0:	e3a0001b 	mov	r0, #27
   156c4:	e59f1010 	ldr	r1, [pc, #16]	; 156dc <MS_get_door_mode+0x58>
   156c8:	ebffeea6 	bl	11168 <syslog@plt>
   156cc:	e3a00001 	mov	r0, #1
   156d0:	e28dd008 	add	sp, sp, #8
   156d4:	e8bd8010 	pop	{r4, pc}
   156d8:	0002d19c 	.word	0x0002d19c
   156dc:	0001a638 	.word	0x0001a638

000156e0 <MS_get_debug8>:
   156e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156e4:	e24dd00c 	sub	sp, sp, #12
   156e8:	e28d1008 	add	r1, sp, #8
   156ec:	e3a03005 	mov	r3, #5
   156f0:	e5613004 	strb	r3, [r1, #-4]!
   156f4:	e59f0098 	ldr	r0, [pc, #152]	; 15794 <MS_get_debug8+0xb4>
   156f8:	e3a02003 	mov	r2, #3
   156fc:	ebfff76d 	bl	134b8 <spi_read>
   15700:	e2506000 	subs	r6, r0, #0
   15704:	1a000016 	bne	15764 <MS_get_debug8+0x84>
   15708:	e59f4088 	ldr	r4, [pc, #136]	; 15798 <MS_get_debug8+0xb8>
   1570c:	e5940000 	ldr	r0, [r4]
   15710:	e3500000 	cmp	r0, #0
   15714:	0a000019 	beq	15780 <MS_get_debug8+0xa0>
   15718:	e5dd2005 	ldrb	r2, [sp, #5]
   1571c:	e59f1078 	ldr	r1, [pc, #120]	; 1579c <MS_get_debug8+0xbc>
   15720:	ebffee57 	bl	11084 <fprintf@plt>
   15724:	e5940000 	ldr	r0, [r4]
   15728:	ebffedef 	bl	10eec <fflush@plt>
   1572c:	e5945000 	ldr	r5, [r4]
   15730:	e1a00005 	mov	r0, r5
   15734:	ebffee76 	bl	11114 <fileno@plt>
   15738:	e1a07000 	mov	r7, r0
   1573c:	e1a00005 	mov	r0, r5
   15740:	ebffedfb 	bl	10f34 <ftell@plt>
   15744:	e1a01000 	mov	r1, r0
   15748:	e1a00007 	mov	r0, r7
   1574c:	ebffee73 	bl	11120 <ftruncate@plt>
   15750:	e5940000 	ldr	r0, [r4]
   15754:	ebffedfc 	bl	10f4c <rewind@plt>
   15758:	e1a00006 	mov	r0, r6
   1575c:	e28dd00c 	add	sp, sp, #12
   15760:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15764:	e3a0001b 	mov	r0, #27
   15768:	e59f1030 	ldr	r1, [pc, #48]	; 157a0 <MS_get_debug8+0xc0>
   1576c:	ebffee7d 	bl	11168 <syslog@plt>
   15770:	e3a06001 	mov	r6, #1
   15774:	e1a00006 	mov	r0, r6
   15778:	e28dd00c 	add	sp, sp, #12
   1577c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15780:	e59f001c 	ldr	r0, [pc, #28]	; 157a4 <MS_get_debug8+0xc4>
   15784:	e59f101c 	ldr	r1, [pc, #28]	; 157a8 <MS_get_debug8+0xc8>
   15788:	ebffedd1 	bl	10ed4 <fopen@plt>
   1578c:	e5840000 	str	r0, [r4]
   15790:	eaffffe0 	b	15718 <MS_get_debug8+0x38>
   15794:	0002d19c 	.word	0x0002d19c
   15798:	0002d158 	.word	0x0002d158
   1579c:	0001a67c 	.word	0x0001a67c
   157a0:	0001a650 	.word	0x0001a650
   157a4:	0001a664 	.word	0x0001a664
   157a8:	0001a678 	.word	0x0001a678

000157ac <MS_store_sens_to_file>:
   157ac:	e92d4070 	push	{r4, r5, r6, lr}
   157b0:	e59f03dc 	ldr	r0, [pc, #988]	; 15b94 <MS_store_sens_to_file+0x3e8>
   157b4:	e59f13dc 	ldr	r1, [pc, #988]	; 15b98 <MS_store_sens_to_file+0x3ec>
   157b8:	ebffedc5 	bl	10ed4 <fopen@plt>
   157bc:	e2504000 	subs	r4, r0, #0
   157c0:	0a0000eb 	beq	15b74 <MS_store_sens_to_file+0x3c8>
   157c4:	e59f33d0 	ldr	r3, [pc, #976]	; 15b9c <MS_store_sens_to_file+0x3f0>
   157c8:	e59f63d0 	ldr	r6, [pc, #976]	; 15ba0 <MS_store_sens_to_file+0x3f4>
   157cc:	e59f53d0 	ldr	r5, [pc, #976]	; 15ba4 <MS_store_sens_to_file+0x3f8>
   157d0:	e5932004 	ldr	r2, [r3, #4]
   157d4:	e5933000 	ldr	r3, [r3]
   157d8:	e59f13c8 	ldr	r1, [pc, #968]	; 15ba8 <MS_store_sens_to_file+0x3fc>
   157dc:	e1520003 	cmp	r2, r3
   157e0:	01a02006 	moveq	r2, r6
   157e4:	11a02005 	movne	r2, r5
   157e8:	ebffee25 	bl	11084 <fprintf@plt>
   157ec:	e59f33b8 	ldr	r3, [pc, #952]	; 15bac <MS_store_sens_to_file+0x400>
   157f0:	e59f13b8 	ldr	r1, [pc, #952]	; 15bb0 <MS_store_sens_to_file+0x404>
   157f4:	e1a00004 	mov	r0, r4
   157f8:	e5932004 	ldr	r2, [r3, #4]
   157fc:	e5933000 	ldr	r3, [r3]
   15800:	e1520003 	cmp	r2, r3
   15804:	01a02006 	moveq	r2, r6
   15808:	11a02005 	movne	r2, r5
   1580c:	ebffee1c 	bl	11084 <fprintf@plt>
   15810:	e59f339c 	ldr	r3, [pc, #924]	; 15bb4 <MS_store_sens_to_file+0x408>
   15814:	e59f139c 	ldr	r1, [pc, #924]	; 15bb8 <MS_store_sens_to_file+0x40c>
   15818:	e1a00004 	mov	r0, r4
   1581c:	e5932004 	ldr	r2, [r3, #4]
   15820:	e5933000 	ldr	r3, [r3]
   15824:	e1520003 	cmp	r2, r3
   15828:	01a02006 	moveq	r2, r6
   1582c:	11a02005 	movne	r2, r5
   15830:	ebffee13 	bl	11084 <fprintf@plt>
   15834:	e59f1380 	ldr	r1, [pc, #896]	; 15bbc <MS_store_sens_to_file+0x410>
   15838:	e591300c 	ldr	r3, [r1, #12]
   1583c:	e3530002 	cmp	r3, #2
   15840:	0a0000b7 	beq	15b24 <MS_store_sens_to_file+0x378>
   15844:	e3530003 	cmp	r3, #3
   15848:	0a00005b 	beq	159bc <MS_store_sens_to_file+0x210>
   1584c:	e3530001 	cmp	r3, #1
   15850:	da0000b8 	ble	15b38 <MS_store_sens_to_file+0x38c>
   15854:	e59f1364 	ldr	r1, [pc, #868]	; 15bc0 <MS_store_sens_to_file+0x414>
   15858:	e591300c 	ldr	r3, [r1, #12]
   1585c:	e3530002 	cmp	r3, #2
   15860:	0a000061 	beq	159ec <MS_store_sens_to_file+0x240>
   15864:	e3530003 	cmp	r3, #3
   15868:	0a000041 	beq	15974 <MS_store_sens_to_file+0x1c8>
   1586c:	e3530001 	cmp	r3, #1
   15870:	da0000b5 	ble	15b4c <MS_store_sens_to_file+0x3a0>
   15874:	e59f1348 	ldr	r1, [pc, #840]	; 15bc4 <MS_store_sens_to_file+0x418>
   15878:	e591300c 	ldr	r3, [r1, #12]
   1587c:	e3530002 	cmp	r3, #2
   15880:	0a000048 	beq	159a8 <MS_store_sens_to_file+0x1fc>
   15884:	e3530003 	cmp	r3, #3
   15888:	0a00002f 	beq	1594c <MS_store_sens_to_file+0x1a0>
   1588c:	e3530001 	cmp	r3, #1
   15890:	da0000b2 	ble	15b60 <MS_store_sens_to_file+0x3b4>
   15894:	e59f332c 	ldr	r3, [pc, #812]	; 15bc8 <MS_store_sens_to_file+0x41c>
   15898:	e5d33000 	ldrb	r3, [r3]
   1589c:	e3530000 	cmp	r3, #0
   158a0:	1a00001c 	bne	15918 <MS_store_sens_to_file+0x16c>
   158a4:	e59f1320 	ldr	r1, [pc, #800]	; 15bcc <MS_store_sens_to_file+0x420>
   158a8:	e59f3320 	ldr	r3, [pc, #800]	; 15bd0 <MS_store_sens_to_file+0x424>
   158ac:	e59f2320 	ldr	r2, [pc, #800]	; 15bd4 <MS_store_sens_to_file+0x428>
   158b0:	e5911000 	ldr	r1, [r1]
   158b4:	e1a00004 	mov	r0, r4
   158b8:	e3510000 	cmp	r1, #0
   158bc:	01a02003 	moveq	r2, r3
   158c0:	e59f1310 	ldr	r1, [pc, #784]	; 15bd8 <MS_store_sens_to_file+0x42c>
   158c4:	ebffedee 	bl	11084 <fprintf@plt>
   158c8:	e59f130c 	ldr	r1, [pc, #780]	; 15bdc <MS_store_sens_to_file+0x430>
   158cc:	e59f32fc 	ldr	r3, [pc, #764]	; 15bd0 <MS_store_sens_to_file+0x424>
   158d0:	e59f22fc 	ldr	r2, [pc, #764]	; 15bd4 <MS_store_sens_to_file+0x428>
   158d4:	e5911000 	ldr	r1, [r1]
   158d8:	e1a00004 	mov	r0, r4
   158dc:	e3510000 	cmp	r1, #0
   158e0:	01a02003 	moveq	r2, r3
   158e4:	e59f12f4 	ldr	r1, [pc, #756]	; 15be0 <MS_store_sens_to_file+0x434>
   158e8:	ebffede5 	bl	11084 <fprintf@plt>
   158ec:	e59f32f0 	ldr	r3, [pc, #752]	; 15be4 <MS_store_sens_to_file+0x438>
   158f0:	e5932000 	ldr	r2, [r3]
   158f4:	e3520005 	cmp	r2, #5
   158f8:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   158fc:	ea000084 	b	15b14 <MS_store_sens_to_file+0x368>
   15900:	00015a8c 	.word	0x00015a8c
   15904:	00015a74 	.word	0x00015a74
   15908:	00015a5c 	.word	0x00015a5c
   1590c:	00015a44 	.word	0x00015a44
   15910:	00015a2c 	.word	0x00015a2c
   15914:	00015a00 	.word	0x00015a00
   15918:	e59f32ac 	ldr	r3, [pc, #684]	; 15bcc <MS_store_sens_to_file+0x420>
   1591c:	e5932000 	ldr	r2, [r3]
   15920:	e2423008 	sub	r3, r2, #8
   15924:	e3530006 	cmp	r3, #6
   15928:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1592c:	ea000074 	b	15b04 <MS_store_sens_to_file+0x358>
   15930:	00015aec 	.word	0x00015aec
   15934:	00015b04 	.word	0x00015b04
   15938:	00015ad4 	.word	0x00015ad4
   1593c:	00015b04 	.word	0x00015b04
   15940:	00015abc 	.word	0x00015abc
   15944:	00015b04 	.word	0x00015b04
   15948:	00015aa4 	.word	0x00015aa4
   1594c:	e8911004 	ldm	r1, {r2, ip}
   15950:	e59f324c 	ldr	r3, [pc, #588]	; 15ba4 <MS_store_sens_to_file+0x3f8>
   15954:	e59f1244 	ldr	r1, [pc, #580]	; 15ba0 <MS_store_sens_to_file+0x3f4>
   15958:	e15c0002 	cmp	ip, r2
   1595c:	01a02001 	moveq	r2, r1
   15960:	e1a00004 	mov	r0, r4
   15964:	11a02003 	movne	r2, r3
   15968:	e59f1278 	ldr	r1, [pc, #632]	; 15be8 <MS_store_sens_to_file+0x43c>
   1596c:	ebffedc4 	bl	11084 <fprintf@plt>
   15970:	eaffffc7 	b	15894 <MS_store_sens_to_file+0xe8>
   15974:	e8911004 	ldm	r1, {r2, ip}
   15978:	e59f3224 	ldr	r3, [pc, #548]	; 15ba4 <MS_store_sens_to_file+0x3f8>
   1597c:	e59f121c 	ldr	r1, [pc, #540]	; 15ba0 <MS_store_sens_to_file+0x3f4>
   15980:	e15c0002 	cmp	ip, r2
   15984:	01a02001 	moveq	r2, r1
   15988:	11a02003 	movne	r2, r3
   1598c:	e59f1258 	ldr	r1, [pc, #600]	; 15bec <MS_store_sens_to_file+0x440>
   15990:	e1a00004 	mov	r0, r4
   15994:	ebffedba 	bl	11084 <fprintf@plt>
   15998:	e59f1224 	ldr	r1, [pc, #548]	; 15bc4 <MS_store_sens_to_file+0x418>
   1599c:	e591300c 	ldr	r3, [r1, #12]
   159a0:	e3530002 	cmp	r3, #2
   159a4:	1affffb6 	bne	15884 <MS_store_sens_to_file+0xd8>
   159a8:	e1a00004 	mov	r0, r4
   159ac:	e59f1234 	ldr	r1, [pc, #564]	; 15be8 <MS_store_sens_to_file+0x43c>
   159b0:	e59f2238 	ldr	r2, [pc, #568]	; 15bf0 <MS_store_sens_to_file+0x444>
   159b4:	ebffedb2 	bl	11084 <fprintf@plt>
   159b8:	eaffffb5 	b	15894 <MS_store_sens_to_file+0xe8>
   159bc:	e5912004 	ldr	r2, [r1, #4]
   159c0:	e5913000 	ldr	r3, [r1]
   159c4:	e1a00004 	mov	r0, r4
   159c8:	e1520003 	cmp	r2, r3
   159cc:	01a02006 	moveq	r2, r6
   159d0:	11a02005 	movne	r2, r5
   159d4:	e59f1218 	ldr	r1, [pc, #536]	; 15bf4 <MS_store_sens_to_file+0x448>
   159d8:	ebffeda9 	bl	11084 <fprintf@plt>
   159dc:	e59f11dc 	ldr	r1, [pc, #476]	; 15bc0 <MS_store_sens_to_file+0x414>
   159e0:	e591300c 	ldr	r3, [r1, #12]
   159e4:	e3530002 	cmp	r3, #2
   159e8:	1affff9d 	bne	15864 <MS_store_sens_to_file+0xb8>
   159ec:	e1a00004 	mov	r0, r4
   159f0:	e59f11f4 	ldr	r1, [pc, #500]	; 15bec <MS_store_sens_to_file+0x440>
   159f4:	e59f21f4 	ldr	r2, [pc, #500]	; 15bf0 <MS_store_sens_to_file+0x444>
   159f8:	ebffeda1 	bl	11084 <fprintf@plt>
   159fc:	eaffff9c 	b	15874 <MS_store_sens_to_file+0xc8>
   15a00:	e59f01f0 	ldr	r0, [pc, #496]	; 15bf8 <MS_store_sens_to_file+0x44c>
   15a04:	e3a01001 	mov	r1, #1
   15a08:	e3a0200b 	mov	r2, #11
   15a0c:	e1a03004 	mov	r3, r4
   15a10:	ebffed5f 	bl	10f94 <fwrite@plt>
   15a14:	e1a00004 	mov	r0, r4
   15a18:	ebffedc3 	bl	1112c <fclose@plt>
   15a1c:	e59f0170 	ldr	r0, [pc, #368]	; 15b94 <MS_store_sens_to_file+0x3e8>
   15a20:	e59f11d4 	ldr	r1, [pc, #468]	; 15bfc <MS_store_sens_to_file+0x450>
   15a24:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a28:	eaffed7d 	b	11024 <rename@plt>
   15a2c:	e3a01001 	mov	r1, #1
   15a30:	e3a0200f 	mov	r2, #15
   15a34:	e1a03004 	mov	r3, r4
   15a38:	e59f01c0 	ldr	r0, [pc, #448]	; 15c00 <MS_store_sens_to_file+0x454>
   15a3c:	ebffed54 	bl	10f94 <fwrite@plt>
   15a40:	eafffff3 	b	15a14 <MS_store_sens_to_file+0x268>
   15a44:	e3a01001 	mov	r1, #1
   15a48:	e3a0200b 	mov	r2, #11
   15a4c:	e1a03004 	mov	r3, r4
   15a50:	e59f01ac 	ldr	r0, [pc, #428]	; 15c04 <MS_store_sens_to_file+0x458>
   15a54:	ebffed4e 	bl	10f94 <fwrite@plt>
   15a58:	eaffffed 	b	15a14 <MS_store_sens_to_file+0x268>
   15a5c:	e3a01001 	mov	r1, #1
   15a60:	e3a0200a 	mov	r2, #10
   15a64:	e1a03004 	mov	r3, r4
   15a68:	e59f0198 	ldr	r0, [pc, #408]	; 15c08 <MS_store_sens_to_file+0x45c>
   15a6c:	ebffed48 	bl	10f94 <fwrite@plt>
   15a70:	eaffffe7 	b	15a14 <MS_store_sens_to_file+0x268>
   15a74:	e3a01001 	mov	r1, #1
   15a78:	e3a02012 	mov	r2, #18
   15a7c:	e1a03004 	mov	r3, r4
   15a80:	e59f0184 	ldr	r0, [pc, #388]	; 15c0c <MS_store_sens_to_file+0x460>
   15a84:	ebffed42 	bl	10f94 <fwrite@plt>
   15a88:	eaffffe1 	b	15a14 <MS_store_sens_to_file+0x268>
   15a8c:	e3a01001 	mov	r1, #1
   15a90:	e3a0200b 	mov	r2, #11
   15a94:	e1a03004 	mov	r3, r4
   15a98:	e59f0170 	ldr	r0, [pc, #368]	; 15c10 <MS_store_sens_to_file+0x464>
   15a9c:	ebffed3c 	bl	10f94 <fwrite@plt>
   15aa0:	eaffffdb 	b	15a14 <MS_store_sens_to_file+0x268>
   15aa4:	e3a01001 	mov	r1, #1
   15aa8:	e3a0200c 	mov	r2, #12
   15aac:	e1a03004 	mov	r3, r4
   15ab0:	e59f015c 	ldr	r0, [pc, #348]	; 15c14 <MS_store_sens_to_file+0x468>
   15ab4:	ebffed36 	bl	10f94 <fwrite@plt>
   15ab8:	eaffff82 	b	158c8 <MS_store_sens_to_file+0x11c>
   15abc:	e3a01001 	mov	r1, #1
   15ac0:	e3a0200d 	mov	r2, #13
   15ac4:	e1a03004 	mov	r3, r4
   15ac8:	e59f0148 	ldr	r0, [pc, #328]	; 15c18 <MS_store_sens_to_file+0x46c>
   15acc:	ebffed30 	bl	10f94 <fwrite@plt>
   15ad0:	eaffff7c 	b	158c8 <MS_store_sens_to_file+0x11c>
   15ad4:	e3a01001 	mov	r1, #1
   15ad8:	e3a0200d 	mov	r2, #13
   15adc:	e1a03004 	mov	r3, r4
   15ae0:	e59f0134 	ldr	r0, [pc, #308]	; 15c1c <MS_store_sens_to_file+0x470>
   15ae4:	ebffed2a 	bl	10f94 <fwrite@plt>
   15ae8:	eaffff76 	b	158c8 <MS_store_sens_to_file+0x11c>
   15aec:	e3a01001 	mov	r1, #1
   15af0:	e3a02012 	mov	r2, #18
   15af4:	e1a03004 	mov	r3, r4
   15af8:	e59f0120 	ldr	r0, [pc, #288]	; 15c20 <MS_store_sens_to_file+0x474>
   15afc:	ebffed24 	bl	10f94 <fwrite@plt>
   15b00:	eaffff70 	b	158c8 <MS_store_sens_to_file+0x11c>
   15b04:	e1a00004 	mov	r0, r4
   15b08:	e59f1114 	ldr	r1, [pc, #276]	; 15c24 <MS_store_sens_to_file+0x478>
   15b0c:	ebffed5c 	bl	11084 <fprintf@plt>
   15b10:	eaffff6c 	b	158c8 <MS_store_sens_to_file+0x11c>
   15b14:	e1a00004 	mov	r0, r4
   15b18:	e59f1108 	ldr	r1, [pc, #264]	; 15c28 <MS_store_sens_to_file+0x47c>
   15b1c:	ebffed58 	bl	11084 <fprintf@plt>
   15b20:	eaffffbb 	b	15a14 <MS_store_sens_to_file+0x268>
   15b24:	e1a00004 	mov	r0, r4
   15b28:	e59f10c4 	ldr	r1, [pc, #196]	; 15bf4 <MS_store_sens_to_file+0x448>
   15b2c:	e59f20bc 	ldr	r2, [pc, #188]	; 15bf0 <MS_store_sens_to_file+0x444>
   15b30:	ebffed53 	bl	11084 <fprintf@plt>
   15b34:	eaffff46 	b	15854 <MS_store_sens_to_file+0xa8>
   15b38:	e1a00004 	mov	r0, r4
   15b3c:	e59f10b0 	ldr	r1, [pc, #176]	; 15bf4 <MS_store_sens_to_file+0x448>
   15b40:	e59f20e4 	ldr	r2, [pc, #228]	; 15c2c <MS_store_sens_to_file+0x480>
   15b44:	ebffed4e 	bl	11084 <fprintf@plt>
   15b48:	eaffff41 	b	15854 <MS_store_sens_to_file+0xa8>
   15b4c:	e1a00004 	mov	r0, r4
   15b50:	e59f1094 	ldr	r1, [pc, #148]	; 15bec <MS_store_sens_to_file+0x440>
   15b54:	e59f20d0 	ldr	r2, [pc, #208]	; 15c2c <MS_store_sens_to_file+0x480>
   15b58:	ebffed49 	bl	11084 <fprintf@plt>
   15b5c:	eaffff44 	b	15874 <MS_store_sens_to_file+0xc8>
   15b60:	e1a00004 	mov	r0, r4
   15b64:	e59f107c 	ldr	r1, [pc, #124]	; 15be8 <MS_store_sens_to_file+0x43c>
   15b68:	e59f20bc 	ldr	r2, [pc, #188]	; 15c2c <MS_store_sens_to_file+0x480>
   15b6c:	ebffed44 	bl	11084 <fprintf@plt>
   15b70:	eaffff47 	b	15894 <MS_store_sens_to_file+0xe8>
   15b74:	ebffed4e 	bl	110b4 <__errno_location@plt>
   15b78:	e5900000 	ldr	r0, [r0]
   15b7c:	ebffed1c 	bl	10ff4 <strerror@plt>
   15b80:	e59f10a8 	ldr	r1, [pc, #168]	; 15c30 <MS_store_sens_to_file+0x484>
   15b84:	e8bd4070 	pop	{r4, r5, r6, lr}
   15b88:	e1a02000 	mov	r2, r0
   15b8c:	e3a0001b 	mov	r0, #27
   15b90:	eaffed74 	b	11168 <syslog@plt>
   15b94:	0001a6a4 	.word	0x0001a6a4
   15b98:	0001a678 	.word	0x0001a678
   15b9c:	0002b6d0 	.word	0x0002b6d0
   15ba0:	0001a688 	.word	0x0001a688
   15ba4:	0001a68c 	.word	0x0001a68c
   15ba8:	0001a6ec 	.word	0x0001a6ec
   15bac:	0002cfe8 	.word	0x0002cfe8
   15bb0:	0001a6f8 	.word	0x0001a6f8
   15bb4:	0002cde4 	.word	0x0002cde4
   15bb8:	0001a700 	.word	0x0001a700
   15bbc:	0002b5cc 	.word	0x0002b5cc
   15bc0:	0002b4c8 	.word	0x0002b4c8
   15bc4:	0002b3c4 	.word	0x0002b3c4
   15bc8:	0002d094 	.word	0x0002d094
   15bcc:	0002cddc 	.word	0x0002cddc
   15bd0:	0001a69c 	.word	0x0001a69c
   15bd4:	0001a694 	.word	0x0001a694
   15bd8:	0001a794 	.word	0x0001a794
   15bdc:	0002cdd4 	.word	0x0002cdd4
   15be0:	0001a7a0 	.word	0x0001a7a0
   15be4:	0002cdcc 	.word	0x0002cdcc
   15be8:	0001a730 	.word	0x0001a730
   15bec:	0001a724 	.word	0x0001a724
   15bf0:	0001a718 	.word	0x0001a718
   15bf4:	0001a70c 	.word	0x0001a70c
   15bf8:	0001a7cc 	.word	0x0001a7cc
   15bfc:	0001a814 	.word	0x0001a814
   15c00:	0001a7f0 	.word	0x0001a7f0
   15c04:	0001a7e4 	.word	0x0001a7e4
   15c08:	0001a7d8 	.word	0x0001a7d8
   15c0c:	0001a7b8 	.word	0x0001a7b8
   15c10:	0001a7ac 	.word	0x0001a7ac
   15c14:	0001a73c 	.word	0x0001a73c
   15c18:	0001a770 	.word	0x0001a770
   15c1c:	0001a760 	.word	0x0001a760
   15c20:	0001a74c 	.word	0x0001a74c
   15c24:	0001a780 	.word	0x0001a780
   15c28:	0001a800 	.word	0x0001a800
   15c2c:	0001a720 	.word	0x0001a720
   15c30:	0001a6b8 	.word	0x0001a6b8

00015c34 <MS_run_event>:
   15c34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c38:	e3a06000 	mov	r6, #0
   15c3c:	e24dde41 	sub	sp, sp, #1040	; 0x410
   15c40:	e1a04001 	mov	r4, r1
   15c44:	e3a02fff 	mov	r2, #1020	; 0x3fc
   15c48:	e1a01006 	mov	r1, r6
   15c4c:	e1a05000 	mov	r5, r0
   15c50:	e28d0014 	add	r0, sp, #20
   15c54:	e58d6010 	str	r6, [sp, #16]
   15c58:	ebffed21 	bl	110e4 <memset@plt>
   15c5c:	e1a00005 	mov	r0, r5
   15c60:	ebffed19 	bl	110cc <__strdup@plt>
   15c64:	e1a08000 	mov	r8, r0
   15c68:	e1a00004 	mov	r0, r4
   15c6c:	ebffed16 	bl	110cc <__strdup@plt>
   15c70:	e1a04008 	mov	r4, r8
   15c74:	e1a07000 	mov	r7, r0
   15c78:	ea00000d 	b	15cb4 <MS_run_event+0x80>
   15c7c:	e5c56000 	strb	r6, [r5]
   15c80:	e28d0010 	add	r0, sp, #16
   15c84:	ebffecf2 	bl	11054 <strlen@plt>
   15c88:	e1a01004 	mov	r1, r4
   15c8c:	e2854001 	add	r4, r5, #1
   15c90:	e2602b01 	rsb	r2, r0, #1024	; 0x400
   15c94:	e28d0010 	add	r0, sp, #16
   15c98:	ebffed4a 	bl	111c8 <strncat@plt>
   15c9c:	e28d0010 	add	r0, sp, #16
   15ca0:	ebffeceb 	bl	11054 <strlen@plt>
   15ca4:	e1a01007 	mov	r1, r7
   15ca8:	e2602b01 	rsb	r2, r0, #1024	; 0x400
   15cac:	e28d0010 	add	r0, sp, #16
   15cb0:	ebffed44 	bl	111c8 <strncat@plt>
   15cb4:	e1a00004 	mov	r0, r4
   15cb8:	e3a01040 	mov	r1, #64	; 0x40
   15cbc:	ebffeced 	bl	11078 <strchr@plt>
   15cc0:	e2505000 	subs	r5, r0, #0
   15cc4:	1affffec 	bne	15c7c <MS_run_event+0x48>
   15cc8:	e28d0010 	add	r0, sp, #16
   15ccc:	ebffece0 	bl	11054 <strlen@plt>
   15cd0:	e59f6244 	ldr	r6, [pc, #580]	; 15f1c <MS_run_event+0x2e8>
   15cd4:	e1a01004 	mov	r1, r4
   15cd8:	e2602b01 	rsb	r2, r0, #1024	; 0x400
   15cdc:	e28d0010 	add	r0, sp, #16
   15ce0:	ebffed38 	bl	111c8 <strncat@plt>
   15ce4:	e5963000 	ldr	r3, [r6]
   15ce8:	e5cd540f 	strb	r5, [sp, #1039]	; 0x40f
   15cec:	e3530000 	cmp	r3, #0
   15cf0:	da000003 	ble	15d04 <MS_run_event+0xd0>
   15cf4:	e3a0001f 	mov	r0, #31
   15cf8:	e59f1220 	ldr	r1, [pc, #544]	; 15f20 <MS_run_event+0x2ec>
   15cfc:	e28d2010 	add	r2, sp, #16
   15d00:	ebffed18 	bl	11168 <syslog@plt>
   15d04:	ebffed14 	bl	1115c <fork@plt>
   15d08:	e2505000 	subs	r5, r0, #0
   15d0c:	0a000022 	beq	15d9c <MS_run_event+0x168>
   15d10:	da00001a 	ble	15d80 <MS_run_event+0x14c>
   15d14:	e3a0000c 	mov	r0, #12
   15d18:	ebffecaf 	bl	10fdc <malloc@plt>
   15d1c:	e59f4200 	ldr	r4, [pc, #512]	; 15f24 <MS_run_event+0x2f0>
   15d20:	e3a01000 	mov	r1, #0
   15d24:	e5943000 	ldr	r3, [r4]
   15d28:	e1a02000 	mov	r2, r0
   15d2c:	e28d0008 	add	r0, sp, #8
   15d30:	e5823008 	str	r3, [r2, #8]
   15d34:	e5825000 	str	r5, [r2]
   15d38:	e5842000 	str	r2, [r4]
   15d3c:	ebffec9d 	bl	10fb8 <gettimeofday@plt>
   15d40:	e59f21e0 	ldr	r2, [pc, #480]	; 15f28 <MS_run_event+0x2f4>
   15d44:	e5943000 	ldr	r3, [r4]
   15d48:	e5960000 	ldr	r0, [r6]
   15d4c:	e5921000 	ldr	r1, [r2]
   15d50:	e59d2008 	ldr	r2, [sp, #8]
   15d54:	e3500001 	cmp	r0, #1
   15d58:	e0822001 	add	r2, r2, r1
   15d5c:	e5832004 	str	r2, [r3, #4]
   15d60:	da000006 	ble	15d80 <MS_run_event+0x14c>
   15d64:	e28d3010 	add	r3, sp, #16
   15d68:	e58d3000 	str	r3, [sp]
   15d6c:	e3a0001f 	mov	r0, #31
   15d70:	e1a03005 	mov	r3, r5
   15d74:	e59f11b0 	ldr	r1, [pc, #432]	; 15f2c <MS_run_event+0x2f8>
   15d78:	e1a02007 	mov	r2, r7
   15d7c:	ebffecf9 	bl	11168 <syslog@plt>
   15d80:	e1a00008 	mov	r0, r8
   15d84:	ebffec5b 	bl	10ef8 <free@plt>
   15d88:	e1a00007 	mov	r0, r7
   15d8c:	ebffec59 	bl	10ef8 <free@plt>
   15d90:	e3a00000 	mov	r0, #0
   15d94:	e28dde41 	add	sp, sp, #1040	; 0x410
   15d98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d9c:	ebffecaf 	bl	11060 <setpgrp@plt>
   15da0:	e1a00005 	mov	r0, r5
   15da4:	ebffed13 	bl	111f8 <close@plt>
   15da8:	e3a00001 	mov	r0, #1
   15dac:	ebffed11 	bl	111f8 <close@plt>
   15db0:	e3a00002 	mov	r0, #2
   15db4:	ebffed0f 	bl	111f8 <close@plt>
   15db8:	e28d0010 	add	r0, sp, #16
   15dbc:	ebffecc2 	bl	110cc <__strdup@plt>
   15dc0:	e3a0100a 	mov	r1, #10
   15dc4:	e3a04020 	mov	r4, #32
   15dc8:	e1a06000 	mov	r6, r0
   15dcc:	ebffeca9 	bl	11078 <strchr@plt>
   15dd0:	e3a0100d 	mov	r1, #13
   15dd4:	e3500000 	cmp	r0, #0
   15dd8:	15c05000 	strbne	r5, [r0]
   15ddc:	e1a00006 	mov	r0, r6
   15de0:	ebffeca4 	bl	11078 <strchr@plt>
   15de4:	e3500000 	cmp	r0, #0
   15de8:	13a03000 	movne	r3, #0
   15dec:	15c03000 	strbne	r3, [r0]
   15df0:	ea000000 	b	15df8 <MS_run_event+0x1c4>
   15df4:	e5c04000 	strb	r4, [r0]
   15df8:	e1a00006 	mov	r0, r6
   15dfc:	e3a01009 	mov	r1, #9
   15e00:	ebffec9c 	bl	11078 <strchr@plt>
   15e04:	e3500000 	cmp	r0, #0
   15e08:	1afffff9 	bne	15df4 <MS_run_event+0x1c0>
   15e0c:	e59fa11c 	ldr	sl, [pc, #284]	; 15f30 <MS_run_event+0x2fc>
   15e10:	e1a04000 	mov	r4, r0
   15e14:	e1a08000 	mov	r8, r0
   15e18:	e1a05000 	mov	r5, r0
   15e1c:	e1a09000 	mov	r9, r0
   15e20:	e3a02020 	mov	r2, #32
   15e24:	e1a00006 	mov	r0, r6
   15e28:	e4d63001 	ldrb	r3, [r6], #1
   15e2c:	e3530000 	cmp	r3, #0
   15e30:	0a000011 	beq	15e7c <MS_run_event+0x248>
   15e34:	e1520003 	cmp	r2, r3
   15e38:	0a000027 	beq	15edc <MS_run_event+0x2a8>
   15e3c:	e3530022 	cmp	r3, #34	; 0x22
   15e40:	13530027 	cmpne	r3, #39	; 0x27
   15e44:	03a01001 	moveq	r1, #1
   15e48:	13a01000 	movne	r1, #0
   15e4c:	e3520020 	cmp	r2, #32
   15e50:	13a01000 	movne	r1, #0
   15e54:	02011001 	andeq	r1, r1, #1
   15e58:	e3510000 	cmp	r1, #0
   15e5c:	11a02003 	movne	r2, r3
   15e60:	1affffef 	bne	15e24 <MS_run_event+0x1f0>
   15e64:	e3580000 	cmp	r8, #0
   15e68:	01a08000 	moveq	r8, r0
   15e6c:	e1a00006 	mov	r0, r6
   15e70:	e4d63001 	ldrb	r3, [r6], #1
   15e74:	e3530000 	cmp	r3, #0
   15e78:	1affffed 	bne	15e34 <MS_run_event+0x200>
   15e7c:	e3580000 	cmp	r8, #0
   15e80:	01a06105 	lsleq	r6, r5, #2
   15e84:	0a000009 	beq	15eb0 <MS_run_event+0x27c>
   15e88:	e2855001 	add	r5, r5, #1
   15e8c:	e1a00004 	mov	r0, r4
   15e90:	e1a06105 	lsl	r6, r5, #2
   15e94:	e1a01006 	mov	r1, r6
   15e98:	ebffec31 	bl	10f64 <realloc@plt>
   15e9c:	e1a04000 	mov	r4, r0
   15ea0:	e1a00008 	mov	r0, r8
   15ea4:	ebffec88 	bl	110cc <__strdup@plt>
   15ea8:	e2463004 	sub	r3, r6, #4
   15eac:	e7840003 	str	r0, [r4, r3]
   15eb0:	e2851001 	add	r1, r5, #1
   15eb4:	e1a00004 	mov	r0, r4
   15eb8:	e1a01101 	lsl	r1, r1, #2
   15ebc:	ebffec28 	bl	10f64 <realloc@plt>
   15ec0:	e3a04000 	mov	r4, #0
   15ec4:	e7804006 	str	r4, [r0, r6]
   15ec8:	e1a01000 	mov	r1, r0
   15ecc:	e5900000 	ldr	r0, [r0]
   15ed0:	ebffec71 	bl	1109c <execv@plt>
   15ed4:	e1a00004 	mov	r0, r4
   15ed8:	ebffec57 	bl	1103c <exit@plt>
   15edc:	e3580000 	cmp	r8, #0
   15ee0:	0affffcf 	beq	15e24 <MS_run_event+0x1f0>
   15ee4:	e2855001 	add	r5, r5, #1
   15ee8:	e1a00004 	mov	r0, r4
   15eec:	e1a07105 	lsl	r7, r5, #2
   15ef0:	e1a01007 	mov	r1, r7
   15ef4:	e5469001 	strb	r9, [r6, #-1]
   15ef8:	ebffec19 	bl	10f64 <realloc@plt>
   15efc:	e155000a 	cmp	r5, sl
   15f00:	e3a02020 	mov	r2, #32
   15f04:	e0807007 	add	r7, r0, r7
   15f08:	e1a04000 	mov	r4, r0
   15f0c:	e5078004 	str	r8, [r7, #-4]
   15f10:	05c69000 	strbeq	r9, [r6]
   15f14:	e3a08000 	mov	r8, #0
   15f18:	eaffffc1 	b	15e24 <MS_run_event+0x1f0>
   15f1c:	0002d0ec 	.word	0x0002d0ec
   15f20:	0001a824 	.word	0x0001a824
   15f24:	0002cdd0 	.word	0x0002cdd0
   15f28:	0002b8fc 	.word	0x0002b8fc
   15f2c:	0001a834 	.word	0x0001a834
   15f30:	000001ff 	.word	0x000001ff

00015f34 <MS_most_sensor_check>:
   15f34:	e9901008 	ldmib	r0, {r3, ip}
   15f38:	e153000c 	cmp	r3, ip
   15f3c:	0a00000d 	beq	15f78 <MS_most_sensor_check+0x44>
   15f40:	e5902000 	ldr	r2, [r0]
   15f44:	e92d4010 	push	{r4, lr}
   15f48:	e1530002 	cmp	r3, r2
   15f4c:	e1a04001 	mov	r4, r1
   15f50:	e5803008 	str	r3, [r0, #8]
   15f54:	0a000009 	beq	15f80 <MS_most_sensor_check+0x4c>
   15f58:	e280000c 	add	r0, r0, #12
   15f5c:	ebffff34 	bl	15c34 <MS_run_event>
   15f60:	e1a02004 	mov	r2, r4
   15f64:	e3a0001c 	mov	r0, #28
   15f68:	e59f1030 	ldr	r1, [pc, #48]	; 15fa0 <MS_most_sensor_check+0x6c>
   15f6c:	ebffec7d 	bl	11168 <syslog@plt>
   15f70:	e3a00001 	mov	r0, #1
   15f74:	e8bd8010 	pop	{r4, pc}
   15f78:	e3a00000 	mov	r0, #0
   15f7c:	e12fff1e 	bx	lr
   15f80:	e280005c 	add	r0, r0, #92	; 0x5c
   15f84:	ebffff2a 	bl	15c34 <MS_run_event>
   15f88:	e1a02004 	mov	r2, r4
   15f8c:	e3a0001c 	mov	r0, #28
   15f90:	e59f100c 	ldr	r1, [pc, #12]	; 15fa4 <MS_most_sensor_check+0x70>
   15f94:	ebffec73 	bl	11168 <syslog@plt>
   15f98:	e3a00001 	mov	r0, #1
   15f9c:	e8bd8010 	pop	{r4, pc}
   15fa0:	0001a878 	.word	0x0001a878
   15fa4:	0001a864 	.word	0x0001a864

00015fa8 <MS_smoke_sensor_check>:
   15fa8:	e590300c 	ldr	r3, [r0, #12]
   15fac:	e5902010 	ldr	r2, [r0, #16]
   15fb0:	e92d4010 	push	{r4, lr}
   15fb4:	e1530002 	cmp	r3, r2
   15fb8:	e1a04001 	mov	r4, r1
   15fbc:	0a00000a 	beq	15fec <MS_smoke_sensor_check+0x44>
   15fc0:	e3530003 	cmp	r3, #3
   15fc4:	e5803010 	str	r3, [r0, #16]
   15fc8:	0a000017 	beq	1602c <MS_smoke_sensor_check+0x84>
   15fcc:	e28000b4 	add	r0, r0, #180	; 0xb4
   15fd0:	ebffff17 	bl	15c34 <MS_run_event>
   15fd4:	e1a02004 	mov	r2, r4
   15fd8:	e3a0001c 	mov	r0, #28
   15fdc:	e59f1074 	ldr	r1, [pc, #116]	; 16058 <MS_smoke_sensor_check+0xb0>
   15fe0:	ebffec60 	bl	11168 <syslog@plt>
   15fe4:	e3a00001 	mov	r0, #1
   15fe8:	e8bd8010 	pop	{r4, pc}
   15fec:	e5903004 	ldr	r3, [r0, #4]
   15ff0:	e5902008 	ldr	r2, [r0, #8]
   15ff4:	e1530002 	cmp	r3, r2
   15ff8:	0a000014 	beq	16050 <MS_smoke_sensor_check+0xa8>
   15ffc:	e5902000 	ldr	r2, [r0]
   16000:	e5803008 	str	r3, [r0, #8]
   16004:	e1530002 	cmp	r3, r2
   16008:	0a000007 	beq	1602c <MS_smoke_sensor_check+0x84>
   1600c:	e2800014 	add	r0, r0, #20
   16010:	ebffff07 	bl	15c34 <MS_run_event>
   16014:	e1a02004 	mov	r2, r4
   16018:	e3a0001c 	mov	r0, #28
   1601c:	e59f1038 	ldr	r1, [pc, #56]	; 1605c <MS_smoke_sensor_check+0xb4>
   16020:	ebffec50 	bl	11168 <syslog@plt>
   16024:	e3a00001 	mov	r0, #1
   16028:	e8bd8010 	pop	{r4, pc}
   1602c:	e1a01004 	mov	r1, r4
   16030:	e2800064 	add	r0, r0, #100	; 0x64
   16034:	ebfffefe 	bl	15c34 <MS_run_event>
   16038:	e1a02004 	mov	r2, r4
   1603c:	e3a0001c 	mov	r0, #28
   16040:	e59f1018 	ldr	r1, [pc, #24]	; 16060 <MS_smoke_sensor_check+0xb8>
   16044:	ebffec47 	bl	11168 <syslog@plt>
   16048:	e3a00001 	mov	r0, #1
   1604c:	e8bd8010 	pop	{r4, pc}
   16050:	e3a00000 	mov	r0, #0
   16054:	e8bd8010 	pop	{r4, pc}
   16058:	0001a88c 	.word	0x0001a88c
   1605c:	0001a878 	.word	0x0001a878
   16060:	0001a864 	.word	0x0001a864

00016064 <MS_write_on_off>:
   16064:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   16068:	e59f01a0 	ldr	r0, [pc, #416]	; 16210 <MS_write_on_off+0x1ac>
   1606c:	e59f11a0 	ldr	r1, [pc, #416]	; 16214 <MS_write_on_off+0x1b0>
   16070:	ebffeb97 	bl	10ed4 <fopen@plt>
   16074:	e2504000 	subs	r4, r0, #0
   16078:	0a00005c 	beq	161f0 <MS_write_on_off+0x18c>
   1607c:	e59f7194 	ldr	r7, [pc, #404]	; 16218 <MS_write_on_off+0x1b4>
   16080:	e59f5194 	ldr	r5, [pc, #404]	; 1621c <MS_write_on_off+0x1b8>
   16084:	e59f6194 	ldr	r6, [pc, #404]	; 16220 <MS_write_on_off+0x1bc>
   16088:	e5d72000 	ldrb	r2, [r7]
   1608c:	e59f1190 	ldr	r1, [pc, #400]	; 16224 <MS_write_on_off+0x1c0>
   16090:	e3520000 	cmp	r2, #0
   16094:	11a02005 	movne	r2, r5
   16098:	01a02006 	moveq	r2, r6
   1609c:	ebffebf8 	bl	11084 <fprintf@plt>
   160a0:	e5d72001 	ldrb	r2, [r7, #1]
   160a4:	e59f117c 	ldr	r1, [pc, #380]	; 16228 <MS_write_on_off+0x1c4>
   160a8:	e1a00004 	mov	r0, r4
   160ac:	e3520000 	cmp	r2, #0
   160b0:	11a02005 	movne	r2, r5
   160b4:	01a02006 	moveq	r2, r6
   160b8:	ebffebf1 	bl	11084 <fprintf@plt>
   160bc:	e5d72002 	ldrb	r2, [r7, #2]
   160c0:	e59f1164 	ldr	r1, [pc, #356]	; 1622c <MS_write_on_off+0x1c8>
   160c4:	e1a00004 	mov	r0, r4
   160c8:	e3520000 	cmp	r2, #0
   160cc:	11a02005 	movne	r2, r5
   160d0:	01a02006 	moveq	r2, r6
   160d4:	ebffebea 	bl	11084 <fprintf@plt>
   160d8:	e5d72003 	ldrb	r2, [r7, #3]
   160dc:	e59f114c 	ldr	r1, [pc, #332]	; 16230 <MS_write_on_off+0x1cc>
   160e0:	e1a00004 	mov	r0, r4
   160e4:	e3520000 	cmp	r2, #0
   160e8:	11a02005 	movne	r2, r5
   160ec:	01a02006 	moveq	r2, r6
   160f0:	ebffebe3 	bl	11084 <fprintf@plt>
   160f4:	e5d72004 	ldrb	r2, [r7, #4]
   160f8:	e59f1134 	ldr	r1, [pc, #308]	; 16234 <MS_write_on_off+0x1d0>
   160fc:	e1a00004 	mov	r0, r4
   16100:	e3520000 	cmp	r2, #0
   16104:	11a02005 	movne	r2, r5
   16108:	01a02006 	moveq	r2, r6
   1610c:	ebffebdc 	bl	11084 <fprintf@plt>
   16110:	e5d72005 	ldrb	r2, [r7, #5]
   16114:	e59f111c 	ldr	r1, [pc, #284]	; 16238 <MS_write_on_off+0x1d4>
   16118:	e1a00004 	mov	r0, r4
   1611c:	e3520000 	cmp	r2, #0
   16120:	11a02005 	movne	r2, r5
   16124:	01a02006 	moveq	r2, r6
   16128:	ebffebd5 	bl	11084 <fprintf@plt>
   1612c:	e5d72006 	ldrb	r2, [r7, #6]
   16130:	e59f1104 	ldr	r1, [pc, #260]	; 1623c <MS_write_on_off+0x1d8>
   16134:	e1a00004 	mov	r0, r4
   16138:	e3520000 	cmp	r2, #0
   1613c:	11a02005 	movne	r2, r5
   16140:	01a02006 	moveq	r2, r6
   16144:	ebffebce 	bl	11084 <fprintf@plt>
   16148:	e5d72007 	ldrb	r2, [r7, #7]
   1614c:	e59f10ec 	ldr	r1, [pc, #236]	; 16240 <MS_write_on_off+0x1dc>
   16150:	e1a00004 	mov	r0, r4
   16154:	e3520000 	cmp	r2, #0
   16158:	11a02005 	movne	r2, r5
   1615c:	01a02006 	moveq	r2, r6
   16160:	ebffebc7 	bl	11084 <fprintf@plt>
   16164:	e5d72008 	ldrb	r2, [r7, #8]
   16168:	e59f10d4 	ldr	r1, [pc, #212]	; 16244 <MS_write_on_off+0x1e0>
   1616c:	e1a00004 	mov	r0, r4
   16170:	e3520000 	cmp	r2, #0
   16174:	11a02005 	movne	r2, r5
   16178:	01a02006 	moveq	r2, r6
   1617c:	ebffebc0 	bl	11084 <fprintf@plt>
   16180:	e5d72009 	ldrb	r2, [r7, #9]
   16184:	e59f10bc 	ldr	r1, [pc, #188]	; 16248 <MS_write_on_off+0x1e4>
   16188:	e1a00004 	mov	r0, r4
   1618c:	e3520000 	cmp	r2, #0
   16190:	11a02005 	movne	r2, r5
   16194:	01a02006 	moveq	r2, r6
   16198:	ebffebb9 	bl	11084 <fprintf@plt>
   1619c:	e5d7200a 	ldrb	r2, [r7, #10]
   161a0:	e59f10a4 	ldr	r1, [pc, #164]	; 1624c <MS_write_on_off+0x1e8>
   161a4:	e1a00004 	mov	r0, r4
   161a8:	e3520000 	cmp	r2, #0
   161ac:	11a02005 	movne	r2, r5
   161b0:	01a02006 	moveq	r2, r6
   161b4:	ebffebb2 	bl	11084 <fprintf@plt>
   161b8:	e5d7200b 	ldrb	r2, [r7, #11]
   161bc:	e59f108c 	ldr	r1, [pc, #140]	; 16250 <MS_write_on_off+0x1ec>
   161c0:	e1a00004 	mov	r0, r4
   161c4:	e3520000 	cmp	r2, #0
   161c8:	11a02006 	movne	r2, r6
   161cc:	01a02005 	moveq	r2, r5
   161d0:	ebffebab 	bl	11084 <fprintf@plt>
   161d4:	e1a00004 	mov	r0, r4
   161d8:	ebffebd3 	bl	1112c <fclose@plt>
   161dc:	e59f002c 	ldr	r0, [pc, #44]	; 16210 <MS_write_on_off+0x1ac>
   161e0:	e59f106c 	ldr	r1, [pc, #108]	; 16254 <MS_write_on_off+0x1f0>
   161e4:	ebffeb8e 	bl	11024 <rename@plt>
   161e8:	e3a00000 	mov	r0, #0
   161ec:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   161f0:	ebffebaf 	bl	110b4 <__errno_location@plt>
   161f4:	e5900000 	ldr	r0, [r0]
   161f8:	ebffeb7d 	bl	10ff4 <strerror@plt>
   161fc:	e59f1054 	ldr	r1, [pc, #84]	; 16258 <MS_write_on_off+0x1f4>
   16200:	e1a02000 	mov	r2, r0
   16204:	e3a0001b 	mov	r0, #27
   16208:	ebffebd6 	bl	11168 <syslog@plt>
   1620c:	eafffff5 	b	161e8 <MS_write_on_off+0x184>
   16210:	0001a8a4 	.word	0x0001a8a4
   16214:	0001a678 	.word	0x0001a678
   16218:	0002d174 	.word	0x0002d174
   1621c:	0001a8a0 	.word	0x0001a8a0
   16220:	0001a720 	.word	0x0001a720
   16224:	0001a8bc 	.word	0x0001a8bc
   16228:	0001a8c4 	.word	0x0001a8c4
   1622c:	0001a8cc 	.word	0x0001a8cc
   16230:	0001a8dc 	.word	0x0001a8dc
   16234:	0001a8ec 	.word	0x0001a8ec
   16238:	0001a8f8 	.word	0x0001a8f8
   1623c:	0001a904 	.word	0x0001a904
   16240:	0001a910 	.word	0x0001a910
   16244:	0001a91c 	.word	0x0001a91c
   16248:	0001a928 	.word	0x0001a928
   1624c:	0001a938 	.word	0x0001a938
   16250:	0001a944 	.word	0x0001a944
   16254:	0001a954 	.word	0x0001a954
   16258:	0001a6b8 	.word	0x0001a6b8

0001625c <MS_humidity>:
   1625c:	e92d4070 	push	{r4, r5, r6, lr}
   16260:	ed2d8b02 	vpush	{d8}
   16264:	e3a03010 	mov	r3, #16
   16268:	e59f0120 	ldr	r0, [pc, #288]	; 16390 <MS_humidity+0x134>
   1626c:	e3a02006 	mov	r2, #6
   16270:	e24dd008 	sub	sp, sp, #8
   16274:	e28d1008 	add	r1, sp, #8
   16278:	e5613008 	strb	r3, [r1, #-8]!
   1627c:	ebfff48d 	bl	134b8 <spi_read>
   16280:	e3500000 	cmp	r0, #0
   16284:	1a00002c 	bne	1633c <MS_humidity+0xe0>
   16288:	e5dd0001 	ldrb	r0, [sp, #1]
   1628c:	e5dd1003 	ldrb	r1, [sp, #3]
   16290:	e5dd2002 	ldrb	r2, [sp, #2]
   16294:	e5dd3004 	ldrb	r3, [sp, #4]
   16298:	ed9f3b32 	vldr	d3, [pc, #200]	; 16368 <MS_humidity+0x10c>
   1629c:	e1822400 	orr	r2, r2, r0, lsl #8
   162a0:	e1833401 	orr	r3, r3, r1, lsl #8
   162a4:	ee062a10 	vmov	s12, r2
   162a8:	ee073a10 	vmov	s14, r3
   162ac:	ed9f1b2f 	vldr	d1, [pc, #188]	; 16370 <MS_humidity+0x114>
   162b0:	ed9f4b30 	vldr	d4, [pc, #192]	; 16378 <MS_humidity+0x11c>
   162b4:	eeb86bc6 	vcvt.f64.s32	d6, s12
   162b8:	eeb87bc7 	vcvt.f64.s32	d7, s14
   162bc:	ed9f2b2f 	vldr	d2, [pc, #188]	; 16380 <MS_humidity+0x124>
   162c0:	ed9f5b30 	vldr	d5, [pc, #192]	; 16388 <MS_humidity+0x12c>
   162c4:	e59f40c8 	ldr	r4, [pc, #200]	; 16394 <MS_humidity+0x138>
   162c8:	e5940004 	ldr	r0, [r4, #4]
   162cc:	ee266b03 	vmul.f64	d6, d6, d3
   162d0:	e3500000 	cmp	r0, #0
   162d4:	ee277b03 	vmul.f64	d7, d7, d3
   162d8:	ee164b01 	vnmls.f64	d4, d6, d1
   162dc:	ee175b02 	vnmls.f64	d5, d7, d2
   162e0:	eefd8bc4 	vcvt.s32.f64	s17, d4
   162e4:	eebd8bc5 	vcvt.s32.f64	s16, d5
   162e8:	0a000019 	beq	16354 <MS_humidity+0xf8>
   162ec:	ee182a90 	vmov	r2, s17
   162f0:	ee183a10 	vmov	r3, s16
   162f4:	e59f109c 	ldr	r1, [pc, #156]	; 16398 <MS_humidity+0x13c>
   162f8:	ebffeb61 	bl	11084 <fprintf@plt>
   162fc:	e5940004 	ldr	r0, [r4, #4]
   16300:	ebffeaf9 	bl	10eec <fflush@plt>
   16304:	e5945004 	ldr	r5, [r4, #4]
   16308:	e1a00005 	mov	r0, r5
   1630c:	ebffeb80 	bl	11114 <fileno@plt>
   16310:	e1a06000 	mov	r6, r0
   16314:	e1a00005 	mov	r0, r5
   16318:	ebffeb05 	bl	10f34 <ftell@plt>
   1631c:	e1a01000 	mov	r1, r0
   16320:	e1a00006 	mov	r0, r6
   16324:	ebffeb7d 	bl	11120 <ftruncate@plt>
   16328:	e5940004 	ldr	r0, [r4, #4]
   1632c:	ebffeb06 	bl	10f4c <rewind@plt>
   16330:	e28dd008 	add	sp, sp, #8
   16334:	ecbd8b02 	vpop	{d8}
   16338:	e8bd8070 	pop	{r4, r5, r6, pc}
   1633c:	e3a0001b 	mov	r0, #27
   16340:	e59f1054 	ldr	r1, [pc, #84]	; 1639c <MS_humidity+0x140>
   16344:	ebffeb87 	bl	11168 <syslog@plt>
   16348:	e28dd008 	add	sp, sp, #8
   1634c:	ecbd8b02 	vpop	{d8}
   16350:	e8bd8070 	pop	{r4, r5, r6, pc}
   16354:	e59f0044 	ldr	r0, [pc, #68]	; 163a0 <MS_humidity+0x144>
   16358:	e59f1044 	ldr	r1, [pc, #68]	; 163a4 <MS_humidity+0x148>
   1635c:	ebffeadc 	bl	10ed4 <fopen@plt>
   16360:	e5840004 	str	r0, [r4, #4]
   16364:	eaffffe0 	b	162ec <MS_humidity+0x90>
   16368:	00000000 	.word	0x00000000
   1636c:	3ef00000 	.word	0x3ef00000
   16370:	00000000 	.word	0x00000000
   16374:	405f4000 	.word	0x405f4000
   16378:	00000000 	.word	0x00000000
   1637c:	40180000 	.word	0x40180000
   16380:	3d70a3d7 	.word	0x3d70a3d7
   16384:	4065f70a 	.word	0x4065f70a
   16388:	cccccccd 	.word	0xcccccccd
   1638c:	40476ccc 	.word	0x40476ccc
   16390:	0002d1ac 	.word	0x0002d1ac
   16394:	0002d158 	.word	0x0002d158
   16398:	0001a994 	.word	0x0001a994
   1639c:	0001a968 	.word	0x0001a968
   163a0:	0001a980 	.word	0x0001a980
   163a4:	0001a678 	.word	0x0001a678

000163a8 <PWR_write_power_onoff>:
   163a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163ac:	e24dde43 	sub	sp, sp, #1072	; 0x430
   163b0:	e24dd004 	sub	sp, sp, #4
   163b4:	e1a07000 	mov	r7, r0
   163b8:	e1a06001 	mov	r6, r1
   163bc:	e59f0340 	ldr	r0, [pc, #832]	; 16704 <PWR_write_power_onoff+0x35c>
   163c0:	e59f1340 	ldr	r1, [pc, #832]	; 16708 <PWR_write_power_onoff+0x360>
   163c4:	ebffeac2 	bl	10ed4 <fopen@plt>
   163c8:	e2505000 	subs	r5, r0, #0
   163cc:	0a0000c4 	beq	166e4 <PWR_write_power_onoff+0x33c>
   163d0:	e59f8334 	ldr	r8, [pc, #820]	; 1670c <PWR_write_power_onoff+0x364>
   163d4:	e59f9334 	ldr	r9, [pc, #820]	; 16710 <PWR_write_power_onoff+0x368>
   163d8:	e59fa334 	ldr	sl, [pc, #820]	; 16714 <PWR_write_power_onoff+0x36c>
   163dc:	e5d8c000 	ldrb	ip, [r8]
   163e0:	e59f1330 	ldr	r1, [pc, #816]	; 16718 <PWR_write_power_onoff+0x370>
   163e4:	e59f4330 	ldr	r4, [pc, #816]	; 1671c <PWR_write_power_onoff+0x374>
   163e8:	e31c0001 	tst	ip, #1
   163ec:	11a02009 	movne	r2, r9
   163f0:	01a0200a 	moveq	r2, sl
   163f4:	e31c0002 	tst	ip, #2
   163f8:	11a03009 	movne	r3, r9
   163fc:	01a0300a 	moveq	r3, sl
   16400:	e31c0004 	tst	ip, #4
   16404:	11a0e009 	movne	lr, r9
   16408:	01a0e00a 	moveq	lr, sl
   1640c:	e31c0008 	tst	ip, #8
   16410:	11a0b009 	movne	fp, r9
   16414:	01a0b00a 	moveq	fp, sl
   16418:	e31c0010 	tst	ip, #16
   1641c:	e58de000 	str	lr, [sp]
   16420:	11a0e009 	movne	lr, r9
   16424:	01a0e00a 	moveq	lr, sl
   16428:	e31c0020 	tst	ip, #32
   1642c:	11a0c009 	movne	ip, r9
   16430:	01a0c00a 	moveq	ip, sl
   16434:	e98d4800 	stmib	sp, {fp, lr}
   16438:	e58dc00c 	str	ip, [sp, #12]
   1643c:	ebffeb10 	bl	11084 <fprintf@plt>
   16440:	e5d4b000 	ldrb	fp, [r4]
   16444:	e59f12d4 	ldr	r1, [pc, #724]	; 16720 <PWR_write_power_onoff+0x378>
   16448:	e1a00005 	mov	r0, r5
   1644c:	e31b0001 	tst	fp, #1
   16450:	11a02009 	movne	r2, r9
   16454:	01a0200a 	moveq	r2, sl
   16458:	e31b0002 	tst	fp, #2
   1645c:	11a03009 	movne	r3, r9
   16460:	01a0300a 	moveq	r3, sl
   16464:	e31b0004 	tst	fp, #4
   16468:	11a0e009 	movne	lr, r9
   1646c:	01a0e00a 	moveq	lr, sl
   16470:	e31b0008 	tst	fp, #8
   16474:	11a0c009 	movne	ip, r9
   16478:	01a0c00a 	moveq	ip, sl
   1647c:	e31b0010 	tst	fp, #16
   16480:	01a0900a 	moveq	r9, sl
   16484:	e58d9008 	str	r9, [sp, #8]
   16488:	e59f9294 	ldr	r9, [pc, #660]	; 16724 <PWR_write_power_onoff+0x37c>
   1648c:	e58de000 	str	lr, [sp]
   16490:	e58dc004 	str	ip, [sp, #4]
   16494:	ebffeafa 	bl	11084 <fprintf@plt>
   16498:	e1d420d0 	ldrsb	r2, [r4]
   1649c:	e1a00005 	mov	r0, r5
   164a0:	e59f1280 	ldr	r1, [pc, #640]	; 16728 <PWR_write_power_onoff+0x380>
   164a4:	e1a02fa2 	lsr	r2, r2, #31
   164a8:	ebffeaf5 	bl	11084 <fprintf@plt>
   164ac:	e5d93000 	ldrb	r3, [r9]
   164b0:	e3530000 	cmp	r3, #0
   164b4:	1a00006b 	bne	16668 <PWR_write_power_onoff+0x2c0>
   164b8:	e3170001 	tst	r7, #1
   164bc:	0a000086 	beq	166dc <PWR_write_power_onoff+0x334>
   164c0:	e5d81000 	ldrb	r1, [r8]
   164c4:	e59f3260 	ldr	r3, [pc, #608]	; 1672c <PWR_write_power_onoff+0x384>
   164c8:	e59f2260 	ldr	r2, [pc, #608]	; 16730 <PWR_write_power_onoff+0x388>
   164cc:	e3110001 	tst	r1, #1
   164d0:	01a02003 	moveq	r2, r3
   164d4:	e3170002 	tst	r7, #2
   164d8:	0a00007d 	beq	166d4 <PWR_write_power_onoff+0x32c>
   164dc:	e5d80000 	ldrb	r0, [r8]
   164e0:	e59f124c 	ldr	r1, [pc, #588]	; 16734 <PWR_write_power_onoff+0x38c>
   164e4:	e59f324c 	ldr	r3, [pc, #588]	; 16738 <PWR_write_power_onoff+0x390>
   164e8:	e3100002 	tst	r0, #2
   164ec:	01a03001 	moveq	r3, r1
   164f0:	e3170004 	tst	r7, #4
   164f4:	0a000074 	beq	166cc <PWR_write_power_onoff+0x324>
   164f8:	e5d80000 	ldrb	r0, [r8]
   164fc:	e59f1238 	ldr	r1, [pc, #568]	; 1673c <PWR_write_power_onoff+0x394>
   16500:	e59fb238 	ldr	fp, [pc, #568]	; 16740 <PWR_write_power_onoff+0x398>
   16504:	e3100004 	tst	r0, #4
   16508:	01a0b001 	moveq	fp, r1
   1650c:	e3170008 	tst	r7, #8
   16510:	0a00006b 	beq	166c4 <PWR_write_power_onoff+0x31c>
   16514:	e5d80000 	ldrb	r0, [r8]
   16518:	e59f1224 	ldr	r1, [pc, #548]	; 16744 <PWR_write_power_onoff+0x39c>
   1651c:	e59fa224 	ldr	sl, [pc, #548]	; 16748 <PWR_write_power_onoff+0x3a0>
   16520:	e3100008 	tst	r0, #8
   16524:	01a0a001 	moveq	sl, r1
   16528:	e3170010 	tst	r7, #16
   1652c:	0a000062 	beq	166bc <PWR_write_power_onoff+0x314>
   16530:	e5d80000 	ldrb	r0, [r8]
   16534:	e59f1210 	ldr	r1, [pc, #528]	; 1674c <PWR_write_power_onoff+0x3a4>
   16538:	e59fe210 	ldr	lr, [pc, #528]	; 16750 <PWR_write_power_onoff+0x3a8>
   1653c:	e3100010 	tst	r0, #16
   16540:	01a0e001 	moveq	lr, r1
   16544:	e3170020 	tst	r7, #32
   16548:	0a000059 	beq	166b4 <PWR_write_power_onoff+0x30c>
   1654c:	e5d80000 	ldrb	r0, [r8]
   16550:	e59f11fc 	ldr	r1, [pc, #508]	; 16754 <PWR_write_power_onoff+0x3ac>
   16554:	e59f71fc 	ldr	r7, [pc, #508]	; 16758 <PWR_write_power_onoff+0x3b0>
   16558:	e3100020 	tst	r0, #32
   1655c:	01a07001 	moveq	r7, r1
   16560:	e3160001 	tst	r6, #1
   16564:	0a00004f 	beq	166a8 <PWR_write_power_onoff+0x300>
   16568:	e5d4c000 	ldrb	ip, [r4]
   1656c:	e59f01e8 	ldr	r0, [pc, #488]	; 1675c <PWR_write_power_onoff+0x3b4>
   16570:	e59f11e8 	ldr	r1, [pc, #488]	; 16760 <PWR_write_power_onoff+0x3b8>
   16574:	e31c0001 	tst	ip, #1
   16578:	11a01000 	movne	r1, r0
   1657c:	e58d1028 	str	r1, [sp, #40]	; 0x28
   16580:	e3160002 	tst	r6, #2
   16584:	0a000044 	beq	1669c <PWR_write_power_onoff+0x2f4>
   16588:	e5d4c000 	ldrb	ip, [r4]
   1658c:	e59f01d0 	ldr	r0, [pc, #464]	; 16764 <PWR_write_power_onoff+0x3bc>
   16590:	e59f11d0 	ldr	r1, [pc, #464]	; 16768 <PWR_write_power_onoff+0x3c0>
   16594:	e31c0002 	tst	ip, #2
   16598:	11a01000 	movne	r1, r0
   1659c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   165a0:	e3160004 	tst	r6, #4
   165a4:	0a00003a 	beq	16694 <PWR_write_power_onoff+0x2ec>
   165a8:	e5d40000 	ldrb	r0, [r4]
   165ac:	e59f11b8 	ldr	r1, [pc, #440]	; 1676c <PWR_write_power_onoff+0x3c4>
   165b0:	e59fc1b8 	ldr	ip, [pc, #440]	; 16770 <PWR_write_power_onoff+0x3c8>
   165b4:	e3100004 	tst	r0, #4
   165b8:	01a0c001 	moveq	ip, r1
   165bc:	e3160008 	tst	r6, #8
   165c0:	0a000031 	beq	1668c <PWR_write_power_onoff+0x2e4>
   165c4:	e5d48000 	ldrb	r8, [r4]
   165c8:	e59f11a4 	ldr	r1, [pc, #420]	; 16774 <PWR_write_power_onoff+0x3cc>
   165cc:	e59f01a4 	ldr	r0, [pc, #420]	; 16778 <PWR_write_power_onoff+0x3d0>
   165d0:	e3180008 	tst	r8, #8
   165d4:	01a00001 	moveq	r0, r1
   165d8:	e3160010 	tst	r6, #16
   165dc:	0a000028 	beq	16684 <PWR_write_power_onoff+0x2dc>
   165e0:	e5d48000 	ldrb	r8, [r4]
   165e4:	e59f4190 	ldr	r4, [pc, #400]	; 1677c <PWR_write_power_onoff+0x3d4>
   165e8:	e59f1190 	ldr	r1, [pc, #400]	; 16780 <PWR_write_power_onoff+0x3d8>
   165ec:	e3180010 	tst	r8, #16
   165f0:	01a01004 	moveq	r1, r4
   165f4:	e98d4400 	stmib	sp, {sl, lr}
   165f8:	e59de028 	ldr	lr, [sp, #40]	; 0x28
   165fc:	e3160080 	tst	r6, #128	; 0x80
   16600:	e59f617c 	ldr	r6, [pc, #380]	; 16784 <PWR_write_power_onoff+0x3dc>
   16604:	e59f417c 	ldr	r4, [pc, #380]	; 16788 <PWR_write_power_onoff+0x3e0>
   16608:	e58de010 	str	lr, [sp, #16]
   1660c:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
   16610:	01a04006 	moveq	r4, r6
   16614:	e58d001c 	str	r0, [sp, #28]
   16618:	e58d1020 	str	r1, [sp, #32]
   1661c:	e58db000 	str	fp, [sp]
   16620:	e58d700c 	str	r7, [sp, #12]
   16624:	e58de014 	str	lr, [sp, #20]
   16628:	e58dc018 	str	ip, [sp, #24]
   1662c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   16630:	e28d0030 	add	r0, sp, #48	; 0x30
   16634:	e59f1150 	ldr	r1, [pc, #336]	; 1678c <PWR_write_power_onoff+0x3e4>
   16638:	ebffeacd 	bl	11174 <sprintf@plt>
   1663c:	e59f314c 	ldr	r3, [pc, #332]	; 16790 <PWR_write_power_onoff+0x3e8>
   16640:	e5933000 	ldr	r3, [r3]
   16644:	e3530001 	cmp	r3, #1
   16648:	da000003 	ble	1665c <PWR_write_power_onoff+0x2b4>
   1664c:	e3a0001f 	mov	r0, #31
   16650:	e59f113c 	ldr	r1, [pc, #316]	; 16794 <PWR_write_power_onoff+0x3ec>
   16654:	e28d2030 	add	r2, sp, #48	; 0x30
   16658:	ebffeac2 	bl	11168 <syslog@plt>
   1665c:	e28d1030 	add	r1, sp, #48	; 0x30
   16660:	e59f0130 	ldr	r0, [pc, #304]	; 16798 <PWR_write_power_onoff+0x3f0>
   16664:	ebfffd72 	bl	15c34 <MS_run_event>
   16668:	e1a00005 	mov	r0, r5
   1666c:	ebffeaae 	bl	1112c <fclose@plt>
   16670:	e3a03000 	mov	r3, #0
   16674:	e5c93000 	strb	r3, [r9]
   16678:	e28dde43 	add	sp, sp, #1072	; 0x430
   1667c:	e28dd004 	add	sp, sp, #4
   16680:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16684:	e59f10f8 	ldr	r1, [pc, #248]	; 16784 <PWR_write_power_onoff+0x3dc>
   16688:	eaffffd9 	b	165f4 <PWR_write_power_onoff+0x24c>
   1668c:	e59f00f0 	ldr	r0, [pc, #240]	; 16784 <PWR_write_power_onoff+0x3dc>
   16690:	eaffffd0 	b	165d8 <PWR_write_power_onoff+0x230>
   16694:	e59fc0e8 	ldr	ip, [pc, #232]	; 16784 <PWR_write_power_onoff+0x3dc>
   16698:	eaffffc7 	b	165bc <PWR_write_power_onoff+0x214>
   1669c:	e59f10e0 	ldr	r1, [pc, #224]	; 16784 <PWR_write_power_onoff+0x3dc>
   166a0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   166a4:	eaffffbd 	b	165a0 <PWR_write_power_onoff+0x1f8>
   166a8:	e59f10d4 	ldr	r1, [pc, #212]	; 16784 <PWR_write_power_onoff+0x3dc>
   166ac:	e58d1028 	str	r1, [sp, #40]	; 0x28
   166b0:	eaffffb2 	b	16580 <PWR_write_power_onoff+0x1d8>
   166b4:	e59f70c8 	ldr	r7, [pc, #200]	; 16784 <PWR_write_power_onoff+0x3dc>
   166b8:	eaffffa8 	b	16560 <PWR_write_power_onoff+0x1b8>
   166bc:	e59fe0c0 	ldr	lr, [pc, #192]	; 16784 <PWR_write_power_onoff+0x3dc>
   166c0:	eaffff9f 	b	16544 <PWR_write_power_onoff+0x19c>
   166c4:	e59fa0b8 	ldr	sl, [pc, #184]	; 16784 <PWR_write_power_onoff+0x3dc>
   166c8:	eaffff96 	b	16528 <PWR_write_power_onoff+0x180>
   166cc:	e59fb0b0 	ldr	fp, [pc, #176]	; 16784 <PWR_write_power_onoff+0x3dc>
   166d0:	eaffff8d 	b	1650c <PWR_write_power_onoff+0x164>
   166d4:	e59f30a8 	ldr	r3, [pc, #168]	; 16784 <PWR_write_power_onoff+0x3dc>
   166d8:	eaffff84 	b	164f0 <PWR_write_power_onoff+0x148>
   166dc:	e59f20a0 	ldr	r2, [pc, #160]	; 16784 <PWR_write_power_onoff+0x3dc>
   166e0:	eaffff7b 	b	164d4 <PWR_write_power_onoff+0x12c>
   166e4:	ebffea72 	bl	110b4 <__errno_location@plt>
   166e8:	e5900000 	ldr	r0, [r0]
   166ec:	ebffea40 	bl	10ff4 <strerror@plt>
   166f0:	e59f10a4 	ldr	r1, [pc, #164]	; 1679c <PWR_write_power_onoff+0x3f4>
   166f4:	e1a02000 	mov	r2, r0
   166f8:	e3a0001b 	mov	r0, #27
   166fc:	ebffea99 	bl	11168 <syslog@plt>
   16700:	eaffffdc 	b	16678 <PWR_write_power_onoff+0x2d0>
   16704:	0001ab58 	.word	0x0001ab58
   16708:	0001a678 	.word	0x0001a678
   1670c:	0002b9bb 	.word	0x0002b9bb
   16710:	0001a8a0 	.word	0x0001a8a0
   16714:	0001a720 	.word	0x0001a720
   16718:	0001aba0 	.word	0x0001aba0
   1671c:	0002b9b9 	.word	0x0002b9b9
   16720:	0001ac04 	.word	0x0001ac04
   16724:	0002b90c 	.word	0x0002b90c
   16728:	0001ac78 	.word	0x0001ac78
   1672c:	0001a9b0 	.word	0x0001a9b0
   16730:	0001a9bc 	.word	0x0001a9bc
   16734:	0001aa6c 	.word	0x0001aa6c
   16738:	0001aa84 	.word	0x0001aa84
   1673c:	0001a9c8 	.word	0x0001a9c8
   16740:	0001a9d8 	.word	0x0001a9d8
   16744:	0001a9e8 	.word	0x0001a9e8
   16748:	0001a9fc 	.word	0x0001a9fc
   1674c:	0001aa10 	.word	0x0001aa10
   16750:	0001aa28 	.word	0x0001aa28
   16754:	0001ab0c 	.word	0x0001ab0c
   16758:	0001ab28 	.word	0x0001ab28
   1675c:	0001aa54 	.word	0x0001aa54
   16760:	0001aa40 	.word	0x0001aa40
   16764:	0001aa80 	.word	0x0001aa80
   16768:	0001aa68 	.word	0x0001aa68
   1676c:	0001aa98 	.word	0x0001aa98
   16770:	0001aab4 	.word	0x0001aab4
   16774:	0001aad0 	.word	0x0001aad0
   16778:	0001aaec 	.word	0x0001aaec
   1677c:	0001ab08 	.word	0x0001ab08
   16780:	0001ab24 	.word	0x0001ab24
   16784:	00019c48 	.word	0x00019c48
   16788:	0001ab40 	.word	0x0001ab40
   1678c:	0001ac88 	.word	0x0001ac88
   16790:	0002d0ec 	.word	0x0002d0ec
   16794:	0001aca4 	.word	0x0001aca4
   16798:	0002b9cc 	.word	0x0002b9cc
   1679c:	0001ab6c 	.word	0x0001ab6c

000167a0 <PWR_get_power>:
   167a0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   167a4:	ed2d8b02 	vpush	{d8}
   167a8:	e3a03020 	mov	r3, #32
   167ac:	e59f01ac 	ldr	r0, [pc, #428]	; 16960 <PWR_get_power+0x1c0>
   167b0:	e3a02009 	mov	r2, #9
   167b4:	e24dd01c 	sub	sp, sp, #28
   167b8:	e28d1018 	add	r1, sp, #24
   167bc:	e561300c 	strb	r3, [r1, #-12]!
   167c0:	ebfff33c 	bl	134b8 <spi_read>
   167c4:	e2501000 	subs	r1, r0, #0
   167c8:	1a000056 	bne	16928 <PWR_get_power+0x188>
   167cc:	e59f4190 	ldr	r4, [pc, #400]	; 16964 <PWR_get_power+0x1c4>
   167d0:	e5ddc00d 	ldrb	ip, [sp, #13]
   167d4:	e59f218c 	ldr	r2, [pc, #396]	; 16968 <PWR_get_power+0x1c8>
   167d8:	e5d43000 	ldrb	r3, [r4]
   167dc:	e5d4e001 	ldrb	lr, [r4, #1]
   167e0:	e5c2c000 	strb	ip, [r2]
   167e4:	e15c0003 	cmp	ip, r3
   167e8:	e5dd2013 	ldrb	r2, [sp, #19]
   167ec:	e59f5178 	ldr	r5, [pc, #376]	; 1696c <PWR_get_power+0x1cc>
   167f0:	0a000047 	beq	16914 <PWR_get_power+0x174>
   167f4:	e152000e 	cmp	r2, lr
   167f8:	e023000c 	eor	r0, r3, ip
   167fc:	e5c4c000 	strb	ip, [r4]
   16800:	e5c52000 	strb	r2, [r5]
   16804:	0a000001 	beq	16810 <PWR_get_power+0x70>
   16808:	e02e1002 	eor	r1, lr, r2
   1680c:	e5c42001 	strb	r2, [r4, #1]
   16810:	e1803001 	orr	r3, r0, r1
   16814:	e31300ff 	tst	r3, #255	; 0xff
   16818:	1a00003b 	bne	1690c <PWR_get_power+0x16c>
   1681c:	e5dd000e 	ldrb	r0, [sp, #14]
   16820:	e59f3148 	ldr	r3, [pc, #328]	; 16970 <PWR_get_power+0x1d0>
   16824:	e5dd200f 	ldrb	r2, [sp, #15]
   16828:	e59f1144 	ldr	r1, [pc, #324]	; 16974 <PWR_get_power+0x1d4>
   1682c:	e5933000 	ldr	r3, [r3]
   16830:	e0822400 	add	r2, r2, r0, lsl #8
   16834:	e5911000 	ldr	r1, [r1]
   16838:	e0623003 	rsb	r3, r2, r3
   1683c:	ed9f5b45 	vldr	d5, [pc, #276]	; 16958 <PWR_get_power+0x1b8>
   16840:	ee073a10 	vmov	s14, r3
   16844:	ee071a90 	vmov	s15, r1
   16848:	e5ddc010 	ldrb	ip, [sp, #16]
   1684c:	e5dd1011 	ldrb	r1, [sp, #17]
   16850:	eeb86bc7 	vcvt.f64.s32	d6, s14
   16854:	eeb87be7 	vcvt.f64.s32	d7, s15
   16858:	e59f7118 	ldr	r7, [pc, #280]	; 16978 <PWR_get_power+0x1d8>
   1685c:	e59f6118 	ldr	r6, [pc, #280]	; 1697c <PWR_get_power+0x1dc>
   16860:	e5dd3012 	ldrb	r3, [sp, #18]
   16864:	e59f8114 	ldr	r8, [pc, #276]	; 16980 <PWR_get_power+0x1e0>
   16868:	e5940004 	ldr	r0, [r4, #4]
   1686c:	e081140c 	add	r1, r1, ip, lsl #8
   16870:	e3500000 	cmp	r0, #0
   16874:	ee867b07 	vdiv.f64	d7, d6, d7
   16878:	e5872000 	str	r2, [r7]
   1687c:	e5861000 	str	r1, [r6]
   16880:	e5c83000 	strb	r3, [r8]
   16884:	e59f90d8 	ldr	r9, [pc, #216]	; 16964 <PWR_get_power+0x1c4>
   16888:	ee277b05 	vmul.f64	d7, d7, d5
   1688c:	eebd8bc7 	vcvt.s32.f64	s16, d7
   16890:	0a00002a 	beq	16940 <PWR_get_power+0x1a0>
   16894:	e59f10e8 	ldr	r1, [pc, #232]	; 16984 <PWR_get_power+0x1e4>
   16898:	ee182a10 	vmov	r2, s16
   1689c:	ebffe9f8 	bl	11084 <fprintf@plt>
   168a0:	e59f30e0 	ldr	r3, [pc, #224]	; 16988 <PWR_get_power+0x1e8>
   168a4:	e5933000 	ldr	r3, [r3]
   168a8:	e3530001 	cmp	r3, #1
   168ac:	da000006 	ble	168cc <PWR_get_power+0x12c>
   168b0:	e5d51000 	ldrb	r1, [r5]
   168b4:	e5963000 	ldr	r3, [r6]
   168b8:	e5972000 	ldr	r2, [r7]
   168bc:	e58d1000 	str	r1, [sp]
   168c0:	e5940004 	ldr	r0, [r4, #4]
   168c4:	e59f10c0 	ldr	r1, [pc, #192]	; 1698c <PWR_get_power+0x1ec>
   168c8:	ebffe9ed 	bl	11084 <fprintf@plt>
   168cc:	e5940004 	ldr	r0, [r4, #4]
   168d0:	ebffe985 	bl	10eec <fflush@plt>
   168d4:	e5945004 	ldr	r5, [r4, #4]
   168d8:	e1a00005 	mov	r0, r5
   168dc:	ebffea0c 	bl	11114 <fileno@plt>
   168e0:	e1a06000 	mov	r6, r0
   168e4:	e1a00005 	mov	r0, r5
   168e8:	ebffe991 	bl	10f34 <ftell@plt>
   168ec:	e1a01000 	mov	r1, r0
   168f0:	e1a00006 	mov	r0, r6
   168f4:	ebffea09 	bl	11120 <ftruncate@plt>
   168f8:	e5940004 	ldr	r0, [r4, #4]
   168fc:	ebffe992 	bl	10f4c <rewind@plt>
   16900:	e28dd01c 	add	sp, sp, #28
   16904:	ecbd8b02 	vpop	{d8}
   16908:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1690c:	ebfffea5 	bl	163a8 <PWR_write_power_onoff>
   16910:	eaffffc1 	b	1681c <PWR_get_power+0x7c>
   16914:	e152000e 	cmp	r2, lr
   16918:	e5c52000 	strb	r2, [r5]
   1691c:	11a00001 	movne	r0, r1
   16920:	1affffb8 	bne	16808 <PWR_get_power+0x68>
   16924:	eaffffbc 	b	1681c <PWR_get_power+0x7c>
   16928:	e3a0001b 	mov	r0, #27
   1692c:	e59f105c 	ldr	r1, [pc, #92]	; 16990 <PWR_get_power+0x1f0>
   16930:	ebffea0c 	bl	11168 <syslog@plt>
   16934:	e28dd01c 	add	sp, sp, #28
   16938:	ecbd8b02 	vpop	{d8}
   1693c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16940:	e59f004c 	ldr	r0, [pc, #76]	; 16994 <PWR_get_power+0x1f4>
   16944:	e59f104c 	ldr	r1, [pc, #76]	; 16998 <PWR_get_power+0x1f8>
   16948:	ebffe961 	bl	10ed4 <fopen@plt>
   1694c:	e5d83000 	ldrb	r3, [r8]
   16950:	e5890004 	str	r0, [r9, #4]
   16954:	eaffffce 	b	16894 <PWR_get_power+0xf4>
   16958:	00000000 	.word	0x00000000
   1695c:	406cc000 	.word	0x406cc000
   16960:	0002d1a4 	.word	0x0002d1a4
   16964:	0002d160 	.word	0x0002d160
   16968:	0002b9bb 	.word	0x0002b9bb
   1696c:	0002b9b9 	.word	0x0002b9b9
   16970:	0002b9c4 	.word	0x0002b9c4
   16974:	0002b3b8 	.word	0x0002b3b8
   16978:	0002b9c8 	.word	0x0002b9c8
   1697c:	0002b9bc 	.word	0x0002b9bc
   16980:	0002b9ba 	.word	0x0002b9ba
   16984:	0001ace4 	.word	0x0001ace4
   16988:	0002d0ec 	.word	0x0002d0ec
   1698c:	0001acfc 	.word	0x0001acfc
   16990:	0001acb4 	.word	0x0001acb4
   16994:	0001acd0 	.word	0x0001acd0
   16998:	0001a678 	.word	0x0001a678

0001699c <PWR_power_off_abb>:
   1699c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   169a0:	e24dd00c 	sub	sp, sp, #12
   169a4:	e3a03001 	mov	r3, #1
   169a8:	e5cd0004 	strb	r0, [sp, #4]
   169ac:	e28d1004 	add	r1, sp, #4
   169b0:	e59f002c 	ldr	r0, [pc, #44]	; 169e4 <PWR_power_off_abb+0x48>
   169b4:	e3a02002 	mov	r2, #2
   169b8:	e5cd3005 	strb	r3, [sp, #5]
   169bc:	ebfff30d 	bl	135f8 <spi_write>
   169c0:	e3500000 	cmp	r0, #0
   169c4:	1a000001 	bne	169d0 <PWR_power_off_abb+0x34>
   169c8:	e28dd00c 	add	sp, sp, #12
   169cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   169d0:	e3a0001b 	mov	r0, #27
   169d4:	e59f100c 	ldr	r1, [pc, #12]	; 169e8 <PWR_power_off_abb+0x4c>
   169d8:	ebffe9e2 	bl	11168 <syslog@plt>
   169dc:	e28dd00c 	add	sp, sp, #12
   169e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   169e4:	0002d1a4 	.word	0x0002d1a4
   169e8:	0001ad18 	.word	0x0001ad18

000169ec <PWR_get_sens_curr>:
   169ec:	e92d4030 	push	{r4, r5, lr}
   169f0:	ed2d8b02 	vpush	{d8}
   169f4:	e3a03001 	mov	r3, #1
   169f8:	e59f00a8 	ldr	r0, [pc, #168]	; 16aa8 <PWR_get_sens_curr+0xbc>
   169fc:	e3a02003 	mov	r2, #3
   16a00:	e24dd00c 	sub	sp, sp, #12
   16a04:	e28d1008 	add	r1, sp, #8
   16a08:	e5613004 	strb	r3, [r1, #-4]!
   16a0c:	ebfff2a9 	bl	134b8 <spi_read>
   16a10:	e3500000 	cmp	r0, #0
   16a14:	1a00001b 	bne	16a88 <PWR_get_sens_curr+0x9c>
   16a18:	e5dd3005 	ldrb	r3, [sp, #5]
   16a1c:	ed9f7b1f 	vldr	d7, [pc, #124]	; 16aa0 <PWR_get_sens_curr+0xb4>
   16a20:	e59f1084 	ldr	r1, [pc, #132]	; 16aac <PWR_get_sens_curr+0xc0>
   16a24:	e26330bf 	rsb	r3, r3, #191	; 0xbf
   16a28:	e59f0080 	ldr	r0, [pc, #128]	; 16ab0 <PWR_get_sens_curr+0xc4>
   16a2c:	ee083a10 	vmov	s16, r3
   16a30:	eeb88bc8 	vcvt.f64.s32	d8, s16
   16a34:	ee288b07 	vmul.f64	d8, d8, d7
   16a38:	ebffe925 	bl	10ed4 <fopen@plt>
   16a3c:	e59f1070 	ldr	r1, [pc, #112]	; 16ab4 <PWR_get_sens_curr+0xc8>
   16a40:	ec532b18 	vmov	r2, r3, d8
   16a44:	e1a04000 	mov	r4, r0
   16a48:	ebffe98d 	bl	11084 <fprintf@plt>
   16a4c:	e1a00004 	mov	r0, r4
   16a50:	ebffe925 	bl	10eec <fflush@plt>
   16a54:	e1a00004 	mov	r0, r4
   16a58:	ebffe9ad 	bl	11114 <fileno@plt>
   16a5c:	e1a05000 	mov	r5, r0
   16a60:	e1a00004 	mov	r0, r4
   16a64:	ebffe932 	bl	10f34 <ftell@plt>
   16a68:	e1a01000 	mov	r1, r0
   16a6c:	e1a00005 	mov	r0, r5
   16a70:	ebffe9aa 	bl	11120 <ftruncate@plt>
   16a74:	e1a00004 	mov	r0, r4
   16a78:	ebffe933 	bl	10f4c <rewind@plt>
   16a7c:	e28dd00c 	add	sp, sp, #12
   16a80:	ecbd8b02 	vpop	{d8}
   16a84:	e8bd8030 	pop	{r4, r5, pc}
   16a88:	e3a0001b 	mov	r0, #27
   16a8c:	e59f1024 	ldr	r1, [pc, #36]	; 16ab8 <PWR_get_sens_curr+0xcc>
   16a90:	ebffe9b4 	bl	11168 <syslog@plt>
   16a94:	e28dd00c 	add	sp, sp, #12
   16a98:	ecbd8b02 	vpop	{d8}
   16a9c:	e8bd8030 	pop	{r4, r5, pc}
   16aa0:	11111111 	.word	0x11111111
   16aa4:	3fc11111 	.word	0x3fc11111
   16aa8:	0002d1ac 	.word	0x0002d1ac
   16aac:	0001a678 	.word	0x0001a678
   16ab0:	0001ad4c 	.word	0x0001ad4c
   16ab4:	0001ad60 	.word	0x0001ad60
   16ab8:	0001ad34 	.word	0x0001ad34

00016abc <PWR_get_wc_lamp>:
   16abc:	e92d4070 	push	{r4, r5, r6, lr}
   16ac0:	e24dd010 	sub	sp, sp, #16
   16ac4:	e28d1010 	add	r1, sp, #16
   16ac8:	e3a04000 	mov	r4, #0
   16acc:	e5614004 	strb	r4, [r1, #-4]!
   16ad0:	e59f00d8 	ldr	r0, [pc, #216]	; 16bb0 <PWR_get_wc_lamp+0xf4>
   16ad4:	e3a02003 	mov	r2, #3
   16ad8:	ebfff276 	bl	134b8 <spi_read>
   16adc:	e1500004 	cmp	r0, r4
   16ae0:	1a000023 	bne	16b74 <PWR_get_wc_lamp+0xb8>
   16ae4:	e59f30c8 	ldr	r3, [pc, #200]	; 16bb4 <PWR_get_wc_lamp+0xf8>
   16ae8:	e5dd200d 	ldrb	r2, [sp, #13]
   16aec:	e5d30008 	ldrb	r0, [r3, #8]
   16af0:	e1520000 	cmp	r2, r0
   16af4:	0a00001b 	beq	16b68 <PWR_get_wc_lamp+0xac>
   16af8:	e59f00b8 	ldr	r0, [pc, #184]	; 16bb8 <PWR_get_wc_lamp+0xfc>
   16afc:	e59f10b8 	ldr	r1, [pc, #184]	; 16bbc <PWR_get_wc_lamp+0x100>
   16b00:	e5c32008 	strb	r2, [r3, #8]
   16b04:	ebffe8f2 	bl	10ed4 <fopen@plt>
   16b08:	e2504000 	subs	r4, r0, #0
   16b0c:	0a00001e 	beq	16b8c <PWR_get_wc_lamp+0xd0>
   16b10:	e5ddc00d 	ldrb	ip, [sp, #13]
   16b14:	e59f10a4 	ldr	r1, [pc, #164]	; 16bc0 <PWR_get_wc_lamp+0x104>
   16b18:	e59f50a4 	ldr	r5, [pc, #164]	; 16bc4 <PWR_get_wc_lamp+0x108>
   16b1c:	e31c0001 	tst	ip, #1
   16b20:	11a02001 	movne	r2, r1
   16b24:	01a02005 	moveq	r2, r5
   16b28:	e31c0002 	tst	ip, #2
   16b2c:	11a03001 	movne	r3, r1
   16b30:	01a03005 	moveq	r3, r5
   16b34:	e59fe08c 	ldr	lr, [pc, #140]	; 16bc8 <PWR_get_wc_lamp+0x10c>
   16b38:	e31c0004 	tst	ip, #4
   16b3c:	e59f6088 	ldr	r6, [pc, #136]	; 16bcc <PWR_get_wc_lamp+0x110>
   16b40:	01a01005 	moveq	r1, r5
   16b44:	e31c0008 	tst	ip, #8
   16b48:	11a0c00e 	movne	ip, lr
   16b4c:	01a0c006 	moveq	ip, r6
   16b50:	e88d1002 	stm	sp, {r1, ip}
   16b54:	e59f1074 	ldr	r1, [pc, #116]	; 16bd0 <PWR_get_wc_lamp+0x114>
   16b58:	ebffe949 	bl	11084 <fprintf@plt>
   16b5c:	e1a00004 	mov	r0, r4
   16b60:	ebffe971 	bl	1112c <fclose@plt>
   16b64:	e5dd000d 	ldrb	r0, [sp, #13]
   16b68:	e2000007 	and	r0, r0, #7
   16b6c:	e28dd010 	add	sp, sp, #16
   16b70:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b74:	e3a0001b 	mov	r0, #27
   16b78:	e59f1054 	ldr	r1, [pc, #84]	; 16bd4 <PWR_get_wc_lamp+0x118>
   16b7c:	ebffe979 	bl	11168 <syslog@plt>
   16b80:	e1a00004 	mov	r0, r4
   16b84:	e28dd010 	add	sp, sp, #16
   16b88:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b8c:	ebffe948 	bl	110b4 <__errno_location@plt>
   16b90:	e5900000 	ldr	r0, [r0]
   16b94:	ebffe916 	bl	10ff4 <strerror@plt>
   16b98:	e59f1038 	ldr	r1, [pc, #56]	; 16bd8 <PWR_get_wc_lamp+0x11c>
   16b9c:	e1a02000 	mov	r2, r0
   16ba0:	e3a0001b 	mov	r0, #27
   16ba4:	ebffe96f 	bl	11168 <syslog@plt>
   16ba8:	e1a00004 	mov	r0, r4
   16bac:	eaffffee 	b	16b6c <PWR_get_wc_lamp+0xb0>
   16bb0:	0002d1ac 	.word	0x0002d1ac
   16bb4:	0002d160 	.word	0x0002d160
   16bb8:	0001ad84 	.word	0x0001ad84
   16bbc:	0001a678 	.word	0x0001a678
   16bc0:	0001a8a0 	.word	0x0001a8a0
   16bc4:	0001a720 	.word	0x0001a720
   16bc8:	0001ad7c 	.word	0x0001ad7c
   16bcc:	0001ad80 	.word	0x0001ad80
   16bd0:	0001adc4 	.word	0x0001adc4
   16bd4:	0001ad34 	.word	0x0001ad34
   16bd8:	0001ad94 	.word	0x0001ad94
   16bdc:	e1a00000 	nop			; (mov r0, r0)

00016be0 <RFID_get_token>:
   16be0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16be4:	e24dd020 	sub	sp, sp, #32
   16be8:	e28d4020 	add	r4, sp, #32
   16bec:	e3a05000 	mov	r5, #0
   16bf0:	e5645014 	strb	r5, [r4, #-20]!	; 0xffffffec
   16bf4:	e5c05017 	strb	r5, [r0, #23]
   16bf8:	e5c05018 	strb	r5, [r0, #24]
   16bfc:	e1a06000 	mov	r6, r0
   16c00:	e1a01004 	mov	r1, r4
   16c04:	e59f0158 	ldr	r0, [pc, #344]	; 16d64 <RFID_get_token+0x184>
   16c08:	e3a0200b 	mov	r2, #11
   16c0c:	ebfff229 	bl	134b8 <spi_read>
   16c10:	e2507000 	subs	r7, r0, #0
   16c14:	1a000009 	bne	16c40 <RFID_get_token+0x60>
   16c18:	e5dd300d 	ldrb	r3, [sp, #13]
   16c1c:	e35300ff 	cmp	r3, #255	; 0xff
   16c20:	0a00003b 	beq	16d14 <RFID_get_token+0x134>
   16c24:	e5dd500e 	ldrb	r5, [sp, #14]
   16c28:	e3550000 	cmp	r5, #0
   16c2c:	1a000007 	bne	16c50 <RFID_get_token+0x70>
   16c30:	e2860007 	add	r0, r6, #7
   16c34:	e3a01000 	mov	r1, #0
   16c38:	e3a02010 	mov	r2, #16
   16c3c:	ebffe928 	bl	110e4 <memset@plt>
   16c40:	e1a07005 	mov	r7, r5
   16c44:	e1a00007 	mov	r0, r7
   16c48:	e28dd020 	add	sp, sp, #32
   16c4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c50:	e28d3020 	add	r3, sp, #32
   16c54:	e3550004 	cmp	r5, #4
   16c58:	e5332011 	ldr	r2, [r3, #-17]!	; 0xffffffef
   16c5c:	e5862000 	str	r2, [r6]
   16c60:	e1d320b4 	ldrh	r2, [r3, #4]
   16c64:	e5d33006 	ldrb	r3, [r3, #6]
   16c68:	e1c620b4 	strh	r2, [r6, #4]
   16c6c:	e5c63006 	strb	r3, [r6, #6]
   16c70:	1affffee 	bne	16c30 <RFID_get_token+0x50>
   16c74:	e3a03010 	mov	r3, #16
   16c78:	e59f00e4 	ldr	r0, [pc, #228]	; 16d64 <RFID_get_token+0x184>
   16c7c:	e1a01004 	mov	r1, r4
   16c80:	e3a0200a 	mov	r2, #10
   16c84:	e5847000 	str	r7, [r4]
   16c88:	e5cd300c 	strb	r3, [sp, #12]
   16c8c:	e58d7010 	str	r7, [sp, #16]
   16c90:	e58d7014 	str	r7, [sp, #20]
   16c94:	e58d7018 	str	r7, [sp, #24]
   16c98:	e58d701c 	str	r7, [sp, #28]
   16c9c:	ebfff205 	bl	134b8 <spi_read>
   16ca0:	e2503000 	subs	r3, r0, #0
   16ca4:	1a000016 	bne	16d04 <RFID_get_token+0x124>
   16ca8:	e28d8020 	add	r8, sp, #32
   16cac:	e3a0c018 	mov	ip, #24
   16cb0:	e5382013 	ldr	r2, [r8, #-19]!	; 0xffffffed
   16cb4:	e1a01004 	mov	r1, r4
   16cb8:	e5862007 	str	r2, [r6, #7]
   16cbc:	e5982004 	ldr	r2, [r8, #4]
   16cc0:	e59f009c 	ldr	r0, [pc, #156]	; 16d64 <RFID_get_token+0x184>
   16cc4:	e586200b 	str	r2, [r6, #11]
   16cc8:	e3a0200a 	mov	r2, #10
   16ccc:	e5843000 	str	r3, [r4]
   16cd0:	e58d3010 	str	r3, [sp, #16]
   16cd4:	e58d3014 	str	r3, [sp, #20]
   16cd8:	e58d3018 	str	r3, [sp, #24]
   16cdc:	e58d301c 	str	r3, [sp, #28]
   16ce0:	e5cdc00c 	strb	ip, [sp, #12]
   16ce4:	ebfff1f3 	bl	134b8 <spi_read>
   16ce8:	e3500000 	cmp	r0, #0
   16cec:	1a000004 	bne	16d04 <RFID_get_token+0x124>
   16cf0:	e5982000 	ldr	r2, [r8]
   16cf4:	e5983004 	ldr	r3, [r8, #4]
   16cf8:	e586200f 	str	r2, [r6, #15]
   16cfc:	e5863013 	str	r3, [r6, #19]
   16d00:	eaffffce 	b	16c40 <RFID_get_token+0x60>
   16d04:	e3a0001b 	mov	r0, #27
   16d08:	e59f1058 	ldr	r1, [pc, #88]	; 16d68 <RFID_get_token+0x188>
   16d0c:	ebffe915 	bl	11168 <syslog@plt>
   16d10:	eaffffcb 	b	16c44 <RFID_get_token+0x64>
   16d14:	e3a0001e 	mov	r0, #30
   16d18:	e59f104c 	ldr	r1, [pc, #76]	; 16d6c <RFID_get_token+0x18c>
   16d1c:	ebffe911 	bl	11168 <syslog@plt>
   16d20:	e59f3048 	ldr	r3, [pc, #72]	; 16d70 <RFID_get_token+0x190>
   16d24:	e28d1020 	add	r1, sp, #32
   16d28:	e3e02000 	mvn	r2, #0
   16d2c:	e1d3c0b4 	ldrh	ip, [r3, #4]
   16d30:	e5933000 	ldr	r3, [r3]
   16d34:	e561201c 	strb	r2, [r1, #-28]!	; 0xffffffe4
   16d38:	e59f0024 	ldr	r0, [pc, #36]	; 16d64 <RFID_get_token+0x184>
   16d3c:	e3a02007 	mov	r2, #7
   16d40:	e58d3005 	str	r3, [sp, #5]
   16d44:	e1cdc0b9 	strh	ip, [sp, #9]
   16d48:	ebfff22a 	bl	135f8 <spi_write>
   16d4c:	e1500005 	cmp	r0, r5
   16d50:	0affffbb 	beq	16c44 <RFID_get_token+0x64>
   16d54:	e3a0001b 	mov	r0, #27
   16d58:	e59f1014 	ldr	r1, [pc, #20]	; 16d74 <RFID_get_token+0x194>
   16d5c:	ebffe901 	bl	11168 <syslog@plt>
   16d60:	eaffffb7 	b	16c44 <RFID_get_token+0x64>
   16d64:	0002d1b4 	.word	0x0002d1b4
   16d68:	0001ae20 	.word	0x0001ae20
   16d6c:	0001adf8 	.word	0x0001adf8
   16d70:	0002b9ac 	.word	0x0002b9ac
   16d74:	0001ae08 	.word	0x0001ae08

00016d78 <RFID_newkey>:
   16d78:	e59f3050 	ldr	r3, [pc, #80]	; 16dd0 <RFID_newkey+0x58>
   16d7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16d80:	e24dd00c 	sub	sp, sp, #12
   16d84:	e1d3c0b4 	ldrh	ip, [r3, #4]
   16d88:	e28d1008 	add	r1, sp, #8
   16d8c:	e3e02001 	mvn	r2, #1
   16d90:	e5933000 	ldr	r3, [r3]
   16d94:	e5612008 	strb	r2, [r1, #-8]!
   16d98:	e59f0034 	ldr	r0, [pc, #52]	; 16dd4 <RFID_newkey+0x5c>
   16d9c:	e3a02007 	mov	r2, #7
   16da0:	e58d3001 	str	r3, [sp, #1]
   16da4:	e1cdc0b5 	strh	ip, [sp, #5]
   16da8:	ebfff212 	bl	135f8 <spi_write>
   16dac:	e3500000 	cmp	r0, #0
   16db0:	1a000001 	bne	16dbc <RFID_newkey+0x44>
   16db4:	e28dd00c 	add	sp, sp, #12
   16db8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16dbc:	e3a0001b 	mov	r0, #27
   16dc0:	e59f1010 	ldr	r1, [pc, #16]	; 16dd8 <RFID_newkey+0x60>
   16dc4:	ebffe8e7 	bl	11168 <syslog@plt>
   16dc8:	e28dd00c 	add	sp, sp, #12
   16dcc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	0002b9a4 	.word	0x0002b9a4
   16dd4:	0002d1b4 	.word	0x0002d1b4
   16dd8:	0001ae34 	.word	0x0001ae34

00016ddc <RFID_clear_last>:
   16ddc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16de0:	e24dd00c 	sub	sp, sp, #12
   16de4:	e3e0303f 	mvn	r3, #63	; 0x3f
   16de8:	e5cd0005 	strb	r0, [sp, #5]
   16dec:	e28d1004 	add	r1, sp, #4
   16df0:	e59f002c 	ldr	r0, [pc, #44]	; 16e24 <RFID_clear_last+0x48>
   16df4:	e3a02002 	mov	r2, #2
   16df8:	e5cd3004 	strb	r3, [sp, #4]
   16dfc:	ebfff1fd 	bl	135f8 <spi_write>
   16e00:	e3500000 	cmp	r0, #0
   16e04:	1a000001 	bne	16e10 <RFID_clear_last+0x34>
   16e08:	e28dd00c 	add	sp, sp, #12
   16e0c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16e10:	e3a0001b 	mov	r0, #27
   16e14:	e59f100c 	ldr	r1, [pc, #12]	; 16e28 <RFID_clear_last+0x4c>
   16e18:	ebffe8d2 	bl	11168 <syslog@plt>
   16e1c:	e28dd00c 	add	sp, sp, #12
   16e20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16e24:	0002d1b4 	.word	0x0002d1b4
   16e28:	0001ae50 	.word	0x0001ae50

00016e2c <RFID_write_token>:
   16e2c:	e92d4010 	push	{r4, lr}
   16e30:	e1a04000 	mov	r4, r0
   16e34:	e24dd018 	sub	sp, sp, #24
   16e38:	e3a01020 	mov	r1, #32
   16e3c:	e3a02012 	mov	r2, #18
   16e40:	e28d0004 	add	r0, sp, #4
   16e44:	ebffe8a6 	bl	110e4 <memset@plt>
   16e48:	e594e000 	ldr	lr, [r4]
   16e4c:	e594c004 	ldr	ip, [r4, #4]
   16e50:	e3e0304f 	mvn	r3, #79	; 0x4f
   16e54:	e28d1004 	add	r1, sp, #4
   16e58:	e59f00cc 	ldr	r0, [pc, #204]	; 16f2c <RFID_write_token+0x100>
   16e5c:	e3a02009 	mov	r2, #9
   16e60:	e58de005 	str	lr, [sp, #5]
   16e64:	e58dc009 	str	ip, [sp, #9]
   16e68:	e5cd3004 	strb	r3, [sp, #4]
   16e6c:	ebfff1e1 	bl	135f8 <spi_write>
   16e70:	e3500000 	cmp	r0, #0
   16e74:	0a000004 	beq	16e8c <RFID_write_token+0x60>
   16e78:	e3a0001b 	mov	r0, #27
   16e7c:	e59f10ac 	ldr	r1, [pc, #172]	; 16f30 <RFID_write_token+0x104>
   16e80:	ebffe8b8 	bl	11168 <syslog@plt>
   16e84:	e28dd018 	add	sp, sp, #24
   16e88:	e8bd8010 	pop	{r4, pc}
   16e8c:	ebffe80a 	bl	10ebc <pause@plt>
   16e90:	e3a01020 	mov	r1, #32
   16e94:	e3a02012 	mov	r2, #18
   16e98:	e28d0004 	add	r0, sp, #4
   16e9c:	ebffe890 	bl	110e4 <memset@plt>
   16ea0:	e5b4c008 	ldr	ip, [r4, #8]!
   16ea4:	e3e0304e 	mvn	r3, #78	; 0x4e
   16ea8:	e59f007c 	ldr	r0, [pc, #124]	; 16f2c <RFID_write_token+0x100>
   16eac:	e594e004 	ldr	lr, [r4, #4]
   16eb0:	e28d1004 	add	r1, sp, #4
   16eb4:	e3a02009 	mov	r2, #9
   16eb8:	e58de009 	str	lr, [sp, #9]
   16ebc:	e58dc005 	str	ip, [sp, #5]
   16ec0:	e5cd3004 	strb	r3, [sp, #4]
   16ec4:	ebfff1cb 	bl	135f8 <spi_write>
   16ec8:	e3500000 	cmp	r0, #0
   16ecc:	0a000004 	beq	16ee4 <RFID_write_token+0xb8>
   16ed0:	e3a0001b 	mov	r0, #27
   16ed4:	e59f1058 	ldr	r1, [pc, #88]	; 16f34 <RFID_write_token+0x108>
   16ed8:	ebffe8a2 	bl	11168 <syslog@plt>
   16edc:	e28dd018 	add	sp, sp, #24
   16ee0:	e8bd8010 	pop	{r4, pc}
   16ee4:	ebffe7f4 	bl	10ebc <pause@plt>
   16ee8:	e3e0c030 	mvn	ip, #48	; 0x30
   16eec:	e3a03001 	mov	r3, #1
   16ef0:	e28d1004 	add	r1, sp, #4
   16ef4:	e59f0030 	ldr	r0, [pc, #48]	; 16f2c <RFID_write_token+0x100>
   16ef8:	e3a02002 	mov	r2, #2
   16efc:	e5cdc004 	strb	ip, [sp, #4]
   16f00:	e5cd3005 	strb	r3, [sp, #5]
   16f04:	ebfff1bb 	bl	135f8 <spi_write>
   16f08:	e3500000 	cmp	r0, #0
   16f0c:	0a000004 	beq	16f24 <RFID_write_token+0xf8>
   16f10:	e3a0001b 	mov	r0, #27
   16f14:	e59f101c 	ldr	r1, [pc, #28]	; 16f38 <RFID_write_token+0x10c>
   16f18:	ebffe892 	bl	11168 <syslog@plt>
   16f1c:	e28dd018 	add	sp, sp, #24
   16f20:	e8bd8010 	pop	{r4, pc}
   16f24:	ebffe7e4 	bl	10ebc <pause@plt>
   16f28:	eaffffd5 	b	16e84 <RFID_write_token+0x58>
   16f2c:	0002d1b4 	.word	0x0002d1b4
   16f30:	0001ae68 	.word	0x0001ae68
   16f34:	0001ae80 	.word	0x0001ae80
   16f38:	0001ae98 	.word	0x0001ae98

00016f3c <RFID_write_token_cancel>:
   16f3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16f40:	e24dd00c 	sub	sp, sp, #12
   16f44:	e3e0c030 	mvn	ip, #48	; 0x30
   16f48:	e3a03000 	mov	r3, #0
   16f4c:	e59f0034 	ldr	r0, [pc, #52]	; 16f88 <RFID_write_token_cancel+0x4c>
   16f50:	e28d1004 	add	r1, sp, #4
   16f54:	e3a02002 	mov	r2, #2
   16f58:	e5cdc004 	strb	ip, [sp, #4]
   16f5c:	e5cd3005 	strb	r3, [sp, #5]
   16f60:	ebfff1a4 	bl	135f8 <spi_write>
   16f64:	e3500000 	cmp	r0, #0
   16f68:	1a000001 	bne	16f74 <RFID_write_token_cancel+0x38>
   16f6c:	e28dd00c 	add	sp, sp, #12
   16f70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16f74:	e3a0001b 	mov	r0, #27
   16f78:	e59f100c 	ldr	r1, [pc, #12]	; 16f8c <RFID_write_token_cancel+0x50>
   16f7c:	ebffe879 	bl	11168 <syslog@plt>
   16f80:	e28dd00c 	add	sp, sp, #12
   16f84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16f88:	0002d1b4 	.word	0x0002d1b4
   16f8c:	0001aeb0 	.word	0x0001aeb0

00016f90 <RFID_write_stat>:
   16f90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16f94:	e24dd00c 	sub	sp, sp, #12
   16f98:	e28d1008 	add	r1, sp, #8
   16f9c:	e3a0307f 	mov	r3, #127	; 0x7f
   16fa0:	e5613004 	strb	r3, [r1, #-4]!
   16fa4:	e59f0030 	ldr	r0, [pc, #48]	; 16fdc <RFID_write_stat+0x4c>
   16fa8:	e3a02003 	mov	r2, #3
   16fac:	ebfff141 	bl	134b8 <spi_read>
   16fb0:	e3500000 	cmp	r0, #0
   16fb4:	05dd0005 	ldrbeq	r0, [sp, #5]
   16fb8:	1a000001 	bne	16fc4 <RFID_write_stat+0x34>
   16fbc:	e28dd00c 	add	sp, sp, #12
   16fc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16fc4:	e3a0001b 	mov	r0, #27
   16fc8:	e59f1010 	ldr	r1, [pc, #16]	; 16fe0 <RFID_write_stat+0x50>
   16fcc:	ebffe865 	bl	11168 <syslog@plt>
   16fd0:	e3a00001 	mov	r0, #1
   16fd4:	e28dd00c 	add	sp, sp, #12
   16fd8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	0002d1b4 	.word	0x0002d1b4
   16fe0:	0001aec8 	.word	0x0001aec8

00016fe4 <RFID_check_write>:
   16fe4:	e92d4030 	push	{r4, r5, lr}
   16fe8:	e24dd024 	sub	sp, sp, #36	; 0x24
   16fec:	e28d1020 	add	r1, sp, #32
   16ff0:	e3a03030 	mov	r3, #48	; 0x30
   16ff4:	e5613014 	strb	r3, [r1, #-20]!	; 0xffffffec
   16ff8:	e59f0074 	ldr	r0, [pc, #116]	; 17074 <RFID_check_write+0x90>
   16ffc:	e3a0200a 	mov	r2, #10
   17000:	ebfff12c 	bl	134b8 <spi_read>
   17004:	e3500000 	cmp	r0, #0
   17008:	1a000014 	bne	17060 <RFID_check_write+0x7c>
   1700c:	e28d1020 	add	r1, sp, #32
   17010:	e3a03038 	mov	r3, #56	; 0x38
   17014:	e561300a 	strb	r3, [r1, #-10]!
   17018:	e59f0054 	ldr	r0, [pc, #84]	; 17074 <RFID_check_write+0x90>
   1701c:	e3a0200a 	mov	r2, #10
   17020:	ebfff124 	bl	134b8 <spi_read>
   17024:	e3500000 	cmp	r0, #0
   17028:	1a00000c 	bne	17060 <RFID_check_write+0x7c>
   1702c:	e1a04000 	mov	r4, r0
   17030:	e28d500b 	add	r5, sp, #11
   17034:	e5f53001 	ldrb	r3, [r5, #1]!
   17038:	e1a02004 	mov	r2, r4
   1703c:	e3a0001e 	mov	r0, #30
   17040:	e59f1030 	ldr	r1, [pc, #48]	; 17078 <RFID_check_write+0x94>
   17044:	e58d3000 	str	r3, [sp]
   17048:	e2844001 	add	r4, r4, #1
   1704c:	ebffe845 	bl	11168 <syslog@plt>
   17050:	e3540014 	cmp	r4, #20
   17054:	1afffff6 	bne	17034 <RFID_check_write+0x50>
   17058:	e28dd024 	add	sp, sp, #36	; 0x24
   1705c:	e8bd8030 	pop	{r4, r5, pc}
   17060:	e3a0001b 	mov	r0, #27
   17064:	e59f1010 	ldr	r1, [pc, #16]	; 1707c <RFID_check_write+0x98>
   17068:	ebffe83e 	bl	11168 <syslog@plt>
   1706c:	e28dd024 	add	sp, sp, #36	; 0x24
   17070:	e8bd8030 	pop	{r4, r5, pc}
   17074:	0002d1b4 	.word	0x0002d1b4
   17078:	0001aefc 	.word	0x0001aefc
   1707c:	0001aee0 	.word	0x0001aee0

00017080 <clear_token>:
   17080:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17084:	e1a05000 	mov	r5, r0
   17088:	e5906000 	ldr	r6, [r0]
   1708c:	e24dd00c 	sub	sp, sp, #12
   17090:	e5964044 	ldr	r4, [r6, #68]	; 0x44
   17094:	e3540000 	cmp	r4, #0
   17098:	0a00002e 	beq	17158 <clear_token+0xd8>
   1709c:	e5947044 	ldr	r7, [r4, #68]	; 0x44
   170a0:	e3570000 	cmp	r7, #0
   170a4:	0a000029 	beq	17150 <clear_token+0xd0>
   170a8:	e5978044 	ldr	r8, [r7, #68]	; 0x44
   170ac:	e3580000 	cmp	r8, #0
   170b0:	0a000024 	beq	17148 <clear_token+0xc8>
   170b4:	e5989044 	ldr	r9, [r8, #68]	; 0x44
   170b8:	e3590000 	cmp	r9, #0
   170bc:	0a00001f 	beq	17140 <clear_token+0xc0>
   170c0:	e599a044 	ldr	sl, [r9, #68]	; 0x44
   170c4:	e35a0000 	cmp	sl, #0
   170c8:	0a00001a 	beq	17138 <clear_token+0xb8>
   170cc:	e59ab044 	ldr	fp, [sl, #68]	; 0x44
   170d0:	e35b0000 	cmp	fp, #0
   170d4:	0a000015 	beq	17130 <clear_token+0xb0>
   170d8:	e59b3044 	ldr	r3, [fp, #68]	; 0x44
   170dc:	e3530000 	cmp	r3, #0
   170e0:	0a000010 	beq	17128 <clear_token+0xa8>
   170e4:	e5932044 	ldr	r2, [r3, #68]	; 0x44
   170e8:	e3520000 	cmp	r2, #0
   170ec:	0a00000b 	beq	17120 <clear_token+0xa0>
   170f0:	e5921044 	ldr	r1, [r2, #68]	; 0x44
   170f4:	e3510000 	cmp	r1, #0
   170f8:	0a000004 	beq	17110 <clear_token+0x90>
   170fc:	e2820044 	add	r0, r2, #68	; 0x44
   17100:	e58d3004 	str	r3, [sp, #4]
   17104:	e58d2000 	str	r2, [sp]
   17108:	ebffffdc 	bl	17080 <clear_token>
   1710c:	e89d000c 	ldm	sp, {r2, r3}
   17110:	e1a00002 	mov	r0, r2
   17114:	e58d3000 	str	r3, [sp]
   17118:	ebffe776 	bl	10ef8 <free@plt>
   1711c:	e59d3000 	ldr	r3, [sp]
   17120:	e1a00003 	mov	r0, r3
   17124:	ebffe773 	bl	10ef8 <free@plt>
   17128:	e1a0000b 	mov	r0, fp
   1712c:	ebffe771 	bl	10ef8 <free@plt>
   17130:	e1a0000a 	mov	r0, sl
   17134:	ebffe76f 	bl	10ef8 <free@plt>
   17138:	e1a00009 	mov	r0, r9
   1713c:	ebffe76d 	bl	10ef8 <free@plt>
   17140:	e1a00008 	mov	r0, r8
   17144:	ebffe76b 	bl	10ef8 <free@plt>
   17148:	e1a00007 	mov	r0, r7
   1714c:	ebffe769 	bl	10ef8 <free@plt>
   17150:	e1a00004 	mov	r0, r4
   17154:	ebffe767 	bl	10ef8 <free@plt>
   17158:	e1a00006 	mov	r0, r6
   1715c:	ebffe765 	bl	10ef8 <free@plt>
   17160:	e3a03000 	mov	r3, #0
   17164:	e5853000 	str	r3, [r5]
   17168:	e28dd00c 	add	sp, sp, #12
   1716c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017170 <TOKEN_load>:
   17170:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17174:	e24dde42 	sub	sp, sp, #1056	; 0x420
   17178:	e59f75e8 	ldr	r7, [pc, #1512]	; 17768 <TOKEN_load+0x5f8>
   1717c:	e24dd004 	sub	sp, sp, #4
   17180:	e5973000 	ldr	r3, [r7]
   17184:	e3530000 	cmp	r3, #0
   17188:	0a000001 	beq	17194 <TOKEN_load+0x24>
   1718c:	e1a00007 	mov	r0, r7
   17190:	ebffffba 	bl	17080 <clear_token>
   17194:	e59f05d0 	ldr	r0, [pc, #1488]	; 1776c <TOKEN_load+0x5fc>
   17198:	e59f15d0 	ldr	r1, [pc, #1488]	; 17770 <TOKEN_load+0x600>
   1719c:	ebffe74c 	bl	10ed4 <fopen@plt>
   171a0:	e2506000 	subs	r6, r0, #0
   171a4:	0a000159 	beq	17710 <TOKEN_load+0x5a0>
   171a8:	e28d4020 	add	r4, sp, #32
   171ac:	e3a05000 	mov	r5, #0
   171b0:	e1a00004 	mov	r0, r4
   171b4:	e3a01b01 	mov	r1, #1024	; 0x400
   171b8:	e1a02006 	mov	r2, r6
   171bc:	ebffe750 	bl	10f04 <fgets@plt>
   171c0:	e3500000 	cmp	r0, #0
   171c4:	1a000001 	bne	171d0 <TOKEN_load+0x60>
   171c8:	ea000011 	b	17214 <TOKEN_load+0xa4>
   171cc:	e5c05000 	strb	r5, [r0]
   171d0:	e1a00004 	mov	r0, r4
   171d4:	e3a0100a 	mov	r1, #10
   171d8:	ebffe7a6 	bl	11078 <strchr@plt>
   171dc:	e3500000 	cmp	r0, #0
   171e0:	1afffff9 	bne	171cc <TOKEN_load+0x5c>
   171e4:	ea000000 	b	171ec <TOKEN_load+0x7c>
   171e8:	e5c05000 	strb	r5, [r0]
   171ec:	e1a00004 	mov	r0, r4
   171f0:	e3a0100d 	mov	r1, #13
   171f4:	ebffe79f 	bl	11078 <strchr@plt>
   171f8:	e3500000 	cmp	r0, #0
   171fc:	1afffff9 	bne	171e8 <TOKEN_load+0x78>
   17200:	e1a00004 	mov	r0, r4
   17204:	e59f1568 	ldr	r1, [pc, #1384]	; 17774 <TOKEN_load+0x604>
   17208:	ebffe7df 	bl	1118c <strpbrk@plt>
   1720c:	e1540000 	cmp	r4, r0
   17210:	0a000027 	beq	172b4 <TOKEN_load+0x144>
   17214:	e1a00006 	mov	r0, r6
   17218:	ebffe78a 	bl	11048 <feof@plt>
   1721c:	e3500000 	cmp	r0, #0
   17220:	0affffe2 	beq	171b0 <TOKEN_load+0x40>
   17224:	e1a00006 	mov	r0, r6
   17228:	ebffe7bf 	bl	1112c <fclose@plt>
   1722c:	e59f3544 	ldr	r3, [pc, #1348]	; 17778 <TOKEN_load+0x608>
   17230:	e5933000 	ldr	r3, [r3]
   17234:	e3530001 	cmp	r3, #1
   17238:	da00001a 	ble	172a8 <TOKEN_load+0x138>
   1723c:	e5974000 	ldr	r4, [r7]
   17240:	e3540000 	cmp	r4, #0
   17244:	0a000017 	beq	172a8 <TOKEN_load+0x138>
   17248:	e5d42001 	ldrb	r2, [r4, #1]
   1724c:	e5d43000 	ldrb	r3, [r4]
   17250:	e284e007 	add	lr, r4, #7
   17254:	e58d2000 	str	r2, [sp]
   17258:	e5d42002 	ldrb	r2, [r4, #2]
   1725c:	e3a0001f 	mov	r0, #31
   17260:	e59f1514 	ldr	r1, [pc, #1300]	; 1777c <TOKEN_load+0x60c>
   17264:	e58d2004 	str	r2, [sp, #4]
   17268:	e5d4c003 	ldrb	ip, [r4, #3]
   1726c:	e1a02004 	mov	r2, r4
   17270:	e58dc008 	str	ip, [sp, #8]
   17274:	e5d4c004 	ldrb	ip, [r4, #4]
   17278:	e58dc00c 	str	ip, [sp, #12]
   1727c:	e5d4c005 	ldrb	ip, [r4, #5]
   17280:	e58dc010 	str	ip, [sp, #16]
   17284:	e5d4c006 	ldrb	ip, [r4, #6]
   17288:	e58de018 	str	lr, [sp, #24]
   1728c:	e58dc014 	str	ip, [sp, #20]
   17290:	e5d4c018 	ldrb	ip, [r4, #24]
   17294:	e58dc01c 	str	ip, [sp, #28]
   17298:	ebffe7b2 	bl	11168 <syslog@plt>
   1729c:	e5944044 	ldr	r4, [r4, #68]	; 0x44
   172a0:	e3540000 	cmp	r4, #0
   172a4:	1affffe7 	bne	17248 <TOKEN_load+0xd8>
   172a8:	e28dde42 	add	sp, sp, #1056	; 0x420
   172ac:	e28dd004 	add	sp, sp, #4
   172b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172b4:	e3a0103a 	mov	r1, #58	; 0x3a
   172b8:	ebffe76e 	bl	11078 <strchr@plt>
   172bc:	e3a0103a 	mov	r1, #58	; 0x3a
   172c0:	e284800e 	add	r8, r4, #14
   172c4:	e2809001 	add	r9, r0, #1
   172c8:	e1a0a000 	mov	sl, r0
   172cc:	e1a00009 	mov	r0, r9
   172d0:	ebffe768 	bl	11078 <strchr@plt>
   172d4:	e16f3f10 	clz	r3, r0
   172d8:	e1a032a3 	lsr	r3, r3, #5
   172dc:	e15a0008 	cmp	sl, r8
   172e0:	01a08003 	moveq	r8, r3
   172e4:	13838001 	orrne	r8, r3, #1
   172e8:	e3580000 	cmp	r8, #0
   172ec:	e1a0b000 	mov	fp, r0
   172f0:	1affffc7 	bne	17214 <TOKEN_load+0xa4>
   172f4:	e3a00048 	mov	r0, #72	; 0x48
   172f8:	ebffe737 	bl	10fdc <malloc@plt>
   172fc:	e5973000 	ldr	r3, [r7]
   17300:	e1a01008 	mov	r1, r8
   17304:	e1a0a000 	mov	sl, r0
   17308:	e2400001 	sub	r0, r0, #1
   1730c:	e5ca8017 	strb	r8, [sl, #23]
   17310:	e58a3044 	str	r3, [sl, #68]	; 0x44
   17314:	e587a000 	str	sl, [r7]
   17318:	e1a02081 	lsl	r2, r1, #1
   1731c:	e28d3e42 	add	r3, sp, #1056	; 0x420
   17320:	e0833002 	add	r3, r3, r2
   17324:	e0842002 	add	r2, r4, r2
   17328:	e553c400 	ldrb	ip, [r3, #-1024]	; 0xfffffc00
   1732c:	e24c3030 	sub	r3, ip, #48	; 0x30
   17330:	e24ce041 	sub	lr, ip, #65	; 0x41
   17334:	e6ef3073 	uxtb	r3, r3
   17338:	e3530009 	cmp	r3, #9
   1733c:	91a03203 	lslls	r3, r3, #4
   17340:	83a03000 	movhi	r3, #0
   17344:	96ef3073 	uxtbls	r3, r3
   17348:	e35e0025 	cmp	lr, #37	; 0x25
   1734c:	979ff10e 	ldrls	pc, [pc, lr, lsl #2]
   17350:	ea0000d7 	b	176b4 <TOKEN_load+0x544>
   17354:	000173ec 	.word	0x000173ec
   17358:	00017684 	.word	0x00017684
   1735c:	00017664 	.word	0x00017664
   17360:	0001767c 	.word	0x0001767c
   17364:	0001766c 	.word	0x0001766c
   17368:	00017674 	.word	0x00017674
   1736c:	000176b4 	.word	0x000176b4
   17370:	000176b4 	.word	0x000176b4
   17374:	000176b4 	.word	0x000176b4
   17378:	000176b4 	.word	0x000176b4
   1737c:	000176b4 	.word	0x000176b4
   17380:	000176b4 	.word	0x000176b4
   17384:	000176b4 	.word	0x000176b4
   17388:	000176b4 	.word	0x000176b4
   1738c:	000176b4 	.word	0x000176b4
   17390:	000176b4 	.word	0x000176b4
   17394:	000176b4 	.word	0x000176b4
   17398:	000176b4 	.word	0x000176b4
   1739c:	000176b4 	.word	0x000176b4
   173a0:	000176b4 	.word	0x000176b4
   173a4:	000176b4 	.word	0x000176b4
   173a8:	000176b4 	.word	0x000176b4
   173ac:	000176b4 	.word	0x000176b4
   173b0:	000176b4 	.word	0x000176b4
   173b4:	000176b4 	.word	0x000176b4
   173b8:	000176b4 	.word	0x000176b4
   173bc:	000176b4 	.word	0x000176b4
   173c0:	000176b4 	.word	0x000176b4
   173c4:	000176b4 	.word	0x000176b4
   173c8:	000176b4 	.word	0x000176b4
   173cc:	000176b4 	.word	0x000176b4
   173d0:	000176b4 	.word	0x000176b4
   173d4:	000173ec 	.word	0x000173ec
   173d8:	00017684 	.word	0x00017684
   173dc:	00017664 	.word	0x00017664
   173e0:	0001767c 	.word	0x0001767c
   173e4:	0001766c 	.word	0x0001766c
   173e8:	00017674 	.word	0x00017674
   173ec:	e3a0c041 	mov	ip, #65	; 0x41
   173f0:	e24c3037 	sub	r3, ip, #55	; 0x37
   173f4:	e1a03203 	lsl	r3, r3, #4
   173f8:	e6ef3073 	uxtb	r3, r3
   173fc:	e5d2c001 	ldrb	ip, [r2, #1]
   17400:	e24c2030 	sub	r2, ip, #48	; 0x30
   17404:	e6ef2072 	uxtb	r2, r2
   17408:	e3520009 	cmp	r2, #9
   1740c:	90833002 	addls	r3, r3, r2
   17410:	e24c2041 	sub	r2, ip, #65	; 0x41
   17414:	96ef3073 	uxtbls	r3, r3
   17418:	e3520025 	cmp	r2, #37	; 0x25
   1741c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   17420:	ea0000a8 	b	176c8 <TOKEN_load+0x558>
   17424:	000174bc 	.word	0x000174bc
   17428:	000176ac 	.word	0x000176ac
   1742c:	000176a4 	.word	0x000176a4
   17430:	0001769c 	.word	0x0001769c
   17434:	00017694 	.word	0x00017694
   17438:	0001768c 	.word	0x0001768c
   1743c:	000176c8 	.word	0x000176c8
   17440:	000176c8 	.word	0x000176c8
   17444:	000176c8 	.word	0x000176c8
   17448:	000176c8 	.word	0x000176c8
   1744c:	000176c8 	.word	0x000176c8
   17450:	000176c8 	.word	0x000176c8
   17454:	000176c8 	.word	0x000176c8
   17458:	000176c8 	.word	0x000176c8
   1745c:	000176c8 	.word	0x000176c8
   17460:	000176c8 	.word	0x000176c8
   17464:	000176c8 	.word	0x000176c8
   17468:	000176c8 	.word	0x000176c8
   1746c:	000176c8 	.word	0x000176c8
   17470:	000176c8 	.word	0x000176c8
   17474:	000176c8 	.word	0x000176c8
   17478:	000176c8 	.word	0x000176c8
   1747c:	000176c8 	.word	0x000176c8
   17480:	000176c8 	.word	0x000176c8
   17484:	000176c8 	.word	0x000176c8
   17488:	000176c8 	.word	0x000176c8
   1748c:	000176c8 	.word	0x000176c8
   17490:	000176c8 	.word	0x000176c8
   17494:	000176c8 	.word	0x000176c8
   17498:	000176c8 	.word	0x000176c8
   1749c:	000176c8 	.word	0x000176c8
   174a0:	000176c8 	.word	0x000176c8
   174a4:	000174bc 	.word	0x000174bc
   174a8:	000176ac 	.word	0x000176ac
   174ac:	000176a4 	.word	0x000176a4
   174b0:	0001769c 	.word	0x0001769c
   174b4:	00017694 	.word	0x00017694
   174b8:	0001768c 	.word	0x0001768c
   174bc:	e3a0c041 	mov	ip, #65	; 0x41
   174c0:	e24cc037 	sub	ip, ip, #55	; 0x37
   174c4:	e083300c 	add	r3, r3, ip
   174c8:	e6ef3073 	uxtb	r3, r3
   174cc:	e2811001 	add	r1, r1, #1
   174d0:	e3510007 	cmp	r1, #7
   174d4:	e5e03001 	strb	r3, [r0, #1]!
   174d8:	1affff8e 	bne	17318 <TOKEN_load+0x1a8>
   174dc:	e159000b 	cmp	r9, fp
   174e0:	0a00008f 	beq	17724 <TOKEN_load+0x5b4>
   174e4:	e5dd302f 	ldrb	r3, [sp, #47]	; 0x2f
   174e8:	e28d2030 	add	r2, sp, #48	; 0x30
   174ec:	e15b0002 	cmp	fp, r2
   174f0:	e5ca3007 	strb	r3, [sl, #7]
   174f4:	0a00008b 	beq	17728 <TOKEN_load+0x5b8>
   174f8:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   174fc:	e2842011 	add	r2, r4, #17
   17500:	e15b0002 	cmp	fp, r2
   17504:	e5ca3008 	strb	r3, [sl, #8]
   17508:	0a000087 	beq	1772c <TOKEN_load+0x5bc>
   1750c:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   17510:	e2842012 	add	r2, r4, #18
   17514:	e15b0002 	cmp	fp, r2
   17518:	e5ca3009 	strb	r3, [sl, #9]
   1751c:	0a000083 	beq	17730 <TOKEN_load+0x5c0>
   17520:	e5dd3032 	ldrb	r3, [sp, #50]	; 0x32
   17524:	e2842013 	add	r2, r4, #19
   17528:	e15b0002 	cmp	fp, r2
   1752c:	e5ca300a 	strb	r3, [sl, #10]
   17530:	0a00007f 	beq	17734 <TOKEN_load+0x5c4>
   17534:	e5dd3033 	ldrb	r3, [sp, #51]	; 0x33
   17538:	e28d2034 	add	r2, sp, #52	; 0x34
   1753c:	e15b0002 	cmp	fp, r2
   17540:	e5ca300b 	strb	r3, [sl, #11]
   17544:	0a00007b 	beq	17738 <TOKEN_load+0x5c8>
   17548:	e5dd3034 	ldrb	r3, [sp, #52]	; 0x34
   1754c:	e2842015 	add	r2, r4, #21
   17550:	e15b0002 	cmp	fp, r2
   17554:	e5ca300c 	strb	r3, [sl, #12]
   17558:	0a000077 	beq	1773c <TOKEN_load+0x5cc>
   1755c:	e5dd3035 	ldrb	r3, [sp, #53]	; 0x35
   17560:	e2842016 	add	r2, r4, #22
   17564:	e15b0002 	cmp	fp, r2
   17568:	e5ca300d 	strb	r3, [sl, #13]
   1756c:	0a000073 	beq	17740 <TOKEN_load+0x5d0>
   17570:	e5dd3036 	ldrb	r3, [sp, #54]	; 0x36
   17574:	e2842017 	add	r2, r4, #23
   17578:	e15b0002 	cmp	fp, r2
   1757c:	e5ca300e 	strb	r3, [sl, #14]
   17580:	0a00006f 	beq	17744 <TOKEN_load+0x5d4>
   17584:	e5dd3037 	ldrb	r3, [sp, #55]	; 0x37
   17588:	e28d2038 	add	r2, sp, #56	; 0x38
   1758c:	e15b0002 	cmp	fp, r2
   17590:	e5ca300f 	strb	r3, [sl, #15]
   17594:	0a00006b 	beq	17748 <TOKEN_load+0x5d8>
   17598:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1759c:	e2842019 	add	r2, r4, #25
   175a0:	e15b0002 	cmp	fp, r2
   175a4:	e5ca3010 	strb	r3, [sl, #16]
   175a8:	0a000067 	beq	1774c <TOKEN_load+0x5dc>
   175ac:	e5dd3039 	ldrb	r3, [sp, #57]	; 0x39
   175b0:	e284201a 	add	r2, r4, #26
   175b4:	e15b0002 	cmp	fp, r2
   175b8:	e5ca3011 	strb	r3, [sl, #17]
   175bc:	0a000063 	beq	17750 <TOKEN_load+0x5e0>
   175c0:	e5dd303a 	ldrb	r3, [sp, #58]	; 0x3a
   175c4:	e284201b 	add	r2, r4, #27
   175c8:	e15b0002 	cmp	fp, r2
   175cc:	e5ca3012 	strb	r3, [sl, #18]
   175d0:	0a00005f 	beq	17754 <TOKEN_load+0x5e4>
   175d4:	e5dd303b 	ldrb	r3, [sp, #59]	; 0x3b
   175d8:	e28d203c 	add	r2, sp, #60	; 0x3c
   175dc:	e15b0002 	cmp	fp, r2
   175e0:	e5ca3013 	strb	r3, [sl, #19]
   175e4:	0a00005b 	beq	17758 <TOKEN_load+0x5e8>
   175e8:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   175ec:	e284201d 	add	r2, r4, #29
   175f0:	e15b0002 	cmp	fp, r2
   175f4:	e5ca3014 	strb	r3, [sl, #20]
   175f8:	0a000057 	beq	1775c <TOKEN_load+0x5ec>
   175fc:	e284201e 	add	r2, r4, #30
   17600:	e15b0002 	cmp	fp, r2
   17604:	e5dd303d 	ldrb	r3, [sp, #61]	; 0x3d
   17608:	15dd203e 	ldrbne	r2, [sp, #62]	; 0x3e
   1760c:	03a02000 	moveq	r2, #0
   17610:	e5ca3015 	strb	r3, [sl, #21]
   17614:	e5db3001 	ldrb	r3, [fp, #1]
   17618:	e5ca2016 	strb	r2, [sl, #22]
   1761c:	e3530053 	cmp	r3, #83	; 0x53
   17620:	0a00002d 	beq	176dc <TOKEN_load+0x56c>
   17624:	9a000034 	bls	176fc <TOKEN_load+0x58c>
   17628:	e3530069 	cmp	r3, #105	; 0x69
   1762c:	0a000034 	beq	17704 <TOKEN_load+0x594>
   17630:	e3530073 	cmp	r3, #115	; 0x73
   17634:	0a000028 	beq	176dc <TOKEN_load+0x56c>
   17638:	e3a03001 	mov	r3, #1
   1763c:	e5ca3018 	strb	r3, [sl, #24]
   17640:	e1a0000b 	mov	r0, fp
   17644:	ebffe682 	bl	11054 <strlen@plt>
   17648:	e3500004 	cmp	r0, #4
   1764c:	9a000025 	bls	176e8 <TOKEN_load+0x578>
   17650:	e28a0019 	add	r0, sl, #25
   17654:	e28b1003 	add	r1, fp, #3
   17658:	e3a02028 	mov	r2, #40	; 0x28
   1765c:	ebffe6a3 	bl	110f0 <strncpy@plt>
   17660:	eafffeeb 	b	17214 <TOKEN_load+0xa4>
   17664:	e3a0c043 	mov	ip, #67	; 0x43
   17668:	eaffff60 	b	173f0 <TOKEN_load+0x280>
   1766c:	e3a0c045 	mov	ip, #69	; 0x45
   17670:	eaffff5e 	b	173f0 <TOKEN_load+0x280>
   17674:	e3a0c046 	mov	ip, #70	; 0x46
   17678:	eaffff5c 	b	173f0 <TOKEN_load+0x280>
   1767c:	e3a0c044 	mov	ip, #68	; 0x44
   17680:	eaffff5a 	b	173f0 <TOKEN_load+0x280>
   17684:	e3a0c042 	mov	ip, #66	; 0x42
   17688:	eaffff58 	b	173f0 <TOKEN_load+0x280>
   1768c:	e3a0c046 	mov	ip, #70	; 0x46
   17690:	eaffff8a 	b	174c0 <TOKEN_load+0x350>
   17694:	e3a0c045 	mov	ip, #69	; 0x45
   17698:	eaffff88 	b	174c0 <TOKEN_load+0x350>
   1769c:	e3a0c044 	mov	ip, #68	; 0x44
   176a0:	eaffff86 	b	174c0 <TOKEN_load+0x350>
   176a4:	e3a0c043 	mov	ip, #67	; 0x43
   176a8:	eaffff84 	b	174c0 <TOKEN_load+0x350>
   176ac:	e3a0c042 	mov	ip, #66	; 0x42
   176b0:	eaffff82 	b	174c0 <TOKEN_load+0x350>
   176b4:	e35c0040 	cmp	ip, #64	; 0x40
   176b8:	9affff4f 	bls	173fc <TOKEN_load+0x28c>
   176bc:	e35c0046 	cmp	ip, #70	; 0x46
   176c0:	8affff4d 	bhi	173fc <TOKEN_load+0x28c>
   176c4:	eaffff49 	b	173f0 <TOKEN_load+0x280>
   176c8:	e35c0040 	cmp	ip, #64	; 0x40
   176cc:	9affff7e 	bls	174cc <TOKEN_load+0x35c>
   176d0:	e35c0046 	cmp	ip, #70	; 0x46
   176d4:	8affff7c 	bhi	174cc <TOKEN_load+0x35c>
   176d8:	eaffff78 	b	174c0 <TOKEN_load+0x350>
   176dc:	e3a0307f 	mov	r3, #127	; 0x7f
   176e0:	e5ca3018 	strb	r3, [sl, #24]
   176e4:	eaffffd5 	b	17640 <TOKEN_load+0x4d0>
   176e8:	e59f3090 	ldr	r3, [pc, #144]	; 17780 <TOKEN_load+0x610>
   176ec:	e8b30003 	ldm	r3!, {r0, r1}
   176f0:	e58a0019 	str	r0, [sl, #25]
   176f4:	e58a101d 	str	r1, [sl, #29]
   176f8:	eafffec5 	b	17214 <TOKEN_load+0xa4>
   176fc:	e3530049 	cmp	r3, #73	; 0x49
   17700:	1affffcc 	bne	17638 <TOKEN_load+0x4c8>
   17704:	e3a03002 	mov	r3, #2
   17708:	e5ca3018 	strb	r3, [sl, #24]
   1770c:	eaffffcb 	b	17640 <TOKEN_load+0x4d0>
   17710:	e3a0001b 	mov	r0, #27
   17714:	e59f1068 	ldr	r1, [pc, #104]	; 17784 <TOKEN_load+0x614>
   17718:	e59f204c 	ldr	r2, [pc, #76]	; 1776c <TOKEN_load+0x5fc>
   1771c:	ebffe691 	bl	11168 <syslog@plt>
   17720:	eafffee0 	b	172a8 <TOKEN_load+0x138>
   17724:	e5ca5007 	strb	r5, [sl, #7]
   17728:	e5ca5008 	strb	r5, [sl, #8]
   1772c:	e5ca5009 	strb	r5, [sl, #9]
   17730:	e5ca500a 	strb	r5, [sl, #10]
   17734:	e5ca500b 	strb	r5, [sl, #11]
   17738:	e5ca500c 	strb	r5, [sl, #12]
   1773c:	e5ca500d 	strb	r5, [sl, #13]
   17740:	e5ca500e 	strb	r5, [sl, #14]
   17744:	e5ca500f 	strb	r5, [sl, #15]
   17748:	e5ca5010 	strb	r5, [sl, #16]
   1774c:	e5ca5011 	strb	r5, [sl, #17]
   17750:	e5ca5012 	strb	r5, [sl, #18]
   17754:	e5ca5013 	strb	r5, [sl, #19]
   17758:	e5ca5014 	strb	r5, [sl, #20]
   1775c:	e5ca5015 	strb	r5, [sl, #21]
   17760:	e3a02000 	mov	r2, #0
   17764:	eaffffaa 	b	17614 <TOKEN_load+0x4a4>
   17768:	0002b9b4 	.word	0x0002b9b4
   1776c:	0002b910 	.word	0x0002b910
   17770:	0001a71c 	.word	0x0001a71c
   17774:	0001af2c 	.word	0x0001af2c
   17778:	0002d0ec 	.word	0x0002d0ec
   1777c:	0001af4c 	.word	0x0001af4c
   17780:	0001af44 	.word	0x0001af44
   17784:	0001af10 	.word	0x0001af10

00017788 <TOKEN_find>:
   17788:	e92d4038 	push	{r3, r4, r5, lr}
   1778c:	e1a05000 	mov	r5, r0
   17790:	e59f307c 	ldr	r3, [pc, #124]	; 17814 <TOKEN_find+0x8c>
   17794:	e59f207c 	ldr	r2, [pc, #124]	; 17818 <TOKEN_find+0x90>
   17798:	e1d3c0b4 	ldrh	ip, [r3, #4]
   1779c:	e5d31006 	ldrb	r1, [r3, #6]
   177a0:	e5924000 	ldr	r4, [r2]
   177a4:	e5930000 	ldr	r0, [r3]
   177a8:	e3540000 	cmp	r4, #0
   177ac:	e3e03000 	mvn	r3, #0
   177b0:	e5850019 	str	r0, [r5, #25]
   177b4:	e5c53018 	strb	r3, [r5, #24]
   177b8:	e1c5c1bd 	strh	ip, [r5, #29]
   177bc:	e5c5101f 	strb	r1, [r5, #31]
   177c0:	1a000003 	bne	177d4 <TOKEN_find+0x4c>
   177c4:	ea000010 	b	1780c <TOKEN_find+0x84>
   177c8:	e5944044 	ldr	r4, [r4, #68]	; 0x44
   177cc:	e3540000 	cmp	r4, #0
   177d0:	0a00000b 	beq	17804 <TOKEN_find+0x7c>
   177d4:	e1a00005 	mov	r0, r5
   177d8:	e1a01004 	mov	r1, r4
   177dc:	e3a02017 	mov	r2, #23
   177e0:	ebffe5d6 	bl	10f40 <memcmp@plt>
   177e4:	e3500000 	cmp	r0, #0
   177e8:	1afffff6 	bne	177c8 <TOKEN_find+0x40>
   177ec:	e1a00005 	mov	r0, r5
   177f0:	e1a01004 	mov	r1, r4
   177f4:	e3a02048 	mov	r2, #72	; 0x48
   177f8:	ebffe5c7 	bl	10f1c <memcpy@plt>
   177fc:	e5d40018 	ldrb	r0, [r4, #24]
   17800:	e8bd8038 	pop	{r3, r4, r5, pc}
   17804:	e3e00000 	mvn	r0, #0
   17808:	e8bd8038 	pop	{r3, r4, r5, pc}
   1780c:	e1a00003 	mov	r0, r3
   17810:	e8bd8038 	pop	{r3, r4, r5, pc}
   17814:	0001af88 	.word	0x0001af88
   17818:	0002b9b4 	.word	0x0002b9b4

0001781c <bcm2835_close.part.1>:

    return ok;
}

/* Close this library and deallocate everything */
int bcm2835_close(void)
   1781c:	e92d4010 	push	{r4, lr}
{
    if (debug) return 1; /* Success */

    unmapmem((void**) &bcm2835_peripherals, bcm2835_peripherals_size);
   17820:	e59f403c 	ldr	r4, [pc, #60]	; 17864 <bcm2835_close.part.1+0x48>
    return map;
}

static void unmapmem(void **pmem, size_t size)
{
    if (*pmem == MAP_FAILED) return;
   17824:	e5940004 	ldr	r0, [r4, #4]
/* Close this library and deallocate everything */
int bcm2835_close(void)
{
    if (debug) return 1; /* Success */

    unmapmem((void**) &bcm2835_peripherals, bcm2835_peripherals_size);
   17828:	e5941000 	ldr	r1, [r4]
    return map;
}

static void unmapmem(void **pmem, size_t size)
{
    if (*pmem == MAP_FAILED) return;
   1782c:	e3700001 	cmn	r0, #1
   17830:	0a000000 	beq	17838 <bcm2835_close.part.1+0x1c>
    munmap(*pmem, size);
   17834:	ebffe63f 	bl	11138 <munmap@plt>
int bcm2835_close(void)
{
    if (debug) return 1; /* Success */

    unmapmem((void**) &bcm2835_peripherals, bcm2835_peripherals_size);
    bcm2835_peripherals = MAP_FAILED;
   17838:	e3e03000 	mvn	r3, #0
   1783c:	e5843004 	str	r3, [r4, #4]
    bcm2835_gpio = MAP_FAILED;
   17840:	e5843008 	str	r3, [r4, #8]
    bcm2835_pwm  = MAP_FAILED;
   17844:	e584300c 	str	r3, [r4, #12]
    bcm2835_clk  = MAP_FAILED;
   17848:	e5843010 	str	r3, [r4, #16]
    bcm2835_pads = MAP_FAILED;
   1784c:	e5843014 	str	r3, [r4, #20]
    bcm2835_spi0 = MAP_FAILED;
   17850:	e5843018 	str	r3, [r4, #24]
    bcm2835_bsc0 = MAP_FAILED;
   17854:	e584301c 	str	r3, [r4, #28]
    bcm2835_bsc1 = MAP_FAILED;
   17858:	e5843020 	str	r3, [r4, #32]
    bcm2835_st   = MAP_FAILED;
   1785c:	e5843024 	str	r3, [r4, #36]	; 0x24
    return 1; /* Success */
}    
   17860:	e8bd8010 	pop	{r4, pc}
   17864:	0002b960 	.word	0x0002b960

00017868 <mapmem.part.0.constprop.3>:
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
    if (map == MAP_FAILED)
	fprintf(stderr, "bcm2835_init: %s mmap failed: %s\n", msg, strerror(errno));
   17868:	e59f3028 	ldr	r3, [pc, #40]	; 17898 <mapmem.part.0.constprop.3+0x30>

/* Map 'size' bytes starting at 'off' in file 'fd' to memory.
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
   1786c:	e92d4010 	push	{r4, lr}
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
    if (map == MAP_FAILED)
	fprintf(stderr, "bcm2835_init: %s mmap failed: %s\n", msg, strerror(errno));
   17870:	e5934000 	ldr	r4, [r3]
   17874:	ebffe60e 	bl	110b4 <__errno_location@plt>
   17878:	e5900000 	ldr	r0, [r0]
   1787c:	ebffe5dc 	bl	10ff4 <strerror@plt>
   17880:	e59f1014 	ldr	r1, [pc, #20]	; 1789c <mapmem.part.0.constprop.3+0x34>
   17884:	e59f2014 	ldr	r2, [pc, #20]	; 178a0 <mapmem.part.0.constprop.3+0x38>
   17888:	e1a03000 	mov	r3, r0
   1788c:	e1a00004 	mov	r0, r4
    return map;
}
   17890:	e8bd4010 	pop	{r4, lr}
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
    if (map == MAP_FAILED)
	fprintf(stderr, "bcm2835_init: %s mmap failed: %s\n", msg, strerror(errno));
   17894:	eaffe5fa 	b	11084 <fprintf@plt>
   17898:	0002b990 	.word	0x0002b990
   1789c:	0001af90 	.word	0x0001af90
   178a0:	0001afb4 	.word	0x0001afb4

000178a4 <bcm2835_regbase>:
*/

/* Function to return the pointers to the hardware register bases */
uint32_t* bcm2835_regbase(uint8_t regbase)
{
    switch (regbase)
   178a4:	e2400001 	sub	r0, r0, #1
   178a8:	e3500007 	cmp	r0, #7
   178ac:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   178b0:	ea00001c 	b	17928 <bcm2835_regbase+0x84>
   178b4:	000178d4 	.word	0x000178d4
   178b8:	000178ec 	.word	0x000178ec
   178bc:	000178f8 	.word	0x000178f8
   178c0:	00017904 	.word	0x00017904
   178c4:	00017910 	.word	0x00017910
   178c8:	0001791c 	.word	0x0001791c
   178cc:	000178e0 	.word	0x000178e0
   178d0:	000178d4 	.word	0x000178d4
	case BCM2835_REGBASE_SPI0:
	    return (uint32_t *)bcm2835_spi0;
	case BCM2835_REGBASE_BSC0:
	    return (uint32_t *)bcm2835_bsc0;
	case BCM2835_REGBASE_BSC1:
	    return (uint32_t *)bcm2835_st;
   178d4:	e59f3054 	ldr	r3, [pc, #84]	; 17930 <bcm2835_regbase+0x8c>
   178d8:	e5930024 	ldr	r0, [r3, #36]	; 0x24
   178dc:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_PADS:
	    return (uint32_t *)bcm2835_pads;
	case BCM2835_REGBASE_SPI0:
	    return (uint32_t *)bcm2835_spi0;
	case BCM2835_REGBASE_BSC0:
	    return (uint32_t *)bcm2835_bsc0;
   178e0:	e59f3048 	ldr	r3, [pc, #72]	; 17930 <bcm2835_regbase+0x8c>
   178e4:	e593001c 	ldr	r0, [r3, #28]
   178e8:	e12fff1e 	bx	lr
    switch (regbase)
    {
	case BCM2835_REGBASE_ST:
	    return (uint32_t *)bcm2835_st;
	case BCM2835_REGBASE_GPIO:
	    return (uint32_t *)bcm2835_gpio;
   178ec:	e59f303c 	ldr	r3, [pc, #60]	; 17930 <bcm2835_regbase+0x8c>
   178f0:	e5930008 	ldr	r0, [r3, #8]
   178f4:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_PWM:
	    return (uint32_t *)bcm2835_pwm;
   178f8:	e59f3030 	ldr	r3, [pc, #48]	; 17930 <bcm2835_regbase+0x8c>
   178fc:	e593000c 	ldr	r0, [r3, #12]
   17900:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_CLK:
	    return (uint32_t *)bcm2835_clk;
   17904:	e59f3024 	ldr	r3, [pc, #36]	; 17930 <bcm2835_regbase+0x8c>
   17908:	e5930010 	ldr	r0, [r3, #16]
   1790c:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_PADS:
	    return (uint32_t *)bcm2835_pads;
   17910:	e59f3018 	ldr	r3, [pc, #24]	; 17930 <bcm2835_regbase+0x8c>
   17914:	e5930014 	ldr	r0, [r3, #20]
   17918:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_SPI0:
	    return (uint32_t *)bcm2835_spi0;
   1791c:	e59f300c 	ldr	r3, [pc, #12]	; 17930 <bcm2835_regbase+0x8c>
   17920:	e5930018 	ldr	r0, [r3, #24]
   17924:	e12fff1e 	bx	lr
	case BCM2835_REGBASE_BSC0:
	    return (uint32_t *)bcm2835_bsc0;
	case BCM2835_REGBASE_BSC1:
	    return (uint32_t *)bcm2835_st;
    }
    return (uint32_t *)MAP_FAILED;
   17928:	e3e00000 	mvn	r0, #0
}
   1792c:	e12fff1e 	bx	lr
   17930:	0002b960 	.word	0x0002b960

00017934 <bcm2835_set_debug>:

void  bcm2835_set_debug(uint8_t d)
{
    debug = d;
   17934:	e59f3004 	ldr	r3, [pc, #4]	; 17940 <bcm2835_set_debug+0xc>
   17938:	e5c30000 	strb	r0, [r3]
   1793c:	e12fff1e 	bx	lr
   17940:	0002d16c 	.word	0x0002d16c

00017944 <bcm2835_version>:
}

unsigned int bcm2835_version(void) 
{
    return BCM2835_VERSION;
}
   17944:	e59f0000 	ldr	r0, [pc]	; 1794c <bcm2835_version+0x8>
   17948:	e12fff1e 	bx	lr
   1794c:	00002744 	.word	0x00002744

00017950 <bcm2835_peri_read>:

/* Read with memory barriers from peripheral
 *
 */
uint32_t bcm2835_peri_read(volatile uint32_t* paddr)
{
   17950:	e92d4008 	push	{r3, lr}
    uint32_t ret;
    if (debug)
   17954:	e59f302c 	ldr	r3, [pc, #44]	; 17988 <bcm2835_peri_read+0x38>
   17958:	e5d33000 	ldrb	r3, [r3]
   1795c:	e3530000 	cmp	r3, #0
   17960:	1a000003 	bne	17974 <bcm2835_peri_read+0x24>
        printf("bcm2835_peri_read  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
       __sync_synchronize();
   17964:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
       ret = *paddr;
   17968:	e5900000 	ldr	r0, [r0]
       __sync_synchronize();
   1796c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
       return ret;
    }
}
   17970:	e8bd8008 	pop	{r3, pc}
   17974:	e1a01000 	mov	r1, r0
uint32_t bcm2835_peri_read(volatile uint32_t* paddr)
{
    uint32_t ret;
    if (debug)
    {
        printf("bcm2835_peri_read  paddr %08X\n", (unsigned) paddr);
   17978:	e59f000c 	ldr	r0, [pc, #12]	; 1798c <bcm2835_peri_read+0x3c>
   1797c:	ebffe551 	bl	10ec8 <printf@plt>
	return 0;
   17980:	e3a00000 	mov	r0, #0
   17984:	e8bd8008 	pop	{r3, pc}
   17988:	0002d16c 	.word	0x0002d16c
   1798c:	0001afbc 	.word	0x0001afbc

00017990 <bcm2835_peri_read_nb>:
 * will follow.  The sequence must terminate with memory barrier
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
   17990:	e92d4008 	push	{r3, lr}
    if (debug)
   17994:	e59f3024 	ldr	r3, [pc, #36]	; 179c0 <bcm2835_peri_read_nb+0x30>
   17998:	e5d33000 	ldrb	r3, [r3]
   1799c:	e3530000 	cmp	r3, #0
   179a0:	1a000001 	bne	179ac <bcm2835_peri_read_nb+0x1c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   179a4:	e5900000 	ldr	r0, [r0]
    }
}
   179a8:	e8bd8008 	pop	{r3, pc}
   179ac:	e1a01000 	mov	r1, r0
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   179b0:	e59f000c 	ldr	r0, [pc, #12]	; 179c4 <bcm2835_peri_read_nb+0x34>
   179b4:	ebffe543 	bl	10ec8 <printf@plt>
	return 0;
   179b8:	e3a00000 	mov	r0, #0
   179bc:	e8bd8008 	pop	{r3, pc}
   179c0:	0002d16c 	.word	0x0002d16c
   179c4:	0001afdc 	.word	0x0001afdc

000179c8 <bcm2835_peri_write>:
/* Write with memory barriers to peripheral
 */

void bcm2835_peri_write(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   179c8:	e59f3028 	ldr	r3, [pc, #40]	; 179f8 <bcm2835_peri_write+0x30>

/* Write with memory barriers to peripheral
 */

void bcm2835_peri_write(volatile uint32_t* paddr, uint32_t value)
{
   179cc:	e1a02001 	mov	r2, r1
    if (debug)
   179d0:	e5d33000 	ldrb	r3, [r3]
   179d4:	e3530000 	cmp	r3, #0
   179d8:	1a000003 	bne	179ec <bcm2835_peri_write+0x24>
    {
	printf("bcm2835_peri_write paddr %08X, value %08X\n", (unsigned) paddr, value);
    }
    else
    {
        __sync_synchronize();
   179dc:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
        *paddr = value;
   179e0:	e5801000 	str	r1, [r0]
        __sync_synchronize();
   179e4:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   179e8:	e12fff1e 	bx	lr

void bcm2835_peri_write(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write paddr %08X, value %08X\n", (unsigned) paddr, value);
   179ec:	e1a01000 	mov	r1, r0
   179f0:	e59f0004 	ldr	r0, [pc, #4]	; 179fc <bcm2835_peri_write+0x34>
   179f4:	eaffe533 	b	10ec8 <printf@plt>
   179f8:	0002d16c 	.word	0x0002d16c
   179fc:	0001b000 	.word	0x0001b000

00017a00 <bcm2835_peri_write_nb>:
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   17a00:	e59f301c 	ldr	r3, [pc, #28]	; 17a24 <bcm2835_peri_write_nb+0x24>
    }
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
   17a04:	e1a02001 	mov	r2, r1
    if (debug)
   17a08:	e5d33000 	ldrb	r3, [r3]
   17a0c:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   17a10:	05801000 	streq	r1, [r0]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   17a14:	012fff1e 	bxeq	lr
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   17a18:	e1a01000 	mov	r1, r0
   17a1c:	e59f0004 	ldr	r0, [pc, #4]	; 17a28 <bcm2835_peri_write_nb+0x28>
   17a20:	eaffe528 	b	10ec8 <printf@plt>
   17a24:	0002d16c 	.word	0x0002d16c
   17a28:	0001b02c 	.word	0x0001b02c

00017a2c <bcm2835_peri_set_bits>:

/* Set/clear only the bits in value covered by the mask
 * This is not atomic - can be interrupted.
 */
void bcm2835_peri_set_bits(volatile uint32_t* paddr, uint32_t value, uint32_t mask)
{
   17a2c:	e92d4070 	push	{r4, r5, r6, lr}
   17a30:	e1a04002 	mov	r4, r2
   17a34:	e1a05001 	mov	r5, r1
   17a38:	e1a06000 	mov	r6, r0
    uint32_t v = bcm2835_peri_read(paddr);
   17a3c:	ebffffc3 	bl	17950 <bcm2835_peri_read>
    v = (v & ~mask) | (value & mask);
   17a40:	e0041005 	and	r1, r4, r5
   17a44:	e1c00004 	bic	r0, r0, r4
    bcm2835_peri_write(paddr, v);
   17a48:	e1801001 	orr	r1, r0, r1
   17a4c:	e1a00006 	mov	r0, r6
}
   17a50:	e8bd4070 	pop	{r4, r5, r6, lr}
 */
void bcm2835_peri_set_bits(volatile uint32_t* paddr, uint32_t value, uint32_t mask)
{
    uint32_t v = bcm2835_peri_read(paddr);
    v = (v & ~mask) | (value & mask);
    bcm2835_peri_write(paddr, v);
   17a54:	eaffffdb 	b	179c8 <bcm2835_peri_write>

00017a58 <bcm2835_gpio_fsel>:
//      X / 10 + ((X % 10) * 3)
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
   17a58:	e59f203c 	ldr	r2, [pc, #60]	; 17a9c <bcm2835_gpio_fsel+0x44>
//
// So the 3 bits for port X are:
//      X / 10 + ((X % 10) * 3)
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
   17a5c:	e1a03000 	mov	r3, r0
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
   17a60:	e59fc038 	ldr	ip, [pc, #56]	; 17aa0 <bcm2835_gpio_fsel+0x48>
   17a64:	e0802092 	umull	r2, r0, r2, r0
//
// So the 3 bits for port X are:
//      X / 10 + ((X % 10) * 3)
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
   17a68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
    uint8_t   shift = (pin % 10) * 3;
    uint32_t  mask = BCM2835_GPIO_FSEL_MASK << shift;
   17a6c:	e3a02007 	mov	r2, #7
//      X / 10 + ((X % 10) * 3)
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
   17a70:	e1a001a0 	lsr	r0, r0, #3
   17a74:	e59ce008 	ldr	lr, [ip, #8]
    uint8_t   shift = (pin % 10) * 3;
   17a78:	e080c100 	add	ip, r0, r0, lsl #2
    uint32_t  mask = BCM2835_GPIO_FSEL_MASK << shift;
    uint32_t  value = mode << shift;
    bcm2835_peri_set_bits(paddr, value, mask);
   17a7c:	e08e0100 	add	r0, lr, r0, lsl #2
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
    uint8_t   shift = (pin % 10) * 3;
   17a80:	e043308c 	sub	r3, r3, ip, lsl #1
    uint32_t  mask = BCM2835_GPIO_FSEL_MASK << shift;
    uint32_t  value = mode << shift;
    bcm2835_peri_set_bits(paddr, value, mask);
}
   17a84:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
*/
void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)
{
    /* Function selects are 10 pins per 32 bit word, 3 bits per pin */
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFSEL0/4 + (pin/10);
    uint8_t   shift = (pin % 10) * 3;
   17a88:	e0833083 	add	r3, r3, r3, lsl #1
    uint32_t  mask = BCM2835_GPIO_FSEL_MASK << shift;
   17a8c:	e6ef3073 	uxtb	r3, r3
    uint32_t  value = mode << shift;
    bcm2835_peri_set_bits(paddr, value, mask);
   17a90:	e1a01311 	lsl	r1, r1, r3
   17a94:	e1a02312 	lsl	r2, r2, r3
   17a98:	eaffffe3 	b	17a2c <bcm2835_peri_set_bits>
   17a9c:	cccccccd 	.word	0xcccccccd
   17aa0:	0002b960 	.word	0x0002b960

00017aa4 <bcm2835_gpio_set>:
}

/* Set output pin */
void bcm2835_gpio_set(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4 + pin/32;
   17aa4:	e59f201c 	ldr	r2, [pc, #28]	; 17ac8 <bcm2835_gpio_set+0x24>
   17aa8:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, 1 << shift);
   17aac:	e200101f 	and	r1, r0, #31
}

/* Set output pin */
void bcm2835_gpio_set(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4 + pin/32;
   17ab0:	e2833007 	add	r3, r3, #7
   17ab4:	e5920008 	ldr	r0, [r2, #8]
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, 1 << shift);
   17ab8:	e3a02001 	mov	r2, #1
   17abc:	e0800103 	add	r0, r0, r3, lsl #2
   17ac0:	e1a01112 	lsl	r1, r2, r1
   17ac4:	eaffffbf 	b	179c8 <bcm2835_peri_write>
   17ac8:	0002b960 	.word	0x0002b960

00017acc <bcm2835_gpio_clr>:
}

/* Clear output pin */
void bcm2835_gpio_clr(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4 + pin/32;
   17acc:	e59f201c 	ldr	r2, [pc, #28]	; 17af0 <bcm2835_gpio_clr+0x24>
   17ad0:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, 1 << shift);
   17ad4:	e200101f 	and	r1, r0, #31
}

/* Clear output pin */
void bcm2835_gpio_clr(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4 + pin/32;
   17ad8:	e283300a 	add	r3, r3, #10
   17adc:	e5920008 	ldr	r0, [r2, #8]
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, 1 << shift);
   17ae0:	e3a02001 	mov	r2, #1
   17ae4:	e0800103 	add	r0, r0, r3, lsl #2
   17ae8:	e1a01112 	lsl	r1, r2, r1
   17aec:	eaffffb5 	b	179c8 <bcm2835_peri_write>
   17af0:	0002b960 	.word	0x0002b960

00017af4 <bcm2835_gpio_set_multi>:
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17af4:	e59f300c 	ldr	r3, [pc, #12]	; 17b08 <bcm2835_gpio_set_multi+0x14>
    bcm2835_peri_write(paddr, 1 << shift);
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
   17af8:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17afc:	e5930008 	ldr	r0, [r3, #8]
    bcm2835_peri_write(paddr, mask);
   17b00:	e280001c 	add	r0, r0, #28
   17b04:	eaffffaf 	b	179c8 <bcm2835_peri_write>
   17b08:	0002b960 	.word	0x0002b960

00017b0c <bcm2835_gpio_clr_multi>:
}

/* Clear all output pins in the mask */
void bcm2835_gpio_clr_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4;
   17b0c:	e59f300c 	ldr	r3, [pc, #12]	; 17b20 <bcm2835_gpio_clr_multi+0x14>
    bcm2835_peri_write(paddr, mask);
}

/* Clear all output pins in the mask */
void bcm2835_gpio_clr_multi(uint32_t mask)
{
   17b10:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4;
   17b14:	e5930008 	ldr	r0, [r3, #8]
    bcm2835_peri_write(paddr, mask);
   17b18:	e2800028 	add	r0, r0, #40	; 0x28
   17b1c:	eaffffa9 	b	179c8 <bcm2835_peri_write>
   17b20:	0002b960 	.word	0x0002b960

00017b24 <bcm2835_gpio_lev>:
}

/* Read input pin */
uint8_t bcm2835_gpio_lev(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEV0/4 + pin/32;
   17b24:	e59f2030 	ldr	r2, [pc, #48]	; 17b5c <bcm2835_gpio_lev+0x38>
   17b28:	e1a032a0 	lsr	r3, r0, #5
    bcm2835_peri_write(paddr, mask);
}

/* Read input pin */
uint8_t bcm2835_gpio_lev(uint8_t pin)
{
   17b2c:	e92d4010 	push	{r4, lr}
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEV0/4 + pin/32;
   17b30:	e283300d 	add	r3, r3, #13
    bcm2835_peri_write(paddr, mask);
}

/* Read input pin */
uint8_t bcm2835_gpio_lev(uint8_t pin)
{
   17b34:	e1a04000 	mov	r4, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEV0/4 + pin/32;
   17b38:	e5920008 	ldr	r0, [r2, #8]
    uint8_t shift = pin % 32;
    uint32_t value = bcm2835_peri_read(paddr);
    return (value & (1 << shift)) ? HIGH : LOW;
   17b3c:	e204401f 	and	r4, r4, #31
/* Read input pin */
uint8_t bcm2835_gpio_lev(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEV0/4 + pin/32;
    uint8_t shift = pin % 32;
    uint32_t value = bcm2835_peri_read(paddr);
   17b40:	e0800103 	add	r0, r0, r3, lsl #2
   17b44:	ebffff81 	bl	17950 <bcm2835_peri_read>
    return (value & (1 << shift)) ? HIGH : LOW;
   17b48:	e3a03001 	mov	r3, #1
   17b4c:	e0103413 	ands	r3, r0, r3, lsl r4
}
   17b50:	13a00001 	movne	r0, #1
   17b54:	03a00000 	moveq	r0, #0
   17b58:	e8bd8010 	pop	{r4, pc}
   17b5c:	0002b960 	.word	0x0002b960

00017b60 <bcm2835_gpio_eds>:
/* See if an event detection bit is set
// Sigh cant support interrupts yet
*/
uint8_t bcm2835_gpio_eds(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
   17b60:	e59f2030 	ldr	r2, [pc, #48]	; 17b98 <bcm2835_gpio_eds+0x38>
   17b64:	e1a032a0 	lsr	r3, r0, #5

/* See if an event detection bit is set
// Sigh cant support interrupts yet
*/
uint8_t bcm2835_gpio_eds(uint8_t pin)
{
   17b68:	e92d4010 	push	{r4, lr}
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
   17b6c:	e2833010 	add	r3, r3, #16

/* See if an event detection bit is set
// Sigh cant support interrupts yet
*/
uint8_t bcm2835_gpio_eds(uint8_t pin)
{
   17b70:	e1a04000 	mov	r4, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
   17b74:	e5920008 	ldr	r0, [r2, #8]
    uint8_t shift = pin % 32;
    uint32_t value = bcm2835_peri_read(paddr);
    return (value & (1 << shift)) ? HIGH : LOW;
   17b78:	e204401f 	and	r4, r4, #31
*/
uint8_t bcm2835_gpio_eds(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
    uint8_t shift = pin % 32;
    uint32_t value = bcm2835_peri_read(paddr);
   17b7c:	e0800103 	add	r0, r0, r3, lsl #2
   17b80:	ebffff72 	bl	17950 <bcm2835_peri_read>
    return (value & (1 << shift)) ? HIGH : LOW;
   17b84:	e3a03001 	mov	r3, #1
   17b88:	e0103413 	ands	r3, r0, r3, lsl r4
}
   17b8c:	13a00001 	movne	r0, #1
   17b90:	03a00000 	moveq	r0, #0
   17b94:	e8bd8010 	pop	{r4, pc}
   17b98:	0002b960 	.word	0x0002b960

00017b9c <bcm2835_gpio_eds_multi>:

uint32_t bcm2835_gpio_eds_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4;
   17b9c:	e59f3018 	ldr	r3, [pc, #24]	; 17bbc <bcm2835_gpio_eds_multi+0x20>
    uint32_t value = bcm2835_peri_read(paddr);
    return (value & (1 << shift)) ? HIGH : LOW;
}

uint32_t bcm2835_gpio_eds_multi(uint32_t mask)
{
   17ba0:	e92d4010 	push	{r4, lr}
   17ba4:	e1a04000 	mov	r4, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4;
   17ba8:	e5930008 	ldr	r0, [r3, #8]
    uint32_t value = bcm2835_peri_read(paddr);
   17bac:	e2800040 	add	r0, r0, #64	; 0x40
   17bb0:	ebffff66 	bl	17950 <bcm2835_peri_read>
    return (value & mask);
}
   17bb4:	e0000004 	and	r0, r0, r4
   17bb8:	e8bd8010 	pop	{r4, pc}
   17bbc:	0002b960 	.word	0x0002b960

00017bc0 <bcm2835_gpio_set_eds>:

/* Write a 1 to clear the bit in EDS */
void bcm2835_gpio_set_eds(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
   17bc0:	e59f201c 	ldr	r2, [pc, #28]	; 17be4 <bcm2835_gpio_set_eds+0x24>
   17bc4:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17bc8:	e200101f 	and	r1, r0, #31
}

/* Write a 1 to clear the bit in EDS */
void bcm2835_gpio_set_eds(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4 + pin/32;
   17bcc:	e2833010 	add	r3, r3, #16
   17bd0:	e5920008 	ldr	r0, [r2, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17bd4:	e3a02001 	mov	r2, #1
    bcm2835_peri_write(paddr, value);
   17bd8:	e0800103 	add	r0, r0, r3, lsl #2
   17bdc:	e1a01112 	lsl	r1, r2, r1
   17be0:	eaffff78 	b	179c8 <bcm2835_peri_write>
   17be4:	0002b960 	.word	0x0002b960

00017be8 <bcm2835_gpio_set_eds_multi>:
}

void bcm2835_gpio_set_eds_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4;
   17be8:	e59f300c 	ldr	r3, [pc, #12]	; 17bfc <bcm2835_gpio_set_eds_multi+0x14>
    uint32_t value = 1 << shift;
    bcm2835_peri_write(paddr, value);
}

void bcm2835_gpio_set_eds_multi(uint32_t mask)
{
   17bec:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPEDS0/4;
   17bf0:	e5930008 	ldr	r0, [r3, #8]
    bcm2835_peri_write(paddr, mask);
   17bf4:	e2800040 	add	r0, r0, #64	; 0x40
   17bf8:	eaffff72 	b	179c8 <bcm2835_peri_write>
   17bfc:	0002b960 	.word	0x0002b960

00017c00 <bcm2835_gpio_ren>:
}

/* Rising edge detect enable */
void bcm2835_gpio_ren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPREN0/4 + pin/32;
   17c00:	e59f2020 	ldr	r2, [pc, #32]	; 17c28 <bcm2835_gpio_ren+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c04:	e200101f 	and	r1, r0, #31
   17c08:	e3a03001 	mov	r3, #1
}

/* Rising edge detect enable */
void bcm2835_gpio_ren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPREN0/4 + pin/32;
   17c0c:	e1a002a0 	lsr	r0, r0, #5
   17c10:	e5922008 	ldr	r2, [r2, #8]
   17c14:	e2800013 	add	r0, r0, #19
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c18:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17c1c:	e0820100 	add	r0, r2, r0, lsl #2
   17c20:	e1a02001 	mov	r2, r1
   17c24:	eaffff80 	b	17a2c <bcm2835_peri_set_bits>
   17c28:	0002b960 	.word	0x0002b960

00017c2c <bcm2835_gpio_clr_ren>:
}
void bcm2835_gpio_clr_ren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPREN0/4 + pin/32;
   17c2c:	e59f1020 	ldr	r1, [pc, #32]	; 17c54 <bcm2835_gpio_clr_ren+0x28>
   17c30:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c34:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_ren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPREN0/4 + pin/32;
   17c38:	e2833013 	add	r3, r3, #19
   17c3c:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c40:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17c44:	e0800103 	add	r0, r0, r3, lsl #2
   17c48:	e1a02211 	lsl	r2, r1, r2
   17c4c:	e3a01000 	mov	r1, #0
   17c50:	eaffff75 	b	17a2c <bcm2835_peri_set_bits>
   17c54:	0002b960 	.word	0x0002b960

00017c58 <bcm2835_gpio_fen>:
}

/* Falling edge detect enable */
void bcm2835_gpio_fen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFEN0/4 + pin/32;
   17c58:	e59f2020 	ldr	r2, [pc, #32]	; 17c80 <bcm2835_gpio_fen+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c5c:	e200101f 	and	r1, r0, #31
   17c60:	e3a03001 	mov	r3, #1
}

/* Falling edge detect enable */
void bcm2835_gpio_fen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFEN0/4 + pin/32;
   17c64:	e1a002a0 	lsr	r0, r0, #5
   17c68:	e5922008 	ldr	r2, [r2, #8]
   17c6c:	e2800016 	add	r0, r0, #22
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c70:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17c74:	e0820100 	add	r0, r2, r0, lsl #2
   17c78:	e1a02001 	mov	r2, r1
   17c7c:	eaffff6a 	b	17a2c <bcm2835_peri_set_bits>
   17c80:	0002b960 	.word	0x0002b960

00017c84 <bcm2835_gpio_clr_fen>:
}
void bcm2835_gpio_clr_fen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFEN0/4 + pin/32;
   17c84:	e59f1020 	ldr	r1, [pc, #32]	; 17cac <bcm2835_gpio_clr_fen+0x28>
   17c88:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c8c:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_fen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPFEN0/4 + pin/32;
   17c90:	e2833016 	add	r3, r3, #22
   17c94:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17c98:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17c9c:	e0800103 	add	r0, r0, r3, lsl #2
   17ca0:	e1a02211 	lsl	r2, r1, r2
   17ca4:	e3a01000 	mov	r1, #0
   17ca8:	eaffff5f 	b	17a2c <bcm2835_peri_set_bits>
   17cac:	0002b960 	.word	0x0002b960

00017cb0 <bcm2835_gpio_hen>:
}

/* High detect enable */
void bcm2835_gpio_hen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPHEN0/4 + pin/32;
   17cb0:	e59f2020 	ldr	r2, [pc, #32]	; 17cd8 <bcm2835_gpio_hen+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17cb4:	e200101f 	and	r1, r0, #31
   17cb8:	e3a03001 	mov	r3, #1
}

/* High detect enable */
void bcm2835_gpio_hen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPHEN0/4 + pin/32;
   17cbc:	e1a002a0 	lsr	r0, r0, #5
   17cc0:	e5922008 	ldr	r2, [r2, #8]
   17cc4:	e2800019 	add	r0, r0, #25
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17cc8:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17ccc:	e0820100 	add	r0, r2, r0, lsl #2
   17cd0:	e1a02001 	mov	r2, r1
   17cd4:	eaffff54 	b	17a2c <bcm2835_peri_set_bits>
   17cd8:	0002b960 	.word	0x0002b960

00017cdc <bcm2835_gpio_clr_hen>:
}
void bcm2835_gpio_clr_hen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPHEN0/4 + pin/32;
   17cdc:	e59f1020 	ldr	r1, [pc, #32]	; 17d04 <bcm2835_gpio_clr_hen+0x28>
   17ce0:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17ce4:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_hen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPHEN0/4 + pin/32;
   17ce8:	e2833019 	add	r3, r3, #25
   17cec:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17cf0:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17cf4:	e0800103 	add	r0, r0, r3, lsl #2
   17cf8:	e1a02211 	lsl	r2, r1, r2
   17cfc:	e3a01000 	mov	r1, #0
   17d00:	eaffff49 	b	17a2c <bcm2835_peri_set_bits>
   17d04:	0002b960 	.word	0x0002b960

00017d08 <bcm2835_gpio_len>:
}

/* Low detect enable */
void bcm2835_gpio_len(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEN0/4 + pin/32;
   17d08:	e59f2020 	ldr	r2, [pc, #32]	; 17d30 <bcm2835_gpio_len+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d0c:	e200101f 	and	r1, r0, #31
   17d10:	e3a03001 	mov	r3, #1
}

/* Low detect enable */
void bcm2835_gpio_len(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEN0/4 + pin/32;
   17d14:	e1a002a0 	lsr	r0, r0, #5
   17d18:	e5922008 	ldr	r2, [r2, #8]
   17d1c:	e280001c 	add	r0, r0, #28
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d20:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17d24:	e0820100 	add	r0, r2, r0, lsl #2
   17d28:	e1a02001 	mov	r2, r1
   17d2c:	eaffff3e 	b	17a2c <bcm2835_peri_set_bits>
   17d30:	0002b960 	.word	0x0002b960

00017d34 <bcm2835_gpio_clr_len>:
}
void bcm2835_gpio_clr_len(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEN0/4 + pin/32;
   17d34:	e59f1020 	ldr	r1, [pc, #32]	; 17d5c <bcm2835_gpio_clr_len+0x28>
   17d38:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d3c:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_len(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPLEN0/4 + pin/32;
   17d40:	e283301c 	add	r3, r3, #28
   17d44:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d48:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17d4c:	e0800103 	add	r0, r0, r3, lsl #2
   17d50:	e1a02211 	lsl	r2, r1, r2
   17d54:	e3a01000 	mov	r1, #0
   17d58:	eaffff33 	b	17a2c <bcm2835_peri_set_bits>
   17d5c:	0002b960 	.word	0x0002b960

00017d60 <bcm2835_gpio_aren>:
}

/* Async rising edge detect enable */
void bcm2835_gpio_aren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAREN0/4 + pin/32;
   17d60:	e59f2020 	ldr	r2, [pc, #32]	; 17d88 <bcm2835_gpio_aren+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d64:	e200101f 	and	r1, r0, #31
   17d68:	e3a03001 	mov	r3, #1
}

/* Async rising edge detect enable */
void bcm2835_gpio_aren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAREN0/4 + pin/32;
   17d6c:	e1a002a0 	lsr	r0, r0, #5
   17d70:	e5922008 	ldr	r2, [r2, #8]
   17d74:	e280001f 	add	r0, r0, #31
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d78:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17d7c:	e0820100 	add	r0, r2, r0, lsl #2
   17d80:	e1a02001 	mov	r2, r1
   17d84:	eaffff28 	b	17a2c <bcm2835_peri_set_bits>
   17d88:	0002b960 	.word	0x0002b960

00017d8c <bcm2835_gpio_clr_aren>:
}
void bcm2835_gpio_clr_aren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAREN0/4 + pin/32;
   17d8c:	e59f1020 	ldr	r1, [pc, #32]	; 17db4 <bcm2835_gpio_clr_aren+0x28>
   17d90:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17d94:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_aren(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAREN0/4 + pin/32;
   17d98:	e283301f 	add	r3, r3, #31
   17d9c:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17da0:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17da4:	e0800103 	add	r0, r0, r3, lsl #2
   17da8:	e1a02211 	lsl	r2, r1, r2
   17dac:	e3a01000 	mov	r1, #0
   17db0:	eaffff1d 	b	17a2c <bcm2835_peri_set_bits>
   17db4:	0002b960 	.word	0x0002b960

00017db8 <bcm2835_gpio_afen>:
}

/* Async falling edge detect enable */
void bcm2835_gpio_afen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAFEN0/4 + pin/32;
   17db8:	e59f2020 	ldr	r2, [pc, #32]	; 17de0 <bcm2835_gpio_afen+0x28>
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17dbc:	e200101f 	and	r1, r0, #31
   17dc0:	e3a03001 	mov	r3, #1
}

/* Async falling edge detect enable */
void bcm2835_gpio_afen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAFEN0/4 + pin/32;
   17dc4:	e1a002a0 	lsr	r0, r0, #5
   17dc8:	e5922008 	ldr	r2, [r2, #8]
   17dcc:	e2800022 	add	r0, r0, #34	; 0x22
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17dd0:	e1a01113 	lsl	r1, r3, r1
    bcm2835_peri_set_bits(paddr, value, value);
   17dd4:	e0820100 	add	r0, r2, r0, lsl #2
   17dd8:	e1a02001 	mov	r2, r1
   17ddc:	eaffff12 	b	17a2c <bcm2835_peri_set_bits>
   17de0:	0002b960 	.word	0x0002b960

00017de4 <bcm2835_gpio_clr_afen>:
}
void bcm2835_gpio_clr_afen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAFEN0/4 + pin/32;
   17de4:	e59f1020 	ldr	r1, [pc, #32]	; 17e0c <bcm2835_gpio_clr_afen+0x28>
   17de8:	e1a032a0 	lsr	r3, r0, #5
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17dec:	e200201f 	and	r2, r0, #31
    uint32_t value = 1 << shift;
    bcm2835_peri_set_bits(paddr, value, value);
}
void bcm2835_gpio_clr_afen(uint8_t pin)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPAFEN0/4 + pin/32;
   17df0:	e2833022 	add	r3, r3, #34	; 0x22
   17df4:	e5910008 	ldr	r0, [r1, #8]
    uint8_t shift = pin % 32;
    uint32_t value = 1 << shift;
   17df8:	e3a01001 	mov	r1, #1
    bcm2835_peri_set_bits(paddr, 0, value);
   17dfc:	e0800103 	add	r0, r0, r3, lsl #2
   17e00:	e1a02211 	lsl	r2, r1, r2
   17e04:	e3a01000 	mov	r1, #0
   17e08:	eaffff07 	b	17a2c <bcm2835_peri_set_bits>
   17e0c:	0002b960 	.word	0x0002b960

00017e10 <bcm2835_gpio_pud>:
}

/* Set pullup/down */
void bcm2835_gpio_pud(uint8_t pud)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUD/4;
   17e10:	e59f300c 	ldr	r3, [pc, #12]	; 17e24 <bcm2835_gpio_pud+0x14>
    bcm2835_peri_set_bits(paddr, 0, value);
}

/* Set pullup/down */
void bcm2835_gpio_pud(uint8_t pud)
{
   17e14:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUD/4;
   17e18:	e5930008 	ldr	r0, [r3, #8]
    bcm2835_peri_write(paddr, pud);
   17e1c:	e2800094 	add	r0, r0, #148	; 0x94
   17e20:	eafffee8 	b	179c8 <bcm2835_peri_write>
   17e24:	0002b960 	.word	0x0002b960

00017e28 <bcm2835_gpio_pudclk>:
/* Pullup/down clock
// Clocks the value of pud into the GPIO pin
*/
void bcm2835_gpio_pudclk(uint8_t pin, uint8_t on)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUDCLK0/4 + pin/32;
   17e28:	e59fc020 	ldr	ip, [pc, #32]	; 17e50 <bcm2835_gpio_pudclk+0x28>
   17e2c:	e1a022a0 	lsr	r2, r0, #5
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, (on ? 1 : 0) << shift);
   17e30:	e2911000 	adds	r1, r1, #0
   17e34:	e200301f 	and	r3, r0, #31
   17e38:	13a01001 	movne	r1, #1
/* Pullup/down clock
// Clocks the value of pud into the GPIO pin
*/
void bcm2835_gpio_pudclk(uint8_t pin, uint8_t on)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUDCLK0/4 + pin/32;
   17e3c:	e2822026 	add	r2, r2, #38	; 0x26
   17e40:	e59c0008 	ldr	r0, [ip, #8]
    uint8_t shift = pin % 32;
    bcm2835_peri_write(paddr, (on ? 1 : 0) << shift);
   17e44:	e1a01311 	lsl	r1, r1, r3
   17e48:	e0800102 	add	r0, r0, r2, lsl #2
   17e4c:	eafffedd 	b	179c8 <bcm2835_peri_write>
   17e50:	0002b960 	.word	0x0002b960

00017e54 <bcm2835_gpio_pad>:
}

/* Read GPIO pad behaviour for groups of GPIOs */
uint32_t bcm2835_gpio_pad(uint8_t group)
{
  if (bcm2835_pads == MAP_FAILED)
   17e54:	e59f301c 	ldr	r3, [pc, #28]	; 17e78 <bcm2835_gpio_pad+0x24>
   17e58:	e5933014 	ldr	r3, [r3, #20]
   17e5c:	e3730001 	cmn	r3, #1
   17e60:	0a000002 	beq	17e70 <bcm2835_gpio_pad+0x1c>
    return 0;
  
    volatile uint32_t* paddr = bcm2835_pads + BCM2835_PADS_GPIO_0_27/4 + group;
   17e64:	e280000b 	add	r0, r0, #11
    return bcm2835_peri_read(paddr);
   17e68:	e0830100 	add	r0, r3, r0, lsl #2
   17e6c:	eafffeb7 	b	17950 <bcm2835_peri_read>
}
   17e70:	e3a00000 	mov	r0, #0
   17e74:	e12fff1e 	bx	lr
   17e78:	0002b960 	.word	0x0002b960

00017e7c <bcm2835_gpio_set_pad>:
// powerup value for all pads is
// BCM2835_PAD_SLEW_RATE_UNLIMITED | BCM2835_PAD_HYSTERESIS_ENABLED | BCM2835_PAD_DRIVE_8mA
*/
void bcm2835_gpio_set_pad(uint8_t group, uint32_t control)
{
  if (bcm2835_pads == MAP_FAILED)
   17e7c:	e59f3018 	ldr	r3, [pc, #24]	; 17e9c <bcm2835_gpio_set_pad+0x20>
   17e80:	e5933014 	ldr	r3, [r3, #20]
   17e84:	e3730001 	cmn	r3, #1
   17e88:	012fff1e 	bxeq	lr
    return;
  
    volatile uint32_t* paddr = bcm2835_pads + BCM2835_PADS_GPIO_0_27/4 + group;
   17e8c:	e280000b 	add	r0, r0, #11
    bcm2835_peri_write(paddr, control | BCM2835_PAD_PASSWRD);
   17e90:	e381145a 	orr	r1, r1, #1509949440	; 0x5a000000
   17e94:	e0830100 	add	r0, r3, r0, lsl #2
   17e98:	eafffeca 	b	179c8 <bcm2835_peri_write>
   17e9c:	0002b960 	.word	0x0002b960

00017ea0 <bcm2835_delay>:
*/
void bcm2835_delay(unsigned int millis)
{
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
   17ea0:	e59f3040 	ldr	r3, [pc, #64]	; 17ee8 <bcm2835_delay+0x48>

/* Some convenient arduino-like functions
// milliseconds
*/
void bcm2835_delay(unsigned int millis)
{
   17ea4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17ea8:	e3a0effa 	mov	lr, #1000	; 0x3e8
*/
void bcm2835_delay(unsigned int millis)
{
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
   17eac:	e0831093 	umull	r1, r3, r3, r0
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17eb0:	e59fc034 	ldr	ip, [pc, #52]	; 17eec <bcm2835_delay+0x4c>

/* Some convenient arduino-like functions
// milliseconds
*/
void bcm2835_delay(unsigned int millis)
{
   17eb4:	e1a02000 	mov	r2, r0
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
   17eb8:	e1a03323 	lsr	r3, r3, #6

/* Some convenient arduino-like functions
// milliseconds
*/
void bcm2835_delay(unsigned int millis)
{
   17ebc:	e24dd00c 	sub	sp, sp, #12
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17ec0:	e00e039e 	mul	lr, lr, r3
    nanosleep(&sleeper, NULL);
   17ec4:	e1a0000d 	mov	r0, sp
void bcm2835_delay(unsigned int millis)
{
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17ec8:	e06e2002 	rsb	r2, lr, r2
    nanosleep(&sleeper, NULL);
   17ecc:	e3a01000 	mov	r1, #0
void bcm2835_delay(unsigned int millis)
{
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17ed0:	e002029c 	mul	r2, ip, r2
*/
void bcm2835_delay(unsigned int millis)
{
    struct timespec sleeper;
    
    sleeper.tv_sec  = (time_t)(millis / 1000);
   17ed4:	e58d3000 	str	r3, [sp]
    sleeper.tv_nsec = (long)(millis % 1000) * 1000000;
   17ed8:	e58d2004 	str	r2, [sp, #4]
    nanosleep(&sleeper, NULL);
   17edc:	ebffe40b 	bl	10f10 <nanosleep@plt>
}
   17ee0:	e28dd00c 	add	sp, sp, #12
   17ee4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17ee8:	10624dd3 	.word	0x10624dd3
   17eec:	000f4240 	.word	0x000f4240

00017ef0 <bcm2835_gpio_write>:
*/

/* Set the state of an output */
void bcm2835_gpio_write(uint8_t pin, uint8_t on)
{
    if (on)
   17ef0:	e3510000 	cmp	r1, #0
   17ef4:	1a000000 	bne	17efc <bcm2835_gpio_write+0xc>
	bcm2835_gpio_set(pin);
    else
	bcm2835_gpio_clr(pin);
   17ef8:	eafffef3 	b	17acc <bcm2835_gpio_clr>

/* Set the state of an output */
void bcm2835_gpio_write(uint8_t pin, uint8_t on)
{
    if (on)
	bcm2835_gpio_set(pin);
   17efc:	eafffee8 	b	17aa4 <bcm2835_gpio_set>

00017f00 <bcm2835_gpio_write_multi>:
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17f00:	e59f301c 	ldr	r3, [pc, #28]	; 17f24 <bcm2835_gpio_write_multi+0x24>
}

/* Set the state of a all 32 outputs in the mask to on or off */
void bcm2835_gpio_write_multi(uint32_t mask, uint8_t on)
{
    if (on)
   17f04:	e3510000 	cmp	r1, #0
	bcm2835_gpio_clr(pin);
}

/* Set the state of a all 32 outputs in the mask to on or off */
void bcm2835_gpio_write_multi(uint32_t mask, uint8_t on)
{
   17f08:	e1a01000 	mov	r1, r0
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17f0c:	e5930008 	ldr	r0, [r3, #8]
}

/* Set the state of a all 32 outputs in the mask to on or off */
void bcm2835_gpio_write_multi(uint32_t mask, uint8_t on)
{
    if (on)
   17f10:	1a000001 	bne	17f1c <bcm2835_gpio_write_multi+0x1c>

/* Clear all output pins in the mask */
void bcm2835_gpio_clr_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4;
    bcm2835_peri_write(paddr, mask);
   17f14:	e2800028 	add	r0, r0, #40	; 0x28
   17f18:	eafffeaa 	b	179c8 <bcm2835_peri_write>

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
    bcm2835_peri_write(paddr, mask);
   17f1c:	e280001c 	add	r0, r0, #28
   17f20:	eafffea8 	b	179c8 <bcm2835_peri_write>
   17f24:	0002b960 	.word	0x0002b960

00017f28 <bcm2835_gpio_write_mask>:
	bcm2835_gpio_clr_multi(mask);
}

/* Set the state of a all 32 outputs in the mask to the values in value */
void bcm2835_gpio_write_mask(uint32_t value, uint32_t mask)
{
   17f28:	e92d4070 	push	{r4, r5, r6, lr}
   17f2c:	e1a05000 	mov	r5, r0
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17f30:	e59f6024 	ldr	r6, [pc, #36]	; 17f5c <bcm2835_gpio_write_mask+0x34>
	bcm2835_gpio_clr_multi(mask);
}

/* Set the state of a all 32 outputs in the mask to the values in value */
void bcm2835_gpio_write_mask(uint32_t value, uint32_t mask)
{
   17f34:	e1a04001 	mov	r4, r1

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
    bcm2835_peri_write(paddr, mask);
   17f38:	e0051001 	and	r1, r5, r1
}

/* Set all output pins in the mask */
void bcm2835_gpio_set_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPSET0/4;
   17f3c:	e5960008 	ldr	r0, [r6, #8]
    bcm2835_peri_write(paddr, mask);
   17f40:	e280001c 	add	r0, r0, #28
   17f44:	ebfffe9f 	bl	179c8 <bcm2835_peri_write>
}

/* Clear all output pins in the mask */
void bcm2835_gpio_clr_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4;
   17f48:	e5960008 	ldr	r0, [r6, #8]
    bcm2835_peri_write(paddr, mask);
   17f4c:	e1c41005 	bic	r1, r4, r5
   17f50:	e2800028 	add	r0, r0, #40	; 0x28
/* Set the state of a all 32 outputs in the mask to the values in value */
void bcm2835_gpio_write_mask(uint32_t value, uint32_t mask)
{
    bcm2835_gpio_set_multi(value & mask);
    bcm2835_gpio_clr_multi((~value) & mask);
}
   17f54:	e8bd4070 	pop	{r4, r5, r6, lr}

/* Clear all output pins in the mask */
void bcm2835_gpio_clr_multi(uint32_t mask)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPCLR0/4;
    bcm2835_peri_write(paddr, mask);
   17f58:	eafffe9a 	b	179c8 <bcm2835_peri_write>
   17f5c:	0002b960 	.word	0x0002b960

00017f60 <bcm2835_spi_begin>:
    bcm2835_gpio_pud(BCM2835_GPIO_PUD_OFF);
    bcm2835_gpio_pudclk(pin, 0);
}

int bcm2835_spi_begin(void)
{
   17f60:	e92d4010 	push	{r4, lr}
    volatile uint32_t* paddr;

    if (bcm2835_spi0 == MAP_FAILED)
   17f64:	e59f4094 	ldr	r4, [pc, #148]	; 18000 <bcm2835_spi_begin+0xa0>
   17f68:	e5943018 	ldr	r3, [r4, #24]
   17f6c:	e3730001 	cmn	r3, #1
   17f70:	0a00001a 	beq	17fe0 <bcm2835_spi_begin+0x80>
      return 0; /* bcm2835_init() failed, or not root */
    
    /* Set the SPI0 pins to the Alt 0 function to enable SPI0 access on them */
    bcm2835_gpio_fsel(RPI_GPIO_P1_26, BCM2835_GPIO_FSEL_ALT0); /* CE1 */
   17f74:	e3a00007 	mov	r0, #7
   17f78:	e3a01004 	mov	r1, #4
   17f7c:	ebfffeb5 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_24, BCM2835_GPIO_FSEL_ALT0); /* CE0 */
   17f80:	e3a00008 	mov	r0, #8
   17f84:	e3a01004 	mov	r1, #4
   17f88:	ebfffeb2 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_21, BCM2835_GPIO_FSEL_ALT0); /* MISO */
   17f8c:	e3a00009 	mov	r0, #9
   17f90:	e3a01004 	mov	r1, #4
   17f94:	ebfffeaf 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_19, BCM2835_GPIO_FSEL_ALT0); /* MOSI */
   17f98:	e3a0000a 	mov	r0, #10
   17f9c:	e3a01004 	mov	r1, #4
   17fa0:	ebfffeac 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_23, BCM2835_GPIO_FSEL_ALT0); /* CLK */
   17fa4:	e3a0000b 	mov	r0, #11
   17fa8:	e3a01004 	mov	r1, #4
   17fac:	ebfffea9 	bl	17a58 <bcm2835_gpio_fsel>
    
    /* Set the SPI CS register to the some sensible defaults */
    paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   17fb0:	e5944018 	ldr	r4, [r4, #24]
    bcm2835_peri_write(paddr, 0); /* All 0s */
   17fb4:	e3a01000 	mov	r1, #0
   17fb8:	e1a00004 	mov	r0, r4
   17fbc:	ebfffe81 	bl	179c8 <bcm2835_peri_write>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   17fc0:	e59f303c 	ldr	r3, [pc, #60]	; 18004 <bcm2835_spi_begin+0xa4>
   17fc4:	e5d33000 	ldrb	r3, [r3]
   17fc8:	e3530000 	cmp	r3, #0
   17fcc:	1a000005 	bne	17fe8 <bcm2835_spi_begin+0x88>
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   17fd0:	e3a03030 	mov	r3, #48	; 0x30
   17fd4:	e5843000 	str	r3, [r4]
    bcm2835_peri_write(paddr, 0); /* All 0s */
    
    /* Clear TX and RX fifos */
    bcm2835_peri_write_nb(paddr, BCM2835_SPI0_CS_CLEAR);

    return 1; // OK
   17fd8:	e3a00001 	mov	r0, #1
   17fdc:	e8bd8010 	pop	{r4, pc}
int bcm2835_spi_begin(void)
{
    volatile uint32_t* paddr;

    if (bcm2835_spi0 == MAP_FAILED)
      return 0; /* bcm2835_init() failed, or not root */
   17fe0:	e3a00000 	mov	r0, #0
    
    /* Clear TX and RX fifos */
    bcm2835_peri_write_nb(paddr, BCM2835_SPI0_CS_CLEAR);

    return 1; // OK
}
   17fe4:	e8bd8010 	pop	{r4, pc}
/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   17fe8:	e1a01004 	mov	r1, r4
   17fec:	e3a02030 	mov	r2, #48	; 0x30
   17ff0:	e59f0010 	ldr	r0, [pc, #16]	; 18008 <bcm2835_spi_begin+0xa8>
   17ff4:	ebffe3b3 	bl	10ec8 <printf@plt>
    bcm2835_peri_write(paddr, 0); /* All 0s */
    
    /* Clear TX and RX fifos */
    bcm2835_peri_write_nb(paddr, BCM2835_SPI0_CS_CLEAR);

    return 1; // OK
   17ff8:	e3a00001 	mov	r0, #1
   17ffc:	e8bd8010 	pop	{r4, pc}
   18000:	0002b960 	.word	0x0002b960
   18004:	0002d16c 	.word	0x0002d16c
   18008:	0001b02c 	.word	0x0001b02c

0001800c <bcm2835_spi_end>:
}

void bcm2835_spi_end(void)
{  
   1800c:	e92d4008 	push	{r3, lr}
    /* Set all the SPI0 pins back to input */
    bcm2835_gpio_fsel(RPI_GPIO_P1_26, BCM2835_GPIO_FSEL_INPT); /* CE1 */
   18010:	e3a00007 	mov	r0, #7
   18014:	e3a01000 	mov	r1, #0
   18018:	ebfffe8e 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_24, BCM2835_GPIO_FSEL_INPT); /* CE0 */
   1801c:	e3a00008 	mov	r0, #8
   18020:	e3a01000 	mov	r1, #0
   18024:	ebfffe8b 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_21, BCM2835_GPIO_FSEL_INPT); /* MISO */
   18028:	e3a00009 	mov	r0, #9
   1802c:	e3a01000 	mov	r1, #0
   18030:	ebfffe88 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_19, BCM2835_GPIO_FSEL_INPT); /* MOSI */
   18034:	e3a0000a 	mov	r0, #10
   18038:	e3a01000 	mov	r1, #0
   1803c:	ebfffe85 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_GPIO_P1_23, BCM2835_GPIO_FSEL_INPT); /* CLK */
   18040:	e3a0000b 	mov	r0, #11
   18044:	e3a01000 	mov	r1, #0
}
   18048:	e8bd4008 	pop	{r3, lr}
    /* Set all the SPI0 pins back to input */
    bcm2835_gpio_fsel(RPI_GPIO_P1_26, BCM2835_GPIO_FSEL_INPT); /* CE1 */
    bcm2835_gpio_fsel(RPI_GPIO_P1_24, BCM2835_GPIO_FSEL_INPT); /* CE0 */
    bcm2835_gpio_fsel(RPI_GPIO_P1_21, BCM2835_GPIO_FSEL_INPT); /* MISO */
    bcm2835_gpio_fsel(RPI_GPIO_P1_19, BCM2835_GPIO_FSEL_INPT); /* MOSI */
    bcm2835_gpio_fsel(RPI_GPIO_P1_23, BCM2835_GPIO_FSEL_INPT); /* CLK */
   1804c:	eafffe81 	b	17a58 <bcm2835_gpio_fsel>

00018050 <bcm2835_spi_setBitOrder>:
}

void bcm2835_spi_setBitOrder(uint8_t __attribute__((unused)) order)
{
   18050:	e12fff1e 	bx	lr

00018054 <bcm2835_spi_setClockDivider>:
// rounded down. The maximum SPI clock rate is
// of the APB clock
*/
void bcm2835_spi_setClockDivider(uint16_t divider)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CLK/4;
   18054:	e59f300c 	ldr	r3, [pc, #12]	; 18068 <bcm2835_spi_setClockDivider+0x14>
// The divisor must be a power of 2. Odd numbers
// rounded down. The maximum SPI clock rate is
// of the APB clock
*/
void bcm2835_spi_setClockDivider(uint16_t divider)
{
   18058:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CLK/4;
   1805c:	e5930018 	ldr	r0, [r3, #24]
    bcm2835_peri_write(paddr, divider);
   18060:	e2800008 	add	r0, r0, #8
   18064:	eafffe57 	b	179c8 <bcm2835_peri_write>
   18068:	0002b960 	.word	0x0002b960

0001806c <bcm2835_spi_setDataMode>:
}

void bcm2835_spi_setDataMode(uint8_t mode)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   1806c:	e59f300c 	ldr	r3, [pc, #12]	; 18080 <bcm2835_spi_setDataMode+0x14>
    /* Mask in the CPO and CPHA bits of CS */
    bcm2835_peri_set_bits(paddr, mode << 2, BCM2835_SPI0_CS_CPOL | BCM2835_SPI0_CS_CPHA);
   18070:	e1a01100 	lsl	r1, r0, #2
   18074:	e3a0200c 	mov	r2, #12
   18078:	e5930018 	ldr	r0, [r3, #24]
   1807c:	eafffe6a 	b	17a2c <bcm2835_peri_set_bits>
   18080:	0002b960 	.word	0x0002b960

00018084 <bcm2835_spi_transfer>:
}

/* Writes (and reads) a single byte to SPI */
uint8_t bcm2835_spi_transfer(uint8_t value)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   18084:	e59f30a8 	ldr	r3, [pc, #168]	; 18134 <bcm2835_spi_transfer+0xb0>
    bcm2835_peri_set_bits(paddr, mode << 2, BCM2835_SPI0_CS_CPOL | BCM2835_SPI0_CS_CPHA);
}

/* Writes (and reads) a single byte to SPI */
uint8_t bcm2835_spi_transfer(uint8_t value)
{
   18088:	e92d4070 	push	{r4, r5, r6, lr}
    /* This is Polled transfer as per section 10.6.1
    // BUG ALERT: what happens if we get interupted in this section, and someone else
    // accesses a different peripheral? 
    // Clear TX and RX fifos
    */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   1808c:	e3a01030 	mov	r1, #48	; 0x30
}

/* Writes (and reads) a single byte to SPI */
uint8_t bcm2835_spi_transfer(uint8_t value)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   18090:	e5934018 	ldr	r4, [r3, #24]
    /* This is Polled transfer as per section 10.6.1
    // BUG ALERT: what happens if we get interupted in this section, and someone else
    // accesses a different peripheral? 
    // Clear TX and RX fifos
    */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   18094:	e1a02001 	mov	r2, r1
    bcm2835_peri_set_bits(paddr, mode << 2, BCM2835_SPI0_CS_CPOL | BCM2835_SPI0_CS_CPHA);
}

/* Writes (and reads) a single byte to SPI */
uint8_t bcm2835_spi_transfer(uint8_t value)
{
   18098:	e1a06000 	mov	r6, r0
    /* This is Polled transfer as per section 10.6.1
    // BUG ALERT: what happens if we get interupted in this section, and someone else
    // accesses a different peripheral? 
    // Clear TX and RX fifos
    */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   1809c:	e1a00004 	mov	r0, r4
   180a0:	ebfffe61 	bl	17a2c <bcm2835_peri_set_bits>

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);
   180a4:	e3a01080 	mov	r1, #128	; 0x80
   180a8:	e1a00004 	mov	r0, r4
   180ac:	e1a02001 	mov	r2, r1
   180b0:	ebfffe5d 	bl	17a2c <bcm2835_peri_set_bits>

    /* Maybe wait for TXD */
    while (!(bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))
   180b4:	e1a00004 	mov	r0, r4
   180b8:	ebfffe24 	bl	17950 <bcm2835_peri_read>
   180bc:	e3100701 	tst	r0, #262144	; 0x40000
   180c0:	0afffffb 	beq	180b4 <bcm2835_spi_transfer+0x30>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   180c4:	e59f506c 	ldr	r5, [pc, #108]	; 18138 <bcm2835_spi_transfer+0xb4>
   180c8:	e5d53000 	ldrb	r3, [r5]
   180cc:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   180d0:	05846004 	streq	r6, [r4, #4]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   180d4:	1a000010 	bne	1811c <bcm2835_spi_transfer+0x98>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   180d8:	e3530000 	cmp	r3, #0
   180dc:	1a000009 	bne	18108 <bcm2835_spi_transfer+0x84>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   180e0:	e5943000 	ldr	r3, [r4]

    /* Write to FIFO, no barrier */
    bcm2835_peri_write_nb(fifo, value);

    /* Wait for DONE to be set */
    while (!(bcm2835_peri_read_nb(paddr) & BCM2835_SPI0_CS_DONE))
   180e4:	e3130801 	tst	r3, #65536	; 0x10000
   180e8:	0afffffc 	beq	180e0 <bcm2835_spi_transfer+0x5c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   180ec:	e5945004 	ldr	r5, [r4, #4]

    /* Read any byte that was sent back by the slave while we sere sending to it */
    ret = bcm2835_peri_read_nb(fifo);

    /* Set TA = 0, and also set the barrier */
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
   180f0:	e1a00004 	mov	r0, r4
   180f4:	e3a01000 	mov	r1, #0
   180f8:	e3a02080 	mov	r2, #128	; 0x80
   180fc:	ebfffe4a 	bl	17a2c <bcm2835_peri_set_bits>

    return ret;
}
   18100:	e6ef0075 	uxtb	r0, r5
   18104:	e8bd8070 	pop	{r4, r5, r6, pc}
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18108:	e59f002c 	ldr	r0, [pc, #44]	; 1813c <bcm2835_spi_transfer+0xb8>
   1810c:	e1a01004 	mov	r1, r4
   18110:	ebffe36c 	bl	10ec8 <printf@plt>
   18114:	e5d53000 	ldrb	r3, [r5]
   18118:	eaffffee 	b	180d8 <bcm2835_spi_transfer+0x54>
/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   1811c:	e1a02006 	mov	r2, r6
   18120:	e59f0018 	ldr	r0, [pc, #24]	; 18140 <bcm2835_spi_transfer+0xbc>
   18124:	e2841004 	add	r1, r4, #4
   18128:	ebffe366 	bl	10ec8 <printf@plt>
   1812c:	e5d53000 	ldrb	r3, [r5]
   18130:	eaffffe8 	b	180d8 <bcm2835_spi_transfer+0x54>
   18134:	0002b960 	.word	0x0002b960
   18138:	0002d16c 	.word	0x0002d16c
   1813c:	0001afdc 	.word	0x0001afdc
   18140:	0001b02c 	.word	0x0001b02c

00018144 <bcm2835_spi_transfernb>:
}

/* Writes (and reads) an number of bytes to SPI */
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   18144:	e59f3130 	ldr	r3, [pc, #304]	; 1827c <bcm2835_spi_transfernb+0x138>
    return ret;
}

/* Writes (and reads) an number of bytes to SPI */
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
   18148:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1814c:	e24dd00c 	sub	sp, sp, #12
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   18150:	e5934018 	ldr	r4, [r3, #24]
    return ret;
}

/* Writes (and reads) an number of bytes to SPI */
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
   18154:	e58d1004 	str	r1, [sp, #4]
    // BUG ALERT: what happens if we get interupted in this section, and someone else
    // accesses a different peripheral? 
    */

    /* Clear TX and RX fifos */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   18158:	e3a01030 	mov	r1, #48	; 0x30
    return ret;
}

/* Writes (and reads) an number of bytes to SPI */
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
   1815c:	e1a0b000 	mov	fp, r0
   18160:	e1a07002 	mov	r7, r2
    // BUG ALERT: what happens if we get interupted in this section, and someone else
    // accesses a different peripheral? 
    */

    /* Clear TX and RX fifos */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   18164:	e1a00004 	mov	r0, r4
   18168:	e1a02001 	mov	r2, r1
   1816c:	ebfffe2e 	bl	17a2c <bcm2835_peri_set_bits>

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);
   18170:	e3a01080 	mov	r1, #128	; 0x80
   18174:	e1a00004 	mov	r0, r4
   18178:	e1a02001 	mov	r2, r1
   1817c:	ebfffe2a 	bl	17a2c <bcm2835_peri_set_bits>
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
    volatile uint32_t* fifo = bcm2835_spi0 + BCM2835_SPI0_FIFO/4;
    uint32_t TXCnt=0;
    uint32_t RXCnt=0;
   18180:	e3a06000 	mov	r6, #0
   18184:	e59f90f4 	ldr	r9, [pc, #244]	; 18280 <bcm2835_spi_transfernb+0x13c>

/* Writes (and reads) an number of bytes to SPI */
void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
    volatile uint32_t* fifo = bcm2835_spi0 + BCM2835_SPI0_FIFO/4;
   18188:	e284a004 	add	sl, r4, #4
    uint32_t TXCnt=0;
   1818c:	e1a05006 	mov	r5, r6

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);

    /* Use the FIFO's to reduce the interbyte times */
    while((TXCnt < len)||(RXCnt < len))
   18190:	e1550007 	cmp	r5, r7
   18194:	21560007 	cmpcs	r6, r7
   18198:	2a000015 	bcs	181f4 <bcm2835_spi_transfernb+0xb0>
   1819c:	e08b8005 	add	r8, fp, r5
   181a0:	ea000000 	b	181a8 <bcm2835_spi_transfernb+0x64>
    {
        /* TX fifo not full, so add some more bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))&&(TXCnt < len ))
        {
           bcm2835_peri_write_nb(fifo, tbuf[TXCnt]);
           TXCnt++;
   181a4:	e2855001 	add	r5, r5, #1

    /* Use the FIFO's to reduce the interbyte times */
    while((TXCnt < len)||(RXCnt < len))
    {
        /* TX fifo not full, so add some more bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))&&(TXCnt < len ))
   181a8:	e1a00004 	mov	r0, r4
   181ac:	ebfffde7 	bl	17950 <bcm2835_peri_read>
   181b0:	e1550007 	cmp	r5, r7
   181b4:	23a03000 	movcs	r3, #0
   181b8:	33a03001 	movcc	r3, #1
   181bc:	e0133920 	ands	r3, r3, r0, lsr #18
   181c0:	0a000017 	beq	18224 <bcm2835_spi_transfernb+0xe0>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   181c4:	e5d93000 	ldrb	r3, [r9]
    while((TXCnt < len)||(RXCnt < len))
    {
        /* TX fifo not full, so add some more bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))&&(TXCnt < len ))
        {
           bcm2835_peri_write_nb(fifo, tbuf[TXCnt]);
   181c8:	e4d82001 	ldrb	r2, [r8], #1
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   181cc:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   181d0:	05842004 	streq	r2, [r4, #4]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   181d4:	0afffff2 	beq	181a4 <bcm2835_spi_transfernb+0x60>
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   181d8:	e1a0100a 	mov	r1, sl
   181dc:	e59f00a0 	ldr	r0, [pc, #160]	; 18284 <bcm2835_spi_transfernb+0x140>
   181e0:	ebffe338 	bl	10ec8 <printf@plt>
   181e4:	eaffffee 	b	181a4 <bcm2835_spi_transfernb+0x60>
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   181e8:	e59f0098 	ldr	r0, [pc, #152]	; 18288 <bcm2835_spi_transfernb+0x144>
   181ec:	e1a01004 	mov	r1, r4
   181f0:	ebffe334 	bl	10ec8 <printf@plt>
   181f4:	e5d93000 	ldrb	r3, [r9]
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   181f8:	e3530000 	cmp	r3, #0
   181fc:	1afffff9 	bne	181e8 <bcm2835_spi_transfernb+0xa4>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18200:	e5943000 	ldr	r3, [r4]
           rbuf[RXCnt] = bcm2835_peri_read_nb(fifo);
           RXCnt++;
        }
    }
    /* Wait for DONE to be set */
    while (!(bcm2835_peri_read_nb(paddr) & BCM2835_SPI0_CS_DONE))
   18204:	e3130801 	tst	r3, #65536	; 0x10000
   18208:	0afffffc 	beq	18200 <bcm2835_spi_transfernb+0xbc>
	;

    /* Set TA = 0, and also set the barrier */
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
   1820c:	e1a00004 	mov	r0, r4
   18210:	e3a01000 	mov	r1, #0
   18214:	e3a02080 	mov	r2, #128	; 0x80
}
   18218:	e28dd00c 	add	sp, sp, #12
   1821c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Wait for DONE to be set */
    while (!(bcm2835_peri_read_nb(paddr) & BCM2835_SPI0_CS_DONE))
	;

    /* Set TA = 0, and also set the barrier */
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
   18220:	eafffe01 	b	17a2c <bcm2835_peri_set_bits>
   18224:	e59d3004 	ldr	r3, [sp, #4]
   18228:	e0838006 	add	r8, r3, r6
   1822c:	ea000003 	b	18240 <bcm2835_spi_transfernb+0xfc>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18230:	e5943004 	ldr	r3, [r4, #4]
   18234:	e6ef3073 	uxtb	r3, r3
        }
        /* Rx fifo not empty, so get the next received bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD))&&( RXCnt < len ))
        {
           rbuf[RXCnt] = bcm2835_peri_read_nb(fifo);
           RXCnt++;
   18238:	e2866001 	add	r6, r6, #1
           TXCnt++;
        }
        /* Rx fifo not empty, so get the next received bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD))&&( RXCnt < len ))
        {
           rbuf[RXCnt] = bcm2835_peri_read_nb(fifo);
   1823c:	e4c83001 	strb	r3, [r8], #1
        {
           bcm2835_peri_write_nb(fifo, tbuf[TXCnt]);
           TXCnt++;
        }
        /* Rx fifo not empty, so get the next received bytes */
        while(((bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD))&&( RXCnt < len ))
   18240:	e1a00004 	mov	r0, r4
   18244:	ebfffdc1 	bl	17950 <bcm2835_peri_read>
   18248:	e1560007 	cmp	r6, r7
   1824c:	23a03000 	movcs	r3, #0
   18250:	33a03001 	movcc	r3, #1
   18254:	e01338a0 	ands	r3, r3, r0, lsr #17
   18258:	0affffcc 	beq	18190 <bcm2835_spi_transfernb+0x4c>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   1825c:	e5d93000 	ldrb	r3, [r9]
   18260:	e3530000 	cmp	r3, #0
   18264:	0afffff1 	beq	18230 <bcm2835_spi_transfernb+0xec>
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18268:	e59f0018 	ldr	r0, [pc, #24]	; 18288 <bcm2835_spi_transfernb+0x144>
   1826c:	e1a0100a 	mov	r1, sl
   18270:	ebffe314 	bl	10ec8 <printf@plt>
   18274:	e3a03000 	mov	r3, #0
   18278:	eaffffee 	b	18238 <bcm2835_spi_transfernb+0xf4>
   1827c:	0002b960 	.word	0x0002b960
   18280:	0002d16c 	.word	0x0002d16c
   18284:	0001b02c 	.word	0x0001b02c
   18288:	0001afdc 	.word	0x0001afdc

0001828c <bcm2835_spi_writenb>:
}

/* Writes an number of bytes to SPI */
void bcm2835_spi_writenb(char* tbuf, uint32_t len)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   1828c:	e59f3120 	ldr	r3, [pc, #288]	; 183b4 <bcm2835_spi_writenb+0x128>
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
}

/* Writes an number of bytes to SPI */
void bcm2835_spi_writenb(char* tbuf, uint32_t len)
{
   18290:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18294:	e1a08001 	mov	r8, r1
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   18298:	e5934018 	ldr	r4, [r3, #24]
    // accesses a different peripheral?
    // Answer: an ISR is required to issue the required memory barriers.
    */

    /* Clear TX and RX fifos */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   1829c:	e3a01030 	mov	r1, #48	; 0x30
   182a0:	e1a02001 	mov	r2, r1
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
}

/* Writes an number of bytes to SPI */
void bcm2835_spi_writenb(char* tbuf, uint32_t len)
{
   182a4:	e1a07000 	mov	r7, r0
    // accesses a different peripheral?
    // Answer: an ISR is required to issue the required memory barriers.
    */

    /* Clear TX and RX fifos */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);
   182a8:	e1a00004 	mov	r0, r4
   182ac:	ebfffdde 	bl	17a2c <bcm2835_peri_set_bits>

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);
   182b0:	e3a01080 	mov	r1, #128	; 0x80
   182b4:	e1a00004 	mov	r0, r4
   182b8:	e1a02001 	mov	r2, r1
   182bc:	ebfffdda 	bl	17a2c <bcm2835_peri_set_bits>

    for (i = 0; i < len; i++)
   182c0:	e3580000 	cmp	r8, #0
   182c4:	e59f50ec 	ldr	r5, [pc, #236]	; 183b8 <bcm2835_spi_writenb+0x12c>

/* Writes an number of bytes to SPI */
void bcm2835_spi_writenb(char* tbuf, uint32_t len)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
    volatile uint32_t* fifo = bcm2835_spi0 + BCM2835_SPI0_FIFO/4;
   182c8:	e2846004 	add	r6, r4, #4
   182cc:	10878008 	addne	r8, r7, r8
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);

    for (i = 0; i < len; i++)
   182d0:	0a000019 	beq	1833c <bcm2835_spi_writenb+0xb0>
    {
	/* Maybe wait for TXD */
	while (!(bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))
   182d4:	e1a00004 	mov	r0, r4
   182d8:	ebfffd9c 	bl	17950 <bcm2835_peri_read>
   182dc:	e3100701 	tst	r0, #262144	; 0x40000
   182e0:	0afffffb 	beq	182d4 <bcm2835_spi_writenb+0x48>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   182e4:	e5d53000 	ldrb	r3, [r5]
	/* Maybe wait for TXD */
	while (!(bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_TXD))
	    ;
	
	/* Write to FIFO, no barrier */
	bcm2835_peri_write_nb(fifo, tbuf[i]);
   182e8:	e4d72001 	ldrb	r2, [r7], #1
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   182ec:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   182f0:	05842004 	streq	r2, [r4, #4]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   182f4:	1a000026 	bne	18394 <bcm2835_spi_writenb+0x108>
	
	/* Write to FIFO, no barrier */
	bcm2835_peri_write_nb(fifo, tbuf[i]);
	
	/* Read from FIFO to prevent stalling */
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
   182f8:	e1a00004 	mov	r0, r4
   182fc:	ebfffd93 	bl	17950 <bcm2835_peri_read>
   18300:	e3100802 	tst	r0, #131072	; 0x20000
   18304:	0a00000a 	beq	18334 <bcm2835_spi_writenb+0xa8>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18308:	e5d53000 	ldrb	r3, [r5]
   1830c:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18310:	05943004 	ldreq	r3, [r4, #4]
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18314:	0afffff7 	beq	182f8 <bcm2835_spi_writenb+0x6c>
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18318:	e1a01006 	mov	r1, r6
   1831c:	e59f0098 	ldr	r0, [pc, #152]	; 183bc <bcm2835_spi_writenb+0x130>
   18320:	ebffe2e8 	bl	10ec8 <printf@plt>
	
	/* Write to FIFO, no barrier */
	bcm2835_peri_write_nb(fifo, tbuf[i]);
	
	/* Read from FIFO to prevent stalling */
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
   18324:	e1a00004 	mov	r0, r4
   18328:	ebfffd88 	bl	17950 <bcm2835_peri_read>
   1832c:	e3100802 	tst	r0, #131072	; 0x20000
   18330:	1afffff4 	bne	18308 <bcm2835_spi_writenb+0x7c>
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_CLEAR, BCM2835_SPI0_CS_CLEAR);

    /* Set TA = 1 */
    bcm2835_peri_set_bits(paddr, BCM2835_SPI0_CS_TA, BCM2835_SPI0_CS_TA);

    for (i = 0; i < len; i++)
   18334:	e1570008 	cmp	r7, r8
   18338:	1affffe5 	bne	182d4 <bcm2835_spi_writenb+0x48>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   1833c:	e5d51000 	ldrb	r1, [r5]
   18340:	e3510000 	cmp	r1, #0
   18344:	1a00000e 	bne	18384 <bcm2835_spi_writenb+0xf8>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18348:	e5943000 	ldr	r3, [r4]
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
	    (void) bcm2835_peri_read_nb(fifo);
    }
    
    /* Wait for DONE to be set */
    while (!(bcm2835_peri_read_nb(paddr) & BCM2835_SPI0_CS_DONE)) {
   1834c:	e3130801 	tst	r3, #65536	; 0x10000
   18350:	1a000013 	bne	183a4 <bcm2835_spi_writenb+0x118>
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
   18354:	e1a00004 	mov	r0, r4
   18358:	ebfffd7c 	bl	17950 <bcm2835_peri_read>
   1835c:	e3100802 	tst	r0, #131072	; 0x20000
   18360:	0afffff5 	beq	1833c <bcm2835_spi_writenb+0xb0>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18364:	e5d53000 	ldrb	r3, [r5]
   18368:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   1836c:	05943004 	ldreq	r3, [r4, #4]
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18370:	0afffff7 	beq	18354 <bcm2835_spi_writenb+0xc8>
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18374:	e1a01006 	mov	r1, r6
   18378:	e59f003c 	ldr	r0, [pc, #60]	; 183bc <bcm2835_spi_writenb+0x130>
   1837c:	ebffe2d1 	bl	10ec8 <printf@plt>
   18380:	eafffff3 	b	18354 <bcm2835_spi_writenb+0xc8>
   18384:	e1a01004 	mov	r1, r4
   18388:	e59f002c 	ldr	r0, [pc, #44]	; 183bc <bcm2835_spi_writenb+0x130>
   1838c:	ebffe2cd 	bl	10ec8 <printf@plt>
   18390:	eaffffef 	b	18354 <bcm2835_spi_writenb+0xc8>
/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18394:	e1a01006 	mov	r1, r6
   18398:	e59f0020 	ldr	r0, [pc, #32]	; 183c0 <bcm2835_spi_writenb+0x134>
   1839c:	ebffe2c9 	bl	10ec8 <printf@plt>
   183a0:	eaffffd4 	b	182f8 <bcm2835_spi_writenb+0x6c>
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
		(void) bcm2835_peri_read_nb(fifo);
    };

    /* Set TA = 0, and also set the barrier */
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
   183a4:	e1a00004 	mov	r0, r4
   183a8:	e3a02080 	mov	r2, #128	; 0x80
}
   183ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	while (bcm2835_peri_read(paddr) & BCM2835_SPI0_CS_RXD)
		(void) bcm2835_peri_read_nb(fifo);
    };

    /* Set TA = 0, and also set the barrier */
    bcm2835_peri_set_bits(paddr, 0, BCM2835_SPI0_CS_TA);
   183b0:	eafffd9d 	b	17a2c <bcm2835_peri_set_bits>
   183b4:	0002b960 	.word	0x0002b960
   183b8:	0002d16c 	.word	0x0002d16c
   183bc:	0001afdc 	.word	0x0001afdc
   183c0:	0001b02c 	.word	0x0001b02c

000183c4 <bcm2835_spi_transfern>:

/* Writes (and reads) an number of bytes to SPI
// Read bytes are copied over onto the transmit buffer
*/
void bcm2835_spi_transfern(char* buf, uint32_t len)
{
   183c4:	e1a02001 	mov	r2, r1
    bcm2835_spi_transfernb(buf, buf, len);
   183c8:	e1a01000 	mov	r1, r0
   183cc:	eaffff5c 	b	18144 <bcm2835_spi_transfernb>

000183d0 <bcm2835_spi_chipSelect>:
}

void bcm2835_spi_chipSelect(uint8_t cs)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   183d0:	e59f300c 	ldr	r3, [pc, #12]	; 183e4 <bcm2835_spi_chipSelect+0x14>
{
    bcm2835_spi_transfernb(buf, buf, len);
}

void bcm2835_spi_chipSelect(uint8_t cs)
{
   183d4:	e1a01000 	mov	r1, r0
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
    /* Mask in the CS bits of CS */
    bcm2835_peri_set_bits(paddr, cs, BCM2835_SPI0_CS_CS);
   183d8:	e3a02003 	mov	r2, #3
   183dc:	e5930018 	ldr	r0, [r3, #24]
   183e0:	eafffd91 	b	17a2c <bcm2835_peri_set_bits>
   183e4:	0002b960 	.word	0x0002b960

000183e8 <bcm2835_spi_setChipSelectPolarity>:
}

void bcm2835_spi_setChipSelectPolarity(uint8_t cs, uint8_t active)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
    uint8_t shift = 21 + cs;
   183e8:	e2800015 	add	r0, r0, #21
    bcm2835_peri_set_bits(paddr, cs, BCM2835_SPI0_CS_CS);
}

void bcm2835_spi_setChipSelectPolarity(uint8_t cs, uint8_t active)
{
    volatile uint32_t* paddr = bcm2835_spi0 + BCM2835_SPI0_CS/4;
   183ec:	e59f3014 	ldr	r3, [pc, #20]	; 18408 <bcm2835_spi_setChipSelectPolarity+0x20>
    uint8_t shift = 21 + cs;
    /* Mask in the appropriate CSPOLn bit */
    bcm2835_peri_set_bits(paddr, active << shift, 1 << shift);
   183f0:	e6ef0070 	uxtb	r0, r0
   183f4:	e3a02001 	mov	r2, #1
   183f8:	e1a01011 	lsl	r1, r1, r0
   183fc:	e1a02012 	lsl	r2, r2, r0
   18400:	e5930018 	ldr	r0, [r3, #24]
   18404:	eafffd88 	b	17a2c <bcm2835_peri_set_bits>
   18408:	0002b960 	.word	0x0002b960

0001840c <bcm2835_i2c_begin>:

int bcm2835_i2c_begin(void)
{
    uint16_t cdiv;

    if (   bcm2835_bsc0 == MAP_FAILED
   1840c:	e59f3090 	ldr	r3, [pc, #144]	; 184a4 <bcm2835_i2c_begin+0x98>
   18410:	e593201c 	ldr	r2, [r3, #28]
   18414:	e3720001 	cmn	r2, #1
   18418:	0a00001b 	beq	1848c <bcm2835_i2c_begin+0x80>
    /* Mask in the appropriate CSPOLn bit */
    bcm2835_peri_set_bits(paddr, active << shift, 1 << shift);
}

int bcm2835_i2c_begin(void)
{
   1841c:	e92d4010 	push	{r4, lr}
    uint16_t cdiv;

    if (   bcm2835_bsc0 == MAP_FAILED
	|| bcm2835_bsc1 == MAP_FAILED)
   18420:	e5934020 	ldr	r4, [r3, #32]
   18424:	e3740001 	cmn	r4, #1
      return 0; /* bcm2835_init() failed, or not root */
   18428:	03a03000 	moveq	r3, #0
int bcm2835_i2c_begin(void)
{
    uint16_t cdiv;

    if (   bcm2835_bsc0 == MAP_FAILED
	|| bcm2835_bsc1 == MAP_FAILED)
   1842c:	0a000014 	beq	18484 <bcm2835_i2c_begin+0x78>
    bcm2835_gpio_fsel(RPI_GPIO_P1_03, BCM2835_GPIO_FSEL_ALT0); /* SDA */
    bcm2835_gpio_fsel(RPI_GPIO_P1_05, BCM2835_GPIO_FSEL_ALT0); /* SCL */
#else
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_DIV/4;
    /* Set the I2C/BSC1 pins to the Alt 0 function to enable I2C access on them */
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_03, BCM2835_GPIO_FSEL_ALT0); /* SDA */
   18430:	e3a00002 	mov	r0, #2
   18434:	e3a01004 	mov	r1, #4
   18438:	ebfffd86 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_ALT0); /* SCL */
   1843c:	e3a00003 	mov	r0, #3
   18440:	e3a01004 	mov	r1, #4
   18444:	ebfffd83 	bl	17a58 <bcm2835_gpio_fsel>
#endif    

    /* Read the clock divider register */
    cdiv = bcm2835_peri_read(paddr);
   18448:	e2840014 	add	r0, r4, #20
   1844c:	ebfffd3f 	bl	17950 <bcm2835_peri_read>
    /* Calculate time for transmitting one byte
    // 1000000 = micros seconds in a second
    // 9 = Clocks per byte : 8 bits + ACK
    */
    i2c_byte_wait_us = ((float)cdiv / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
   18450:	ed9f6a10 	vldr	s12, [pc, #64]	; 18498 <bcm2835_i2c_begin+0x8c>
   18454:	eddf7a10 	vldr	s15, [pc, #64]	; 1849c <bcm2835_i2c_begin+0x90>
   18458:	eddf6a10 	vldr	s13, [pc, #64]	; 184a0 <bcm2835_i2c_begin+0x94>
   1845c:	e59f2044 	ldr	r2, [pc, #68]	; 184a8 <bcm2835_i2c_begin+0x9c>

    return 1;
   18460:	e3a03001 	mov	r3, #1
    cdiv = bcm2835_peri_read(paddr);
    /* Calculate time for transmitting one byte
    // 1000000 = micros seconds in a second
    // 9 = Clocks per byte : 8 bits + ACK
    */
    i2c_byte_wait_us = ((float)cdiv / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
   18464:	e6ff0070 	uxth	r0, r0
   18468:	ee070a10 	vmov	s14, r0
   1846c:	eeb87a47 	vcvt.f32.u32	s14, s14
   18470:	ee877a06 	vdiv.f32	s14, s14, s12
   18474:	ee677a27 	vmul.f32	s15, s14, s15
   18478:	ee677aa6 	vmul.f32	s15, s15, s13
   1847c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   18480:	edc27a01 	vstr	s15, [r2, #4]

    return 1;
}
   18484:	e1a00003 	mov	r0, r3
   18488:	e8bd8010 	pop	{r4, pc}
{
    uint16_t cdiv;

    if (   bcm2835_bsc0 == MAP_FAILED
	|| bcm2835_bsc1 == MAP_FAILED)
      return 0; /* bcm2835_init() failed, or not root */
   1848c:	e3a03000 	mov	r3, #0
    // 9 = Clocks per byte : 8 bits + ACK
    */
    i2c_byte_wait_us = ((float)cdiv / BCM2835_CORE_CLK_HZ) * 1000000 * 9;

    return 1;
}
   18490:	e1a00003 	mov	r0, r3
   18494:	e12fff1e 	bx	lr
   18498:	4d6e6b28 	.word	0x4d6e6b28
   1849c:	49742400 	.word	0x49742400
   184a0:	41100000 	.word	0x41100000
   184a4:	0002b960 	.word	0x0002b960
   184a8:	0002d16c 	.word	0x0002d16c

000184ac <bcm2835_i2c_end>:

void bcm2835_i2c_end(void)
{
   184ac:	e92d4008 	push	{r3, lr}
    /* Set all the I2C/BSC0 pins back to input */
    bcm2835_gpio_fsel(RPI_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
    bcm2835_gpio_fsel(RPI_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
#else
    /* Set all the I2C/BSC1 pins back to input */
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
   184b0:	e3a00002 	mov	r0, #2
   184b4:	e3a01000 	mov	r1, #0
   184b8:	ebfffd66 	bl	17a58 <bcm2835_gpio_fsel>
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
   184bc:	e3a00003 	mov	r0, #3
   184c0:	e3a01000 	mov	r1, #0
#endif
}
   184c4:	e8bd4008 	pop	{r3, lr}
    bcm2835_gpio_fsel(RPI_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
    bcm2835_gpio_fsel(RPI_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
#else
    /* Set all the I2C/BSC1 pins back to input */
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_03, BCM2835_GPIO_FSEL_INPT); /* SDA */
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
   184c8:	eafffd62 	b	17a58 <bcm2835_gpio_fsel>

000184cc <bcm2835_i2c_setSlaveAddress>:
{
    /* Set I2C Device Address */
#ifdef I2C_V1
    volatile uint32_t* paddr = bcm2835_bsc0 + BCM2835_BSC_A/4;
#else	
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_A/4;
   184cc:	e59f300c 	ldr	r3, [pc, #12]	; 184e0 <bcm2835_i2c_setSlaveAddress+0x14>
    bcm2835_gpio_fsel(RPI_V2_GPIO_P1_05, BCM2835_GPIO_FSEL_INPT); /* SCL */
#endif
}

void bcm2835_i2c_setSlaveAddress(uint8_t addr)
{
   184d0:	e1a01000 	mov	r1, r0
    /* Set I2C Device Address */
#ifdef I2C_V1
    volatile uint32_t* paddr = bcm2835_bsc0 + BCM2835_BSC_A/4;
#else	
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_A/4;
   184d4:	e5930020 	ldr	r0, [r3, #32]
#endif
    bcm2835_peri_write(paddr, addr);
   184d8:	e280000c 	add	r0, r0, #12
   184dc:	eafffd39 	b	179c8 <bcm2835_peri_write>
   184e0:	0002b960 	.word	0x0002b960

000184e4 <bcm2835_i2c_setClockDivider>:
void bcm2835_i2c_setClockDivider(uint16_t divider)
{
#ifdef I2C_V1
    volatile uint32_t* paddr = bcm2835_bsc0 + BCM2835_BSC_DIV/4;
#else
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_DIV/4;
   184e4:	e59f3058 	ldr	r3, [pc, #88]	; 18544 <bcm2835_i2c_setClockDivider+0x60>
/* defaults to 0x5dc, should result in a 166.666 kHz I2C clock frequency.
// The divisor must be a power of 2. Odd numbers
// rounded down.
*/
void bcm2835_i2c_setClockDivider(uint16_t divider)
{
   184e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   184ec:	e24dd00c 	sub	sp, sp, #12
#ifdef I2C_V1
    volatile uint32_t* paddr = bcm2835_bsc0 + BCM2835_BSC_DIV/4;
#else
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_DIV/4;
#endif    
    bcm2835_peri_write(paddr, divider);
   184f0:	e1a01000 	mov	r1, r0
/* defaults to 0x5dc, should result in a 166.666 kHz I2C clock frequency.
// The divisor must be a power of 2. Odd numbers
// rounded down.
*/
void bcm2835_i2c_setClockDivider(uint16_t divider)
{
   184f4:	e58d0004 	str	r0, [sp, #4]
#ifdef I2C_V1
    volatile uint32_t* paddr = bcm2835_bsc0 + BCM2835_BSC_DIV/4;
#else
    volatile uint32_t* paddr = bcm2835_bsc1 + BCM2835_BSC_DIV/4;
   184f8:	e5930020 	ldr	r0, [r3, #32]
#endif    
    bcm2835_peri_write(paddr, divider);
   184fc:	e2800014 	add	r0, r0, #20
   18500:	ebfffd30 	bl	179c8 <bcm2835_peri_write>
    /* Calculate time for transmitting one byte
    // 1000000 = micros seconds in a second
    // 9 = Clocks per byte : 8 bits + ACK
    */
    i2c_byte_wait_us = ((float)divider / BCM2835_CORE_CLK_HZ) * 1000000 * 9;
   18504:	eddd7a01 	vldr	s15, [sp, #4]
   18508:	ed9f6a0a 	vldr	s12, [pc, #40]	; 18538 <bcm2835_i2c_setClockDivider+0x54>
   1850c:	eddf6a0a 	vldr	s13, [pc, #40]	; 1853c <bcm2835_i2c_setClockDivider+0x58>
   18510:	e59f3030 	ldr	r3, [pc, #48]	; 18548 <bcm2835_i2c_setClockDivider+0x64>
   18514:	eeb87a67 	vcvt.f32.u32	s14, s15
   18518:	eddf7a08 	vldr	s15, [pc, #32]	; 18540 <bcm2835_i2c_setClockDivider+0x5c>
   1851c:	ee877a06 	vdiv.f32	s14, s14, s12
   18520:	ee677a27 	vmul.f32	s15, s14, s15
   18524:	ee677aa6 	vmul.f32	s15, s15, s13
   18528:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1852c:	edc37a01 	vstr	s15, [r3, #4]
}
   18530:	e28dd00c 	add	sp, sp, #12
   18534:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18538:	4d6e6b28 	.word	0x4d6e6b28
   1853c:	41100000 	.word	0x41100000
   18540:	49742400 	.word	0x49742400
   18544:	0002b960 	.word	0x0002b960
   18548:	0002d16c 	.word	0x0002d16c

0001854c <bcm2835_i2c_set_baudrate>:

/* set I2C clock divider by means of a baudrate number */
void bcm2835_i2c_set_baudrate(uint32_t baudrate)
{
   1854c:	e92d4008 	push	{r3, lr}
   18550:	e1a01000 	mov	r1, r0
	uint32_t divider;
	/* use 0xFFFE mask to limit a max value and round down any odd number */
	divider = (BCM2835_CORE_CLK_HZ / baudrate) & 0xFFFE;
   18554:	e59f0014 	ldr	r0, [pc, #20]	; 18570 <bcm2835_i2c_set_baudrate+0x24>
   18558:	eb0003c2 	bl	19468 <__aeabi_uidiv>
	bcm2835_i2c_setClockDivider( (uint16_t)divider );
}
   1855c:	e8bd4008 	pop	{r3, lr}
void bcm2835_i2c_set_baudrate(uint32_t baudrate)
{
	uint32_t divider;
	/* use 0xFFFE mask to limit a max value and round down any odd number */
	divider = (BCM2835_CORE_CLK_HZ / baudrate) & 0xFFFE;
	bcm2835_i2c_setClockDivider( (uint16_t)divider );
   18560:	e3c00001 	bic	r0, r0, #1
   18564:	e1a00800 	lsl	r0, r0, #16
   18568:	e1a00820 	lsr	r0, r0, #16
   1856c:	eaffffdc 	b	184e4 <bcm2835_i2c_setClockDivider>
   18570:	0ee6b280 	.word	0x0ee6b280

00018574 <bcm2835_i2c_write>:
}

/* Writes an number of bytes to I2C */
uint8_t bcm2835_i2c_write(const char * buf, uint32_t len)
{
   18574:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18578:	e1a04001 	mov	r4, r1
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   1857c:	e59f3148 	ldr	r3, [pc, #328]	; 186cc <bcm2835_i2c_write+0x158>
    uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;

    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18580:	e3a01020 	mov	r1, #32
   18584:	e1a02001 	mov	r2, r1
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18588:	e5939020 	ldr	r9, [r3, #32]
	bcm2835_i2c_setClockDivider( (uint16_t)divider );
}

/* Writes an number of bytes to I2C */
uint8_t bcm2835_i2c_write(const char * buf, uint32_t len)
{
   1858c:	e1a0a000 	mov	sl, r0
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
   18590:	e2897004 	add	r7, r9, #4
    uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;

    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18594:	e1a00009 	mov	r0, r9
   18598:	ebfffd23 	bl	17a2c <bcm2835_peri_set_bits>
    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
   1859c:	e1a00007 	mov	r0, r7
   185a0:	e59f1128 	ldr	r1, [pc, #296]	; 186d0 <bcm2835_i2c_write+0x15c>
   185a4:	ebfffd07 	bl	179c8 <bcm2835_peri_write>
    /* Set Data Length */
    bcm2835_peri_write(dlen, len);
   185a8:	e2890008 	add	r0, r9, #8
   185ac:	e1a01004 	mov	r1, r4
   185b0:	ebfffd04 	bl	179c8 <bcm2835_peri_write>
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   185b4:	e3540000 	cmp	r4, #0
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
   185b8:	e2898010 	add	r8, r9, #16
    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
    /* Set Data Length */
    bcm2835_peri_write(dlen, len);
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   185bc:	0a000015 	beq	18618 <bcm2835_i2c_write+0xa4>
   185c0:	e59fb10c 	ldr	fp, [pc, #268]	; 186d4 <bcm2835_i2c_write+0x160>
   185c4:	e24a6001 	sub	r6, sl, #1
   185c8:	e3a05000 	mov	r5, #0
   185cc:	ea000008 	b	185f4 <bcm2835_i2c_write+0x80>
   185d0:	e2544001 	subs	r4, r4, #1
   185d4:	13a03001 	movne	r3, #1
   185d8:	03a03000 	moveq	r3, #0
    {
        bcm2835_peri_write_nb(fifo, buf[i]);
        i++;
   185dc:	e2855001 	add	r5, r5, #1
    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
    /* Set Data Length */
    bcm2835_peri_write(dlen, len);
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   185e0:	e355000f 	cmp	r5, #15
   185e4:	83a03000 	movhi	r3, #0
   185e8:	92033001 	andls	r3, r3, #1
   185ec:	e3530000 	cmp	r3, #0
   185f0:	0a000009 	beq	1861c <bcm2835_i2c_write+0xa8>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   185f4:	e5db3000 	ldrb	r3, [fp]
    /* Set Data Length */
    bcm2835_peri_write(dlen, len);
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
    {
        bcm2835_peri_write_nb(fifo, buf[i]);
   185f8:	e5f62001 	ldrb	r2, [r6, #1]!
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   185fc:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18600:	05892010 	streq	r2, [r9, #16]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18604:	0afffff1 	beq	185d0 <bcm2835_i2c_write+0x5c>
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18608:	e1a01008 	mov	r1, r8
   1860c:	e59f00c4 	ldr	r0, [pc, #196]	; 186d8 <bcm2835_i2c_write+0x164>
   18610:	ebffe22c 	bl	10ec8 <printf@plt>
   18614:	eaffffed 	b	185d0 <bcm2835_i2c_write+0x5c>
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc1 + BCM2835_BSC_C/4;
#endif    

    uint32_t remaining = len;
    uint32_t i = 0;
   18618:	e1a05004 	mov	r5, r4
        i++;
        remaining--;
    }
    
    /* Enable device and start transfer */
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
   1861c:	e1a00009 	mov	r0, r9
   18620:	e59f10b4 	ldr	r1, [pc, #180]	; 186dc <bcm2835_i2c_write+0x168>
   18624:	ebfffce7 	bl	179c8 <bcm2835_peri_write>
    
    /* Transfer is over when BCM2835_BSC_S_DONE */
    while(!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE ))
   18628:	e1a00007 	mov	r0, r7
   1862c:	ebfffcc7 	bl	17950 <bcm2835_peri_read>
   18630:	e3100002 	tst	r0, #2
   18634:	1a000010 	bne	1867c <bcm2835_i2c_write+0x108>
    {
        while ( remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_TXD ))
   18638:	e3540000 	cmp	r4, #0
   1863c:	0afffff9 	beq	18628 <bcm2835_i2c_write+0xb4>
   18640:	e08a6005 	add	r6, sl, r5
   18644:	e1a00007 	mov	r0, r7
   18648:	ebfffcc0 	bl	17950 <bcm2835_peri_read>
   1864c:	e3100010 	tst	r0, #16
    	{
	    /* Write to FIFO */
	    bcm2835_peri_write(fifo, buf[i]);
   18650:	e1a00008 	mov	r0, r8
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* Transfer is over when BCM2835_BSC_S_DONE */
    while(!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE ))
    {
        while ( remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_TXD ))
   18654:	0afffff3 	beq	18628 <bcm2835_i2c_write+0xb4>
    	{
	    /* Write to FIFO */
	    bcm2835_peri_write(fifo, buf[i]);
   18658:	e4d61001 	ldrb	r1, [r6], #1
   1865c:	ebfffcd9 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* Transfer is over when BCM2835_BSC_S_DONE */
    while(!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE ))
    {
        while ( remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_TXD ))
   18660:	e2544001 	subs	r4, r4, #1
    	{
	    /* Write to FIFO */
	    bcm2835_peri_write(fifo, buf[i]);
	    i++;
   18664:	e2855001 	add	r5, r5, #1
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* Transfer is over when BCM2835_BSC_S_DONE */
    while(!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE ))
    {
        while ( remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_TXD ))
   18668:	1afffff5 	bne	18644 <bcm2835_i2c_write+0xd0>
    
    /* Enable device and start transfer */
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* Transfer is over when BCM2835_BSC_S_DONE */
    while(!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE ))
   1866c:	e1a00007 	mov	r0, r7
   18670:	ebfffcb6 	bl	17950 <bcm2835_peri_read>
   18674:	e3100002 	tst	r0, #2
   18678:	0affffee 	beq	18638 <bcm2835_i2c_write+0xc4>
	    remaining--;
    	}
    }

    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   1867c:	e1a00007 	mov	r0, r7
   18680:	ebfffcb2 	bl	17950 <bcm2835_peri_read>
   18684:	e3100c01 	tst	r0, #256	; 0x100
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
   18688:	13a04001 	movne	r4, #1
	    remaining--;
    	}
    }

    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   1868c:	0a000005 	beq	186a8 <bcm2835_i2c_write+0x134>
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
    }

    bcm2835_peri_set_bits(control, BCM2835_BSC_S_DONE , BCM2835_BSC_S_DONE);
   18690:	e3a01002 	mov	r1, #2
   18694:	e1a00009 	mov	r0, r9
   18698:	e1a02001 	mov	r2, r1
   1869c:	ebfffce2 	bl	17a2c <bcm2835_peri_set_bits>

    return reason;
}
   186a0:	e1a00004 	mov	r0, r4
   186a4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   186a8:	e1a00007 	mov	r0, r7
   186ac:	ebfffca7 	bl	17950 <bcm2835_peri_read>
   186b0:	e3100c02 	tst	r0, #512	; 0x200
    {
	reason = BCM2835_I2C_REASON_ERROR_CLKT;
   186b4:	13a04002 	movne	r4, #2
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   186b8:	1afffff4 	bne	18690 <bcm2835_i2c_write+0x11c>
    }

    /* Not all data is sent */
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
   186bc:	e3540000 	cmp	r4, #0
   186c0:	13a04004 	movne	r4, #4
   186c4:	03a04000 	moveq	r4, #0
   186c8:	eafffff0 	b	18690 <bcm2835_i2c_write+0x11c>
   186cc:	0002b960 	.word	0x0002b960
   186d0:	00000302 	.word	0x00000302
   186d4:	0002d16c 	.word	0x0002d16c
   186d8:	0001b02c 	.word	0x0001b02c
   186dc:	00008080 	.word	0x00008080

000186e0 <bcm2835_i2c_read>:
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   186e0:	e59f31c4 	ldr	r3, [pc, #452]	; 188ac <bcm2835_i2c_read+0x1cc>
    return reason;
}

/* Read an number of bytes from I2C */
uint8_t bcm2835_i2c_read(char* buf, uint32_t len)
{
   186e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   186e8:	e1a05001 	mov	r5, r1
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   186ec:	e5934020 	ldr	r4, [r3, #32]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   186f0:	e59f81b8 	ldr	r8, [pc, #440]	; 188b0 <bcm2835_i2c_read+0x1d0>
    uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;

    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   186f4:	e3a01020 	mov	r1, #32
    return reason;
}

/* Read an number of bytes from I2C */
uint8_t bcm2835_i2c_read(char* buf, uint32_t len)
{
   186f8:	e1a07000 	mov	r7, r0
    uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;

    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   186fc:	e1a02001 	mov	r2, r1
   18700:	e1a00004 	mov	r0, r4
   18704:	ebfffcc8 	bl	17a2c <bcm2835_peri_set_bits>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18708:	e5d83000 	ldrb	r3, [r8]
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
   1870c:	e2849004 	add	r9, r4, #4
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18710:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18714:	059f3198 	ldreq	r3, [pc, #408]	; 188b4 <bcm2835_i2c_read+0x1d4>
   18718:	05843004 	streq	r3, [r4, #4]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   1871c:	1a00004e 	bne	1885c <bcm2835_i2c_read+0x17c>
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18720:	e5845008 	str	r5, [r4, #8]
   18724:	e59f218c 	ldr	r2, [pc, #396]	; 188b8 <bcm2835_i2c_read+0x1d8>
   18728:	e3a03000 	mov	r3, #0
   1872c:	e5842000 	str	r2, [r4]
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18730:	e59fa178 	ldr	sl, [pc, #376]	; 188b0 <bcm2835_i2c_read+0x1d0>
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18734:	e3a06000 	mov	r6, #0
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18738:	e3530000 	cmp	r3, #0
   1873c:	1a00000e 	bne	1877c <bcm2835_i2c_read+0x9c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18740:	e5943004 	ldr	r3, [r4, #4]
    bcm2835_peri_write_nb(dlen, len);
    /* Start read */
    bcm2835_peri_write_nb(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST | BCM2835_BSC_C_READ);
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
   18744:	e3130002 	tst	r3, #2
   18748:	1a000016 	bne	187a8 <bcm2835_i2c_read+0xc8>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   1874c:	e5943004 	ldr	r3, [r4, #4]
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD)
   18750:	e3130020 	tst	r3, #32
   18754:	0afffff9 	beq	18740 <bcm2835_i2c_read+0x60>
   18758:	e0873006 	add	r3, r7, r6
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   1875c:	e5942010 	ldr	r2, [r4, #16]
        /* we must empty the FIFO as it is populated and not use any delay */
        while (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD)
    	{
	    /* Read from FIFO, no barrier */
	    buf[i] = bcm2835_peri_read_nb(fifo);
	    i++;
   18760:	e2866001 	add	r6, r6, #1
   18764:	e4c32001 	strb	r2, [r3], #1
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18768:	e5942004 	ldr	r2, [r4, #4]
        while (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD)
    	{
	    /* Read from FIFO, no barrier */
	    buf[i] = bcm2835_peri_read_nb(fifo);
	    i++;
	    remaining--;
   1876c:	e2455001 	sub	r5, r5, #1
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD)
   18770:	e3120020 	tst	r2, #32
   18774:	1afffff8 	bne	1875c <bcm2835_i2c_read+0x7c>
   18778:	eafffff0 	b	18740 <bcm2835_i2c_read+0x60>
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   1877c:	e1a01009 	mov	r1, r9
   18780:	e59f0134 	ldr	r0, [pc, #308]	; 188bc <bcm2835_i2c_read+0x1dc>
   18784:	ebffe1cf 	bl	10ec8 <printf@plt>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18788:	e5d83000 	ldrb	r3, [r8]
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   1878c:	e59f0128 	ldr	r0, [pc, #296]	; 188bc <bcm2835_i2c_read+0x1dc>
   18790:	e1a01009 	mov	r1, r9
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18794:	e3530000 	cmp	r3, #0
   18798:	0affffeb 	beq	1874c <bcm2835_i2c_read+0x6c>
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   1879c:	ebffe1c9 	bl	10ec8 <printf@plt>
   187a0:	e5da3000 	ldrb	r3, [sl]
   187a4:	eaffffe3 	b	18738 <bcm2835_i2c_read+0x58>
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD))
   187a8:	e3550000 	cmp	r5, #0
   187ac:	0a000011 	beq	187f8 <bcm2835_i2c_read+0x118>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   187b0:	e5943004 	ldr	r3, [r4, #4]
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD))
   187b4:	e3130020 	tst	r3, #32
   187b8:	0a000013 	beq	1880c <bcm2835_i2c_read+0x12c>
   187bc:	e0876006 	add	r6, r7, r6
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   187c0:	e5943010 	ldr	r3, [r4, #16]
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD))
   187c4:	e2555001 	subs	r5, r5, #1
   187c8:	e4c63001 	strb	r3, [r6], #1
   187cc:	0a000009 	beq	187f8 <bcm2835_i2c_read+0x118>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   187d0:	e5d83000 	ldrb	r3, [r8]
   187d4:	e3530000 	cmp	r3, #0
   187d8:	1a000008 	bne	18800 <bcm2835_i2c_read+0x120>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   187dc:	e5943004 	ldr	r3, [r4, #4]
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD))
   187e0:	e3130020 	tst	r3, #32
   187e4:	0a000008 	beq	1880c <bcm2835_i2c_read+0x12c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   187e8:	e5943010 	ldr	r3, [r4, #16]
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read_nb(status) & BCM2835_BSC_S_RXD))
   187ec:	e2555001 	subs	r5, r5, #1
   187f0:	e4c63001 	strb	r3, [r6], #1
   187f4:	1afffff5 	bne	187d0 <bcm2835_i2c_read+0xf0>
   187f8:	e3a05000 	mov	r5, #0
   187fc:	ea000002 	b	1880c <bcm2835_i2c_read+0x12c>
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18800:	e59f00b4 	ldr	r0, [pc, #180]	; 188bc <bcm2835_i2c_read+0x1dc>
   18804:	e1a01009 	mov	r1, r9
   18808:	ebffe1ae 	bl	10ec8 <printf@plt>
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   1880c:	e1a00009 	mov	r0, r9
   18810:	ebfffc4e 	bl	17950 <bcm2835_peri_read>
   18814:	e3100c01 	tst	r0, #256	; 0x100
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
   18818:	13a05001 	movne	r5, #1
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   1881c:	0a000005 	beq	18838 <bcm2835_i2c_read+0x158>
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
    }

    bcm2835_peri_set_bits(control, BCM2835_BSC_S_DONE , BCM2835_BSC_S_DONE);
   18820:	e3a01002 	mov	r1, #2
   18824:	e1a00004 	mov	r0, r4
   18828:	e1a02001 	mov	r2, r1
   1882c:	ebfffc7e 	bl	17a2c <bcm2835_peri_set_bits>

    return reason;
}
   18830:	e1a00005 	mov	r0, r5
   18834:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18838:	e1a00009 	mov	r0, r9
   1883c:	ebfffc43 	bl	17950 <bcm2835_peri_read>
   18840:	e3100c02 	tst	r0, #512	; 0x200
    {
	reason = BCM2835_I2C_REASON_ERROR_CLKT;
   18844:	13a05002 	movne	r5, #2
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18848:	1afffff4 	bne	18820 <bcm2835_i2c_read+0x140>
    }

    /* Not all data is received */
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
   1884c:	e3550000 	cmp	r5, #0
   18850:	13a05004 	movne	r5, #4
   18854:	03a05000 	moveq	r5, #0
   18858:	eafffff0 	b	18820 <bcm2835_i2c_read+0x140>
/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   1885c:	e59f005c 	ldr	r0, [pc, #92]	; 188c0 <bcm2835_i2c_read+0x1e0>
   18860:	e1a01009 	mov	r1, r9
   18864:	e59f2048 	ldr	r2, [pc, #72]	; 188b4 <bcm2835_i2c_read+0x1d4>
   18868:	ebffe196 	bl	10ec8 <printf@plt>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   1886c:	e5d83000 	ldrb	r3, [r8]
   18870:	e3530000 	cmp	r3, #0
   18874:	0affffa9 	beq	18720 <bcm2835_i2c_read+0x40>
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18878:	e59f0040 	ldr	r0, [pc, #64]	; 188c0 <bcm2835_i2c_read+0x1e0>
   1887c:	e2841008 	add	r1, r4, #8
   18880:	e1a02005 	mov	r2, r5
   18884:	ebffe18f 	bl	10ec8 <printf@plt>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18888:	e5d83000 	ldrb	r3, [r8]
   1888c:	e3530000 	cmp	r3, #0
   18890:	0affffa3 	beq	18724 <bcm2835_i2c_read+0x44>
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18894:	e59f0024 	ldr	r0, [pc, #36]	; 188c0 <bcm2835_i2c_read+0x1e0>
   18898:	e1a01004 	mov	r1, r4
   1889c:	e59f2014 	ldr	r2, [pc, #20]	; 188b8 <bcm2835_i2c_read+0x1d8>
   188a0:	ebffe188 	bl	10ec8 <printf@plt>
   188a4:	e5d83000 	ldrb	r3, [r8]
   188a8:	eaffffa0 	b	18730 <bcm2835_i2c_read+0x50>
   188ac:	0002b960 	.word	0x0002b960
   188b0:	0002d16c 	.word	0x0002d16c
   188b4:	00000302 	.word	0x00000302
   188b8:	00008081 	.word	0x00008081
   188bc:	0001afdc 	.word	0x0001afdc
   188c0:	0001b02c 	.word	0x0001b02c

000188c4 <bcm2835_st_read>:
    return reason;
}

/* Read the System Timer Counter (64-bits) */
uint64_t bcm2835_st_read(void)
{
   188c4:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
    volatile uint32_t* paddr;
    uint32_t hi, lo;
    uint64_t st;

    if (bcm2835_st==MAP_FAILED)
   188c8:	e59f4090 	ldr	r4, [pc, #144]	; 18960 <bcm2835_st_read+0x9c>
   188cc:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   188d0:	e3700001 	cmn	r0, #1
   188d4:	0a00001e 	beq	18954 <bcm2835_st_read+0x90>
	return 0;

    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    hi = bcm2835_peri_read(paddr);
   188d8:	e2800008 	add	r0, r0, #8
   188dc:	ebfffc1b 	bl	17950 <bcm2835_peri_read>
    
    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    st = bcm2835_peri_read(paddr);
    
    /* Test for overflow */
    if (st == hi)
   188e0:	e3a09000 	mov	r9, #0

    if (bcm2835_st==MAP_FAILED)
	return 0;

    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    hi = bcm2835_peri_read(paddr);
   188e4:	e1a05000 	mov	r5, r0

    paddr = bcm2835_st + BCM2835_ST_CLO/4;
   188e8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    
    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    st = bcm2835_peri_read(paddr);
    
    /* Test for overflow */
    if (st == hi)
   188ec:	e1a08005 	mov	r8, r5

    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    hi = bcm2835_peri_read(paddr);

    paddr = bcm2835_st + BCM2835_ST_CLO/4;
    lo = bcm2835_peri_read(paddr);
   188f0:	e2800004 	add	r0, r0, #4
   188f4:	ebfffc15 	bl	17950 <bcm2835_peri_read>
   188f8:	e1a06000 	mov	r6, r0
    
    paddr = bcm2835_st + BCM2835_ST_CHI/4;
   188fc:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    st = bcm2835_peri_read(paddr);
   18900:	e2800008 	add	r0, r0, #8
   18904:	ebfffc11 	bl	17950 <bcm2835_peri_read>
   18908:	e3a01000 	mov	r1, #0
    
    /* Test for overflow */
    if (st == hi)
   1890c:	e1590001 	cmp	r9, r1

    paddr = bcm2835_st + BCM2835_ST_CLO/4;
    lo = bcm2835_peri_read(paddr);
    
    paddr = bcm2835_st + BCM2835_ST_CHI/4;
    st = bcm2835_peri_read(paddr);
   18910:	e1a03000 	mov	r3, r0
    
    /* Test for overflow */
    if (st == hi)
   18914:	01550003 	cmpeq	r5, r3
   18918:	0a000009 	beq	18944 <bcm2835_st_read+0x80>
        st += lo;
    }
    else
    {
        st <<= 32;
        paddr = bcm2835_st + BCM2835_ST_CLO/4;
   1891c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
        st <<= 32;
        st += lo;
    }
    else
    {
        st <<= 32;
   18920:	e1a05003 	mov	r5, r3
        paddr = bcm2835_st + BCM2835_ST_CLO/4;
        st += bcm2835_peri_read(paddr);
   18924:	e2800004 	add	r0, r0, #4
   18928:	ebfffc08 	bl	17950 <bcm2835_peri_read>
        st <<= 32;
        st += lo;
    }
    else
    {
        st <<= 32;
   1892c:	e3a04000 	mov	r4, #0
        paddr = bcm2835_st + BCM2835_ST_CLO/4;
        st += bcm2835_peri_read(paddr);
   18930:	e0942000 	adds	r2, r4, r0
   18934:	e2a53000 	adc	r3, r5, #0
   18938:	e1a00002 	mov	r0, r2
   1893c:	e1a01003 	mov	r1, r3
   18940:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    st = bcm2835_peri_read(paddr);
    
    /* Test for overflow */
    if (st == hi)
    {
        st <<= 32;
   18944:	e3a02000 	mov	r2, #0
        st += lo;
   18948:	e0920006 	adds	r0, r2, r6
   1894c:	e2a51000 	adc	r1, r5, #0
   18950:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    volatile uint32_t* paddr;
    uint32_t hi, lo;
    uint64_t st;

    if (bcm2835_st==MAP_FAILED)
	return 0;
   18954:	e3a00000 	mov	r0, #0
   18958:	e3a01000 	mov	r1, #0
        st <<= 32;
        paddr = bcm2835_st + BCM2835_ST_CLO/4;
        st += bcm2835_peri_read(paddr);
    }
    return st;
}
   1895c:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
   18960:	0002b960 	.word	0x0002b960

00018964 <bcm2835_delayMicroseconds>:
void bcm2835_delayMicroseconds(uint64_t micros)
{
    struct timespec t1;
    uint64_t        start;
	
    if (debug)
   18964:	e59f30c4 	ldr	r3, [pc, #196]	; 18a30 <bcm2835_delayMicroseconds+0xcc>
    nanosleep(&sleeper, NULL);
}

/* microseconds */
void bcm2835_delayMicroseconds(uint64_t micros)
{
   18968:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
   1896c:	e1a04000 	mov	r4, r0
    struct timespec t1;
    uint64_t        start;
	
    if (debug)
   18970:	e5d36000 	ldrb	r6, [r3]
    nanosleep(&sleeper, NULL);
}

/* microseconds */
void bcm2835_delayMicroseconds(uint64_t micros)
{
   18974:	e24dd008 	sub	sp, sp, #8
   18978:	e1a05001 	mov	r5, r1
    struct timespec t1;
    uint64_t        start;
	
    if (debug)
   1897c:	e3560000 	cmp	r6, #0
   18980:	0a000005 	beq	1899c <bcm2835_delayMicroseconds+0x38>
    {
	/* Cant access sytem timers in debug mode */
	printf("bcm2835_delayMicroseconds %lld\n", micros);
   18984:	e1a02000 	mov	r2, r0
   18988:	e1a03001 	mov	r3, r1
   1898c:	e59f00a0 	ldr	r0, [pc, #160]	; 18a34 <bcm2835_delayMicroseconds+0xd0>
   18990:	ebffe14c 	bl	10ec8 <printf@plt>
	t1.tv_nsec = 1000 * (long)(micros - 200);
	nanosleep(&t1, NULL);
    }    
  
    bcm2835_st_delay(start, micros);
}
   18994:	e28dd008 	add	sp, sp, #8
   18998:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    }

    /* Calling nanosleep() takes at least 100-200 us, so use it for
    // long waits and use a busy wait on the System Timer for the rest.
    */
    start =  bcm2835_st_read();
   1899c:	ebffffc8 	bl	188c4 <bcm2835_st_read>
   189a0:	e1a08000 	mov	r8, r0
   189a4:	e1a09001 	mov	r9, r1
   
    /* Not allowed to access timer registers (result is not as precise)*/
    if (start==0)
   189a8:	e1983009 	orrs	r3, r8, r9
   189ac:	0a00000c 	beq	189e4 <bcm2835_delayMicroseconds+0x80>
	t1.tv_nsec = 1000 * (long)(micros);
	nanosleep(&t1, NULL);
	return;
    }

    if (micros > 450)
   189b0:	e59f2080 	ldr	r2, [pc, #128]	; 18a38 <bcm2835_delayMicroseconds+0xd4>
   189b4:	e3a03000 	mov	r3, #0
   189b8:	e1550003 	cmp	r5, r3
   189bc:	01540002 	cmpeq	r4, r2
   189c0:	8a000010 	bhi	18a08 <bcm2835_delayMicroseconds+0xa4>
}

/* Delays for the specified number of microseconds with offset */
void bcm2835_st_delay(uint64_t offset_micros, uint64_t micros)
{
    uint64_t compare = offset_micros + micros;
   189c4:	e0944008 	adds	r4, r4, r8
   189c8:	e0a55009 	adc	r5, r5, r9

    while(bcm2835_st_read() < compare)
   189cc:	ebffffbc 	bl	188c4 <bcm2835_st_read>
   189d0:	e1550001 	cmp	r5, r1
   189d4:	01540000 	cmpeq	r4, r0
   189d8:	8afffffb 	bhi	189cc <bcm2835_delayMicroseconds+0x68>
	t1.tv_nsec = 1000 * (long)(micros - 200);
	nanosleep(&t1, NULL);
    }    
  
    bcm2835_st_delay(start, micros);
}
   189dc:	e28dd008 	add	sp, sp, #8
   189e0:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
   
    /* Not allowed to access timer registers (result is not as precise)*/
    if (start==0)
    {
	t1.tv_sec = 0;
	t1.tv_nsec = 1000 * (long)(micros);
   189e4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
	nanosleep(&t1, NULL);
   189e8:	e1a01006 	mov	r1, r6
   
    /* Not allowed to access timer registers (result is not as precise)*/
    if (start==0)
    {
	t1.tv_sec = 0;
	t1.tv_nsec = 1000 * (long)(micros);
   189ec:	e0040492 	mul	r4, r2, r4
	nanosleep(&t1, NULL);
   189f0:	e1a0000d 	mov	r0, sp
    start =  bcm2835_st_read();
   
    /* Not allowed to access timer registers (result is not as precise)*/
    if (start==0)
    {
	t1.tv_sec = 0;
   189f4:	e58d6000 	str	r6, [sp]
	t1.tv_nsec = 1000 * (long)(micros);
   189f8:	e58d4004 	str	r4, [sp, #4]
	nanosleep(&t1, NULL);
   189fc:	ebffe143 	bl	10f10 <nanosleep@plt>
	t1.tv_nsec = 1000 * (long)(micros - 200);
	nanosleep(&t1, NULL);
    }    
  
    bcm2835_st_delay(start, micros);
}
   18a00:	e28dd008 	add	sp, sp, #8
   18a04:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    }

    if (micros > 450)
    {
	t1.tv_sec = 0;
	t1.tv_nsec = 1000 * (long)(micros - 200);
   18a08:	e3a03ffa 	mov	r3, #1000	; 0x3e8
	nanosleep(&t1, NULL);
   18a0c:	e1a01006 	mov	r1, r6
    }

    if (micros > 450)
    {
	t1.tv_sec = 0;
	t1.tv_nsec = 1000 * (long)(micros - 200);
   18a10:	e0030493 	mul	r3, r3, r4
	nanosleep(&t1, NULL);
   18a14:	e1a0000d 	mov	r0, sp
    }

    if (micros > 450)
    {
	t1.tv_sec = 0;
	t1.tv_nsec = 1000 * (long)(micros - 200);
   18a18:	e2433bc3 	sub	r3, r3, #199680	; 0x30c00
   18a1c:	e2433d05 	sub	r3, r3, #320	; 0x140
	return;
    }

    if (micros > 450)
    {
	t1.tv_sec = 0;
   18a20:	e58d6000 	str	r6, [sp]
	t1.tv_nsec = 1000 * (long)(micros - 200);
   18a24:	e58d3004 	str	r3, [sp, #4]
	nanosleep(&t1, NULL);
   18a28:	ebffe138 	bl	10f10 <nanosleep@plt>
   18a2c:	eaffffe4 	b	189c4 <bcm2835_delayMicroseconds+0x60>
   18a30:	0002d16c 	.word	0x0002d16c
   18a34:	0001b05c 	.word	0x0001b05c
   18a38:	000001c2 	.word	0x000001c2

00018a3c <bcm2835_gpio_set_pud>:
// 6. Write to GPPUDCLK0/1 to remove the clock
//
// RPi has P1-03 and P1-05 with 1k8 pullup resistor
*/
void bcm2835_gpio_set_pud(uint8_t pin, uint8_t pud)
{
   18a3c:	e92d4038 	push	{r3, r4, r5, lr}
   18a40:	e1a04000 	mov	r4, r0
}

/* Set pullup/down */
void bcm2835_gpio_pud(uint8_t pud)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUD/4;
   18a44:	e59f504c 	ldr	r5, [pc, #76]	; 18a98 <bcm2835_gpio_set_pud+0x5c>
   18a48:	e5950008 	ldr	r0, [r5, #8]
    bcm2835_peri_write(paddr, pud);
   18a4c:	e2800094 	add	r0, r0, #148	; 0x94
   18a50:	ebfffbdc 	bl	179c8 <bcm2835_peri_write>
// RPi has P1-03 and P1-05 with 1k8 pullup resistor
*/
void bcm2835_gpio_set_pud(uint8_t pin, uint8_t pud)
{
    bcm2835_gpio_pud(pud);
    delayMicroseconds(10);
   18a54:	e3a0000a 	mov	r0, #10
   18a58:	e3a01000 	mov	r1, #0
   18a5c:	ebffffc0 	bl	18964 <bcm2835_delayMicroseconds>
    bcm2835_gpio_pudclk(pin, 1);
   18a60:	e1a00004 	mov	r0, r4
   18a64:	e3a01001 	mov	r1, #1
   18a68:	ebfffcee 	bl	17e28 <bcm2835_gpio_pudclk>
    delayMicroseconds(10);
   18a6c:	e3a0000a 	mov	r0, #10
   18a70:	e3a01000 	mov	r1, #0
   18a74:	ebffffba 	bl	18964 <bcm2835_delayMicroseconds>
}

/* Set pullup/down */
void bcm2835_gpio_pud(uint8_t pud)
{
    volatile uint32_t* paddr = bcm2835_gpio + BCM2835_GPPUD/4;
   18a78:	e5950008 	ldr	r0, [r5, #8]
    bcm2835_peri_write(paddr, pud);
   18a7c:	e3a01000 	mov	r1, #0
   18a80:	e2800094 	add	r0, r0, #148	; 0x94
   18a84:	ebfffbcf 	bl	179c8 <bcm2835_peri_write>
    bcm2835_gpio_pud(pud);
    delayMicroseconds(10);
    bcm2835_gpio_pudclk(pin, 1);
    delayMicroseconds(10);
    bcm2835_gpio_pud(BCM2835_GPIO_PUD_OFF);
    bcm2835_gpio_pudclk(pin, 0);
   18a88:	e1a00004 	mov	r0, r4
   18a8c:	e3a01000 	mov	r1, #0
}
   18a90:	e8bd4038 	pop	{r3, r4, r5, lr}
    bcm2835_gpio_pud(pud);
    delayMicroseconds(10);
    bcm2835_gpio_pudclk(pin, 1);
    delayMicroseconds(10);
    bcm2835_gpio_pud(BCM2835_GPIO_PUD_OFF);
    bcm2835_gpio_pudclk(pin, 0);
   18a94:	eafffce3 	b	17e28 <bcm2835_gpio_pudclk>
   18a98:	0002b960 	.word	0x0002b960

00018a9c <bcm2835_i2c_read_register_rs>:
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18a9c:	e59f319c 	ldr	r3, [pc, #412]	; 18c40 <bcm2835_i2c_read_register_rs+0x1a4>

/* Read an number of bytes from I2C sending a repeated start after writing
// the required register. Only works if your device supports this mode
*/
uint8_t bcm2835_i2c_read_register_rs(char* regaddr, char* buf, uint32_t len)
{   
   18aa0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18aa4:	e1a0a001 	mov	sl, r1
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18aa8:	e5939020 	ldr	r9, [r3, #32]
	uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18aac:	e3a01020 	mov	r1, #32

/* Read an number of bytes from I2C sending a repeated start after writing
// the required register. Only works if your device supports this mode
*/
uint8_t bcm2835_i2c_read_register_rs(char* regaddr, char* buf, uint32_t len)
{   
   18ab0:	e1a06000 	mov	r6, r0
   18ab4:	e1a04002 	mov	r4, r2
	uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18ab8:	e1a00009 	mov	r0, r9
   18abc:	e1a02001 	mov	r2, r1
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
   18ac0:	e2897004 	add	r7, r9, #4
	uint32_t remaining = len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18ac4:	ebfffbd8 	bl	17a2c <bcm2835_peri_set_bits>
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18ac8:	e2895008 	add	r5, r9, #8
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
   18acc:	e1a00007 	mov	r0, r7
   18ad0:	e59f116c 	ldr	r1, [pc, #364]	; 18c44 <bcm2835_i2c_read_register_rs+0x1a8>
   18ad4:	ebfffbbb 	bl	179c8 <bcm2835_peri_write>
    /* Set Data Length */
    bcm2835_peri_write(dlen, 1);
   18ad8:	e1a00005 	mov	r0, r5
   18adc:	e3a01001 	mov	r1, #1
   18ae0:	ebfffbb8 	bl	179c8 <bcm2835_peri_write>
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
   18ae4:	e2898010 	add	r8, r9, #16
    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
    /* Set Data Length */
    bcm2835_peri_write(dlen, 1);
    /* Enable device and start transfer */
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN);
   18ae8:	e1a00009 	mov	r0, r9
   18aec:	e3a01902 	mov	r1, #32768	; 0x8000
   18af0:	ebfffbb4 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(fifo, regaddr[0]);
   18af4:	e1a00008 	mov	r0, r8
   18af8:	e5d61000 	ldrb	r1, [r6]
   18afc:	ebfffbb1 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
   18b00:	e1a00009 	mov	r0, r9
   18b04:	e59f113c 	ldr	r1, [pc, #316]	; 18c48 <bcm2835_i2c_read_register_rs+0x1ac>
   18b08:	ebfffbae 	bl	179c8 <bcm2835_peri_write>
    
    /* poll for transfer has started */
    while ( !( bcm2835_peri_read(status) & BCM2835_BSC_S_TA ) )
   18b0c:	ea000002 	b	18b1c <bcm2835_i2c_read_register_rs+0x80>
    {
        /* Linux may cause us to miss entire transfer stage */
        if(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE)
   18b10:	ebfffb8e 	bl	17950 <bcm2835_peri_read>
   18b14:	e3100002 	tst	r0, #2
   18b18:	1a000004 	bne	18b30 <bcm2835_i2c_read_register_rs+0x94>
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN);
    bcm2835_peri_write(fifo, regaddr[0]);
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* poll for transfer has started */
    while ( !( bcm2835_peri_read(status) & BCM2835_BSC_S_TA ) )
   18b1c:	e1a00007 	mov	r0, r7
   18b20:	ebfffb8a 	bl	17950 <bcm2835_peri_read>
   18b24:	e3100001 	tst	r0, #1
    {
        /* Linux may cause us to miss entire transfer stage */
        if(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE)
   18b28:	e1a00007 	mov	r0, r7
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN);
    bcm2835_peri_write(fifo, regaddr[0]);
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
    
    /* poll for transfer has started */
    while ( !( bcm2835_peri_read(status) & BCM2835_BSC_S_TA ) )
   18b2c:	0afffff7 	beq	18b10 <bcm2835_i2c_read_register_rs+0x74>
        if(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE)
            break;
    }
    
    /* Send a repeated start with read bit set in address */
    bcm2835_peri_write(dlen, len);
   18b30:	e1a00005 	mov	r0, r5
   18b34:	e1a01004 	mov	r1, r4
   18b38:	ebfffba2 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST  | BCM2835_BSC_C_READ );
   18b3c:	e1a00009 	mov	r0, r9
   18b40:	e59f1104 	ldr	r1, [pc, #260]	; 18c4c <bcm2835_i2c_read_register_rs+0x1b0>
   18b44:	ebfffb9f 	bl	179c8 <bcm2835_peri_write>
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * 3);
   18b48:	e59f3100 	ldr	r3, [pc, #256]	; 18c50 <bcm2835_i2c_read_register_rs+0x1b4>
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc1 + BCM2835_BSC_C/4;
#endif    
	uint32_t remaining = len;
    uint32_t i = 0;
   18b4c:	e3a05000 	mov	r5, #0
    /* Send a repeated start with read bit set in address */
    bcm2835_peri_write(dlen, len);
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST  | BCM2835_BSC_C_READ );
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * 3);
   18b50:	e5930004 	ldr	r0, [r3, #4]
   18b54:	e0800080 	add	r0, r0, r0, lsl #1
   18b58:	e1a01fc0 	asr	r1, r0, #31
   18b5c:	ebffff80 	bl	18964 <bcm2835_delayMicroseconds>
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE))
   18b60:	e1a00007 	mov	r0, r7
   18b64:	ebfffb79 	bl	17950 <bcm2835_peri_read>
   18b68:	e3100002 	tst	r0, #2
   18b6c:	1a000010 	bne	18bb4 <bcm2835_i2c_read_register_rs+0x118>
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18b70:	e3540000 	cmp	r4, #0
   18b74:	0afffff9 	beq	18b60 <bcm2835_i2c_read_register_rs+0xc4>
   18b78:	e08a6005 	add	r6, sl, r5
   18b7c:	e1a00007 	mov	r0, r7
   18b80:	ebfffb72 	bl	17950 <bcm2835_peri_read>
   18b84:	e3100020 	tst	r0, #32
    	{
	    /* Read from FIFO */
	    buf[i] = bcm2835_peri_read(fifo);
   18b88:	e1a00008 	mov	r0, r8
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18b8c:	0afffff3 	beq	18b60 <bcm2835_i2c_read_register_rs+0xc4>
    	{
	    /* Read from FIFO */
	    buf[i] = bcm2835_peri_read(fifo);
   18b90:	ebfffb6e 	bl	17950 <bcm2835_peri_read>
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18b94:	e2544001 	subs	r4, r4, #1
    	{
	    /* Read from FIFO */
	    buf[i] = bcm2835_peri_read(fifo);
	    i++;
   18b98:	e2855001 	add	r5, r5, #1
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
    	{
	    /* Read from FIFO */
	    buf[i] = bcm2835_peri_read(fifo);
   18b9c:	e4c60001 	strb	r0, [r6], #1
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18ba0:	1afffff5 	bne	18b7c <bcm2835_i2c_read_register_rs+0xe0>
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * 3);
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read(status) & BCM2835_BSC_S_DONE))
   18ba4:	e1a00007 	mov	r0, r7
   18ba8:	ebfffb68 	bl	17950 <bcm2835_peri_read>
   18bac:	e3100002 	tst	r0, #2
   18bb0:	0affffee 	beq	18b70 <bcm2835_i2c_read_register_rs+0xd4>
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18bb4:	e3540000 	cmp	r4, #0
   18bb8:	108a5005 	addne	r5, sl, r5
   18bbc:	1a000004 	bne	18bd4 <bcm2835_i2c_read_register_rs+0x138>
   18bc0:	ea000013 	b	18c14 <bcm2835_i2c_read_register_rs+0x178>
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18bc4:	ebfffb61 	bl	17950 <bcm2835_peri_read>
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18bc8:	e2544001 	subs	r4, r4, #1
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18bcc:	e4c50001 	strb	r0, [r5], #1
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18bd0:	0a00000f 	beq	18c14 <bcm2835_i2c_read_register_rs+0x178>
   18bd4:	e1a00007 	mov	r0, r7
   18bd8:	ebfffb5c 	bl	17950 <bcm2835_peri_read>
   18bdc:	e3100020 	tst	r0, #32
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18be0:	e1a00008 	mov	r0, r8
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18be4:	1afffff6 	bne	18bc4 <bcm2835_i2c_read_register_rs+0x128>
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   18be8:	e1a00007 	mov	r0, r7
   18bec:	ebfffb57 	bl	17950 <bcm2835_peri_read>
   18bf0:	e3100c01 	tst	r0, #256	; 0x100
    {
		reason = BCM2835_I2C_REASON_ERROR_NACK;
   18bf4:	13a04001 	movne	r4, #1
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   18bf8:	0a000007 	beq	18c1c <bcm2835_i2c_read_register_rs+0x180>
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
    }

    bcm2835_peri_set_bits(control, BCM2835_BSC_S_DONE , BCM2835_BSC_S_DONE);
   18bfc:	e3a01002 	mov	r1, #2
   18c00:	e1a00009 	mov	r0, r9
   18c04:	e1a02001 	mov	r2, r1
   18c08:	ebfffb87 	bl	17a2c <bcm2835_peri_set_bits>

    return reason;
}
   18c0c:	e1a00004 	mov	r0, r4
   18c10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c14:	e3a04000 	mov	r4, #0
   18c18:	eafffff2 	b	18be8 <bcm2835_i2c_read_register_rs+0x14c>
    {
		reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18c1c:	e1a00007 	mov	r0, r7
   18c20:	ebfffb4a 	bl	17950 <bcm2835_peri_read>
   18c24:	e3100c02 	tst	r0, #512	; 0x200
    {
	reason = BCM2835_I2C_REASON_ERROR_CLKT;
   18c28:	13a04002 	movne	r4, #2
    {
		reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18c2c:	1afffff2 	bne	18bfc <bcm2835_i2c_read_register_rs+0x160>
    }

    /* Not all data is sent */
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
   18c30:	e3540000 	cmp	r4, #0
   18c34:	13a04004 	movne	r4, #4
   18c38:	03a04000 	moveq	r4, #0
   18c3c:	eaffffee 	b	18bfc <bcm2835_i2c_read_register_rs+0x160>
   18c40:	0002b960 	.word	0x0002b960
   18c44:	00000302 	.word	0x00000302
   18c48:	00008080 	.word	0x00008080
   18c4c:	00008081 	.word	0x00008081
   18c50:	0002d16c 	.word	0x0002d16c

00018c54 <bcm2835_i2c_write_read_rs>:
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18c54:	e59fc234 	ldr	ip, [pc, #564]	; 18e90 <bcm2835_i2c_write_read_rs+0x23c>

/* Sending an arbitrary number of bytes before issuing a repeated start 
// (with no prior stop) and reading a response. Some devices require this behavior.
*/
uint8_t bcm2835_i2c_write_read_rs(char* cmds, uint32_t cmds_len, char* buf, uint32_t buf_len)
{   
   18c58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c5c:	e1a0b001 	mov	fp, r1
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18c60:	e59c7020 	ldr	r7, [ip, #32]

/* Sending an arbitrary number of bytes before issuing a repeated start 
// (with no prior stop) and reading a response. Some devices require this behavior.
*/
uint8_t bcm2835_i2c_write_read_rs(char* cmds, uint32_t cmds_len, char* buf, uint32_t buf_len)
{   
   18c64:	e24dd00c 	sub	sp, sp, #12
    uint32_t remaining = cmds_len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18c68:	e3a01020 	mov	r1, #32

/* Sending an arbitrary number of bytes before issuing a repeated start 
// (with no prior stop) and reading a response. Some devices require this behavior.
*/
uint8_t bcm2835_i2c_write_read_rs(char* cmds, uint32_t cmds_len, char* buf, uint32_t buf_len)
{   
   18c6c:	e1a0a000 	mov	sl, r0
   18c70:	e1a09002 	mov	r9, r2
    uint32_t remaining = cmds_len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18c74:	e1a00007 	mov	r0, r7
   18c78:	e1a02001 	mov	r2, r1
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc1 + BCM2835_BSC_S/4;
   18c7c:	e2875004 	add	r5, r7, #4

/* Sending an arbitrary number of bytes before issuing a repeated start 
// (with no prior stop) and reading a response. Some devices require this behavior.
*/
uint8_t bcm2835_i2c_write_read_rs(char* cmds, uint32_t cmds_len, char* buf, uint32_t buf_len)
{   
   18c80:	e1a04003 	mov	r4, r3
    volatile uint32_t* dlen    = bcm2835_bsc0 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
   18c84:	e2873008 	add	r3, r7, #8
   18c88:	e1a06003 	mov	r6, r3
   18c8c:	e58d3004 	str	r3, [sp, #4]
    uint32_t remaining = cmds_len;
    uint32_t i = 0;
    uint8_t reason = BCM2835_I2C_REASON_OK;
    
    /* Clear FIFO */
    bcm2835_peri_set_bits(control, BCM2835_BSC_C_CLEAR_1 , BCM2835_BSC_C_CLEAR_1 );
   18c90:	ebfffb65 	bl	17a2c <bcm2835_peri_set_bits>

    /* Clear Status */
    bcm2835_peri_write(status, BCM2835_BSC_S_CLKT | BCM2835_BSC_S_ERR | BCM2835_BSC_S_DONE);
   18c94:	e1a00005 	mov	r0, r5
   18c98:	e59f11f4 	ldr	r1, [pc, #500]	; 18e94 <bcm2835_i2c_write_read_rs+0x240>
   18c9c:	ebfffb49 	bl	179c8 <bcm2835_peri_write>

    /* Set Data Length */
    bcm2835_peri_write(dlen, cmds_len);
   18ca0:	e1a00006 	mov	r0, r6
   18ca4:	e1a0100b 	mov	r1, fp
   18ca8:	ebfffb46 	bl	179c8 <bcm2835_peri_write>
 
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   18cac:	e35b0000 	cmp	fp, #0
   18cb0:	124a3001 	subne	r3, sl, #1
   18cb4:	e59f61dc 	ldr	r6, [pc, #476]	; 18e98 <bcm2835_i2c_write_read_rs+0x244>
    volatile uint32_t* fifo    = bcm2835_bsc0 + BCM2835_BSC_FIFO/4;
    volatile uint32_t* status  = bcm2835_bsc0 + BCM2835_BSC_S/4;
    volatile uint32_t* control = bcm2835_bsc0 + BCM2835_BSC_C/4;
#else
    volatile uint32_t* dlen    = bcm2835_bsc1 + BCM2835_BSC_DLEN/4;
    volatile uint32_t* fifo    = bcm2835_bsc1 + BCM2835_BSC_FIFO/4;
   18cb8:	e2878010 	add	r8, r7, #16

    /* Set Data Length */
    bcm2835_peri_write(dlen, cmds_len);
 
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   18cbc:	13a0a000 	movne	sl, #0
   18cc0:	1a000007 	bne	18ce4 <bcm2835_i2c_write_read_rs+0x90>
   18cc4:	ea000011 	b	18d10 <bcm2835_i2c_write_read_rs+0xbc>
    {
        bcm2835_peri_write_nb(fifo, cmds[i]);
        i++;
   18cc8:	e28aa001 	add	sl, sl, #1

    /* Set Data Length */
    bcm2835_peri_write(dlen, cmds_len);
 
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
   18ccc:	e05b200a 	subs	r2, fp, sl
   18cd0:	13a02001 	movne	r2, #1
   18cd4:	e35a000f 	cmp	sl, #15
   18cd8:	83a02000 	movhi	r2, #0
   18cdc:	e3520000 	cmp	r2, #0
   18ce0:	0a00000a 	beq	18d10 <bcm2835_i2c_write_read_rs+0xbc>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18ce4:	e5d61000 	ldrb	r1, [r6]
    bcm2835_peri_write(dlen, cmds_len);
 
    /* pre populate FIFO with max buffer */
    while( remaining && ( i < BCM2835_BSC_FIFO_SIZE ) )
    {
        bcm2835_peri_write_nb(fifo, cmds[i]);
   18ce8:	e5f32001 	ldrb	r2, [r3, #1]!
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18cec:	e3510000 	cmp	r1, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18cf0:	05872010 	streq	r2, [r7, #16]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18cf4:	0afffff3 	beq	18cc8 <bcm2835_i2c_write_read_rs+0x74>
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18cf8:	e59f019c 	ldr	r0, [pc, #412]	; 18e9c <bcm2835_i2c_write_read_rs+0x248>
   18cfc:	e1a01008 	mov	r1, r8
   18d00:	e58d3000 	str	r3, [sp]
   18d04:	ebffe06f 	bl	10ec8 <printf@plt>
   18d08:	e59d3000 	ldr	r3, [sp]
   18d0c:	eaffffed 	b	18cc8 <bcm2835_i2c_write_read_rs+0x74>
        i++;
        remaining--;
    }

    /* Enable device and start transfer */
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST);
   18d10:	e1a00007 	mov	r0, r7
   18d14:	e59f1184 	ldr	r1, [pc, #388]	; 18ea0 <bcm2835_i2c_write_read_rs+0x24c>
   18d18:	ebfffb2a 	bl	179c8 <bcm2835_peri_write>
    
    /* poll for transfer has started (way to do repeated start, from BCM2835 datasheet) */
    while ( !( bcm2835_peri_read(status) & BCM2835_BSC_S_TA ) )
   18d1c:	e1a00005 	mov	r0, r5
   18d20:	ebfffb0a 	bl	17950 <bcm2835_peri_read>
   18d24:	e3100001 	tst	r0, #1
   18d28:	1a000005 	bne	18d44 <bcm2835_i2c_write_read_rs+0xf0>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18d2c:	e5d63000 	ldrb	r3, [r6]
   18d30:	e3530000 	cmp	r3, #0
   18d34:	1a00002d 	bne	18df0 <bcm2835_i2c_write_read_rs+0x19c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18d38:	e5973004 	ldr	r3, [r7, #4]
    
    /* poll for transfer has started (way to do repeated start, from BCM2835 datasheet) */
    while ( !( bcm2835_peri_read(status) & BCM2835_BSC_S_TA ) )
    {
        /* Linux may cause us to miss entire transfer stage */
        if(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE)
   18d3c:	e3130002 	tst	r3, #2
   18d40:	0afffff5 	beq	18d1c <bcm2835_i2c_write_read_rs+0xc8>
    
    remaining = buf_len;
    i = 0;

    /* Send a repeated start with read bit set in address */
    bcm2835_peri_write(dlen, buf_len);
   18d44:	e59d0004 	ldr	r0, [sp, #4]
   18d48:	e1a01004 	mov	r1, r4
   18d4c:	ebfffb1d 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST  | BCM2835_BSC_C_READ );
   18d50:	e1a00007 	mov	r0, r7
   18d54:	e59f1148 	ldr	r1, [pc, #328]	; 18ea4 <bcm2835_i2c_write_read_rs+0x250>
   18d58:	ebfffb1a 	bl	179c8 <bcm2835_peri_write>
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * (cmds_len + 1));
   18d5c:	e5960004 	ldr	r0, [r6, #4]
   18d60:	e3a01000 	mov	r1, #0
        if(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE)
            break;
    }
    
    remaining = buf_len;
    i = 0;
   18d64:	e1a0a001 	mov	sl, r1
    /* Send a repeated start with read bit set in address */
    bcm2835_peri_write(dlen, buf_len);
    bcm2835_peri_write(control, BCM2835_BSC_C_I2CEN | BCM2835_BSC_C_ST  | BCM2835_BSC_C_READ );
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * (cmds_len + 1));
   18d68:	e020009b 	mla	r0, fp, r0, r0
   18d6c:	ebfffefc 	bl	18964 <bcm2835_delayMicroseconds>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18d70:	e5d63000 	ldrb	r3, [r6]
   18d74:	e3530000 	cmp	r3, #0
   18d78:	1a000018 	bne	18de0 <bcm2835_i2c_write_read_rs+0x18c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18d7c:	e5973004 	ldr	r3, [r7, #4]
    
    /* Wait for write to complete and first byte back. */
    bcm2835_delayMicroseconds(i2c_byte_wait_us * (cmds_len + 1));
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
   18d80:	e3130002 	tst	r3, #2
   18d84:	1a00001d 	bne	18e00 <bcm2835_i2c_write_read_rs+0x1ac>
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18d88:	e3540000 	cmp	r4, #0
   18d8c:	0afffff7 	beq	18d70 <bcm2835_i2c_write_read_rs+0x11c>
   18d90:	e089b00a 	add	fp, r9, sl
   18d94:	ea000005 	b	18db0 <bcm2835_i2c_write_read_rs+0x15c>
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
	return 0;
    }
    else
    {
	return *paddr;
   18d98:	e5973010 	ldr	r3, [r7, #16]
   18d9c:	e6ef3073 	uxtb	r3, r3
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18da0:	e2544001 	subs	r4, r4, #1
    	{
	    /* Read from FIFO, no barrier */
	    buf[i] = bcm2835_peri_read_nb(fifo);
   18da4:	e4cb3001 	strb	r3, [fp], #1
	    i++;
   18da8:	e28aa001 	add	sl, sl, #1
    
    /* wait for transfer to complete */
    while (!(bcm2835_peri_read_nb(status) & BCM2835_BSC_S_DONE))
    {
        /* we must empty the FIFO as it is populated and not use any delay */
        while (remaining && bcm2835_peri_read(status) & BCM2835_BSC_S_RXD)
   18dac:	0affffef 	beq	18d70 <bcm2835_i2c_write_read_rs+0x11c>
   18db0:	e1a00005 	mov	r0, r5
   18db4:	ebfffae5 	bl	17950 <bcm2835_peri_read>
   18db8:	e3100020 	tst	r0, #32
   18dbc:	0affffeb 	beq	18d70 <bcm2835_i2c_write_read_rs+0x11c>
 * before any read or write to another peripheral can occur.
 * The MB can be explicit, or one of the barrier read/write calls.
 */
uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)
{
    if (debug)
   18dc0:	e5d63000 	ldrb	r3, [r6]
   18dc4:	e3530000 	cmp	r3, #0
   18dc8:	0afffff2 	beq	18d98 <bcm2835_i2c_write_read_rs+0x144>
    {
	printf("bcm2835_peri_read_nb  paddr %08X\n", (unsigned) paddr);
   18dcc:	e59f00d4 	ldr	r0, [pc, #212]	; 18ea8 <bcm2835_i2c_write_read_rs+0x254>
   18dd0:	e1a01008 	mov	r1, r8
   18dd4:	ebffe03b 	bl	10ec8 <printf@plt>
   18dd8:	e3a03000 	mov	r3, #0
   18ddc:	eaffffef 	b	18da0 <bcm2835_i2c_write_read_rs+0x14c>
   18de0:	e1a01005 	mov	r1, r5
   18de4:	e59f00bc 	ldr	r0, [pc, #188]	; 18ea8 <bcm2835_i2c_write_read_rs+0x254>
   18de8:	ebffe036 	bl	10ec8 <printf@plt>
   18dec:	eaffffe5 	b	18d88 <bcm2835_i2c_write_read_rs+0x134>
   18df0:	e1a01005 	mov	r1, r5
   18df4:	e59f00ac 	ldr	r0, [pc, #172]	; 18ea8 <bcm2835_i2c_write_read_rs+0x254>
   18df8:	ebffe032 	bl	10ec8 <printf@plt>
   18dfc:	eaffffc6 	b	18d1c <bcm2835_i2c_write_read_rs+0xc8>
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18e00:	e3540000 	cmp	r4, #0
   18e04:	1089900a 	addne	r9, r9, sl
   18e08:	1a000004 	bne	18e20 <bcm2835_i2c_write_read_rs+0x1cc>
   18e0c:	ea000014 	b	18e64 <bcm2835_i2c_write_read_rs+0x210>
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18e10:	ebffface 	bl	17950 <bcm2835_peri_read>
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18e14:	e2544001 	subs	r4, r4, #1
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18e18:	e4c90001 	strb	r0, [r9], #1
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18e1c:	0a000010 	beq	18e64 <bcm2835_i2c_write_read_rs+0x210>
   18e20:	e1a00005 	mov	r0, r5
   18e24:	ebfffac9 	bl	17950 <bcm2835_peri_read>
   18e28:	e3100020 	tst	r0, #32
    {
        /* Read from FIFO */
        buf[i] = bcm2835_peri_read(fifo);
   18e2c:	e1a00008 	mov	r0, r8
	    remaining--;
    	}
    }
    
    /* transfer has finished - grab any remaining stuff in FIFO */
    while (remaining && (bcm2835_peri_read(status) & BCM2835_BSC_S_RXD))
   18e30:	1afffff6 	bne	18e10 <bcm2835_i2c_write_read_rs+0x1bc>
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   18e34:	e1a00005 	mov	r0, r5
   18e38:	ebfffac4 	bl	17950 <bcm2835_peri_read>
   18e3c:	e3100c01 	tst	r0, #256	; 0x100
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
   18e40:	13a04001 	movne	r4, #1
        i++;
        remaining--;
    }
    
    /* Received a NACK */
    if (bcm2835_peri_read(status) & BCM2835_BSC_S_ERR)
   18e44:	0a000008 	beq	18e6c <bcm2835_i2c_write_read_rs+0x218>
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
    }

    bcm2835_peri_set_bits(control, BCM2835_BSC_S_DONE , BCM2835_BSC_S_DONE);
   18e48:	e3a01002 	mov	r1, #2
   18e4c:	e1a00007 	mov	r0, r7
   18e50:	e1a02001 	mov	r2, r1
   18e54:	ebfffaf4 	bl	17a2c <bcm2835_peri_set_bits>

    return reason;
}
   18e58:	e1a00004 	mov	r0, r4
   18e5c:	e28dd00c 	add	sp, sp, #12
   18e60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e64:	e3a04000 	mov	r4, #0
   18e68:	eafffff1 	b	18e34 <bcm2835_i2c_write_read_rs+0x1e0>
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18e6c:	e1a00005 	mov	r0, r5
   18e70:	ebfffab6 	bl	17950 <bcm2835_peri_read>
   18e74:	e3100c02 	tst	r0, #512	; 0x200
    {
	reason = BCM2835_I2C_REASON_ERROR_CLKT;
   18e78:	13a04002 	movne	r4, #2
    {
	reason = BCM2835_I2C_REASON_ERROR_NACK;
    }

    /* Received Clock Stretch Timeout */
    else if (bcm2835_peri_read(status) & BCM2835_BSC_S_CLKT)
   18e7c:	1afffff1 	bne	18e48 <bcm2835_i2c_write_read_rs+0x1f4>
    }

    /* Not all data is sent */
    else if (remaining)
    {
	reason = BCM2835_I2C_REASON_ERROR_DATA;
   18e80:	e3540000 	cmp	r4, #0
   18e84:	13a04004 	movne	r4, #4
   18e88:	03a04000 	moveq	r4, #0
   18e8c:	eaffffed 	b	18e48 <bcm2835_i2c_write_read_rs+0x1f4>
   18e90:	0002b960 	.word	0x0002b960
   18e94:	00000302 	.word	0x00000302
   18e98:	0002d16c 	.word	0x0002d16c
   18e9c:	0001b02c 	.word	0x0001b02c
   18ea0:	00008080 	.word	0x00008080
   18ea4:	00008081 	.word	0x00008081
   18ea8:	0001afdc 	.word	0x0001afdc

00018eac <bcm2835_st_delay>:
    return st;
}

/* Delays for the specified number of microseconds with offset */
void bcm2835_st_delay(uint64_t offset_micros, uint64_t micros)
{
   18eac:	e92d4038 	push	{r3, r4, r5, lr}
    uint64_t compare = offset_micros + micros;
   18eb0:	e0904002 	adds	r4, r0, r2
   18eb4:	e0a15003 	adc	r5, r1, r3

    while(bcm2835_st_read() < compare)
   18eb8:	ebfffe81 	bl	188c4 <bcm2835_st_read>
   18ebc:	e1550001 	cmp	r5, r1
   18ec0:	01540000 	cmpeq	r4, r0
   18ec4:	8afffffb 	bhi	18eb8 <bcm2835_st_delay+0xc>
	;
}
   18ec8:	e8bd8038 	pop	{r3, r4, r5, pc}

00018ecc <bcm2835_pwm_set_clock>:

/* PWM */

void bcm2835_pwm_set_clock(uint32_t divisor)
{
   18ecc:	e92d4070 	push	{r4, r5, r6, lr}
    if (   bcm2835_clk == MAP_FAILED
   18ed0:	e59f407c 	ldr	r4, [pc, #124]	; 18f54 <bcm2835_pwm_set_clock+0x88>
   18ed4:	e5943010 	ldr	r3, [r4, #16]
   18ed8:	e3730001 	cmn	r3, #1
   18edc:	08bd8070 	popeq	{r4, r5, r6, pc}
        || bcm2835_pwm == MAP_FAILED)
   18ee0:	e594200c 	ldr	r2, [r4, #12]
   18ee4:	e3720001 	cmn	r2, #1
   18ee8:	08bd8070 	popeq	{r4, r5, r6, pc}
      return; /* bcm2835_init() failed or not root */
  
    /* From Gerts code */
    divisor &= 0xfff;
   18eec:	e1a06a00 	lsl	r6, r0, #20
    /* Stop PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x01);
   18ef0:	e59f1060 	ldr	r1, [pc, #96]	; 18f58 <bcm2835_pwm_set_clock+0x8c>
   18ef4:	e28300a0 	add	r0, r3, #160	; 0xa0
   18ef8:	ebfffab2 	bl	179c8 <bcm2835_peri_write>
    bcm2835_delay(110); /* Prevents clock going slow */
   18efc:	e3a0006e 	mov	r0, #110	; 0x6e
    if (   bcm2835_clk == MAP_FAILED
        || bcm2835_pwm == MAP_FAILED)
      return; /* bcm2835_init() failed or not root */
  
    /* From Gerts code */
    divisor &= 0xfff;
   18f00:	e1a06a26 	lsr	r6, r6, #20
    /* Stop PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x01);
    bcm2835_delay(110); /* Prevents clock going slow */
   18f04:	ebfffbe5 	bl	17ea0 <bcm2835_delay>
    /* Wait for the clock to be not busy */
    while ((bcm2835_peri_read(bcm2835_clk + BCM2835_PWMCLK_CNTL) & 0x80) != 0)
   18f08:	ea000000 	b	18f10 <bcm2835_pwm_set_clock+0x44>
	bcm2835_delay(1); 
   18f0c:	ebfffbe3 	bl	17ea0 <bcm2835_delay>
    divisor &= 0xfff;
    /* Stop PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x01);
    bcm2835_delay(110); /* Prevents clock going slow */
    /* Wait for the clock to be not busy */
    while ((bcm2835_peri_read(bcm2835_clk + BCM2835_PWMCLK_CNTL) & 0x80) != 0)
   18f10:	e5940010 	ldr	r0, [r4, #16]
   18f14:	e59f5038 	ldr	r5, [pc, #56]	; 18f54 <bcm2835_pwm_set_clock+0x88>
   18f18:	e28000a0 	add	r0, r0, #160	; 0xa0
   18f1c:	ebfffa8b 	bl	17950 <bcm2835_peri_read>
   18f20:	e3100080 	tst	r0, #128	; 0x80
	bcm2835_delay(1); 
   18f24:	e3a00001 	mov	r0, #1
    divisor &= 0xfff;
    /* Stop PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x01);
    bcm2835_delay(110); /* Prevents clock going slow */
    /* Wait for the clock to be not busy */
    while ((bcm2835_peri_read(bcm2835_clk + BCM2835_PWMCLK_CNTL) & 0x80) != 0)
   18f28:	1afffff7 	bne	18f0c <bcm2835_pwm_set_clock+0x40>
	bcm2835_delay(1); 
    /* set the clock divider and enable PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_DIV, BCM2835_PWM_PASSWRD | (divisor << 12));
   18f2c:	e5950010 	ldr	r0, [r5, #16]
   18f30:	e1a01606 	lsl	r1, r6, #12
   18f34:	e381145a 	orr	r1, r1, #1509949440	; 0x5a000000
   18f38:	e28000a4 	add	r0, r0, #164	; 0xa4
   18f3c:	ebfffaa1 	bl	179c8 <bcm2835_peri_write>
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x11); /* Source=osc and enable */
   18f40:	e5950010 	ldr	r0, [r5, #16]
   18f44:	e59f1010 	ldr	r1, [pc, #16]	; 18f5c <bcm2835_pwm_set_clock+0x90>
   18f48:	e28000a0 	add	r0, r0, #160	; 0xa0
}
   18f4c:	e8bd4070 	pop	{r4, r5, r6, lr}
    /* Wait for the clock to be not busy */
    while ((bcm2835_peri_read(bcm2835_clk + BCM2835_PWMCLK_CNTL) & 0x80) != 0)
	bcm2835_delay(1); 
    /* set the clock divider and enable PWM clock */
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_DIV, BCM2835_PWM_PASSWRD | (divisor << 12));
    bcm2835_peri_write(bcm2835_clk + BCM2835_PWMCLK_CNTL, BCM2835_PWM_PASSWRD | 0x11); /* Source=osc and enable */
   18f50:	eafffa9c 	b	179c8 <bcm2835_peri_write>
   18f54:	0002b960 	.word	0x0002b960
   18f58:	5a000001 	.word	0x5a000001
   18f5c:	5a000011 	.word	0x5a000011

00018f60 <bcm2835_pwm_set_mode>:
}

void bcm2835_pwm_set_mode(uint8_t channel, uint8_t markspace, uint8_t enabled)
{
   18f60:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  if (   bcm2835_clk == MAP_FAILED
   18f64:	e59f4098 	ldr	r4, [pc, #152]	; 19004 <bcm2835_pwm_set_mode+0xa4>
   18f68:	e5943010 	ldr	r3, [r4, #16]
   18f6c:	e3730001 	cmn	r3, #1
   18f70:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
       || bcm2835_pwm == MAP_FAILED)
   18f74:	e594300c 	ldr	r3, [r4, #12]
   18f78:	e3730001 	cmn	r3, #1
   18f7c:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
   18f80:	e1a05000 	mov	r5, r0
    return; /* bcm2835_init() failed or not root */

  uint32_t control = bcm2835_peri_read(bcm2835_pwm + BCM2835_PWM_CONTROL);
   18f84:	e1a00003 	mov	r0, r3
   18f88:	e1a06002 	mov	r6, r2
   18f8c:	e1a07001 	mov	r7, r1
   18f90:	ebfffa6e 	bl	17950 <bcm2835_peri_read>

  if (channel == 0)
   18f94:	e3550000 	cmp	r5, #0
   18f98:	0a00000b 	beq	18fcc <bcm2835_pwm_set_mode+0x6c>
      if (enabled)
	control |= BCM2835_PWM0_ENABLE;
      else
	control &= ~BCM2835_PWM0_ENABLE;
    }
  else if (channel == 1)
   18f9c:	e3550001 	cmp	r5, #1
   18fa0:	0a000010 	beq	18fe8 <bcm2835_pwm_set_mode+0x88>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18fa4:	e59f305c 	ldr	r3, [pc, #92]	; 19008 <bcm2835_pwm_set_mode+0xa8>
      else
	control &= ~BCM2835_PWM1_ENABLE;
    }

  /* If you use the barrier here, wierd things happen, and the commands dont work */
  bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM_CONTROL, control);
   18fa8:	e594100c 	ldr	r1, [r4, #12]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18fac:	e5d33000 	ldrb	r3, [r3]
   18fb0:	e3530000 	cmp	r3, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   18fb4:	05810000 	streq	r0, [r1]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   18fb8:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18fbc:	e1a02000 	mov	r2, r0

  /* If you use the barrier here, wierd things happen, and the commands dont work */
  bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM_CONTROL, control);
  /*  bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM_CONTROL, BCM2835_PWM0_ENABLE | BCM2835_PWM1_ENABLE | BCM2835_PWM0_MS_MODE | BCM2835_PWM1_MS_MODE); */

}
   18fc0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   18fc4:	e59f0040 	ldr	r0, [pc, #64]	; 1900c <bcm2835_pwm_set_mode+0xac>
   18fc8:	eaffdfbe 	b	10ec8 <printf@plt>

  uint32_t control = bcm2835_peri_read(bcm2835_pwm + BCM2835_PWM_CONTROL);

  if (channel == 0)
    {
      if (markspace)
   18fcc:	e3570000 	cmp	r7, #0
	control |= BCM2835_PWM0_MS_MODE;
   18fd0:	13800080 	orrne	r0, r0, #128	; 0x80
      else
	control &= ~BCM2835_PWM0_MS_MODE;
   18fd4:	03c00080 	biceq	r0, r0, #128	; 0x80
      if (enabled)
   18fd8:	e3560000 	cmp	r6, #0
	control |= BCM2835_PWM0_ENABLE;
   18fdc:	13800001 	orrne	r0, r0, #1
      else
	control &= ~BCM2835_PWM0_ENABLE;
   18fe0:	03c00001 	biceq	r0, r0, #1
   18fe4:	eaffffee 	b	18fa4 <bcm2835_pwm_set_mode+0x44>
    }
  else if (channel == 1)
    {
      if (markspace)
   18fe8:	e3570000 	cmp	r7, #0
	control |= BCM2835_PWM1_MS_MODE;
   18fec:	13800902 	orrne	r0, r0, #32768	; 0x8000
      else
	control &= ~BCM2835_PWM1_MS_MODE;
   18ff0:	03c00902 	biceq	r0, r0, #32768	; 0x8000
      if (enabled)
   18ff4:	e3560000 	cmp	r6, #0
	control |= BCM2835_PWM1_ENABLE;
   18ff8:	13800c01 	orrne	r0, r0, #256	; 0x100
      else
	control &= ~BCM2835_PWM1_ENABLE;
   18ffc:	03c00c01 	biceq	r0, r0, #256	; 0x100
   19000:	eaffffe7 	b	18fa4 <bcm2835_pwm_set_mode+0x44>
   19004:	0002b960 	.word	0x0002b960
   19008:	0002d16c 	.word	0x0002d16c
   1900c:	0001b02c 	.word	0x0001b02c

00019010 <bcm2835_pwm_set_range>:

}

void bcm2835_pwm_set_range(uint8_t channel, uint32_t range)
{
  if (   bcm2835_clk == MAP_FAILED
   19010:	e59f3068 	ldr	r3, [pc, #104]	; 19080 <bcm2835_pwm_set_range+0x70>
  /*  bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM_CONTROL, BCM2835_PWM0_ENABLE | BCM2835_PWM1_ENABLE | BCM2835_PWM0_MS_MODE | BCM2835_PWM1_MS_MODE); */

}

void bcm2835_pwm_set_range(uint8_t channel, uint32_t range)
{
   19014:	e1a02001 	mov	r2, r1
  if (   bcm2835_clk == MAP_FAILED
   19018:	e593c010 	ldr	ip, [r3, #16]
   1901c:	e37c0001 	cmn	ip, #1
   19020:	012fff1e 	bxeq	lr
       || bcm2835_pwm == MAP_FAILED)
   19024:	e593300c 	ldr	r3, [r3, #12]
   19028:	e3730001 	cmn	r3, #1
   1902c:	012fff1e 	bxeq	lr
    return; /* bcm2835_init() failed or not root */

  if (channel == 0)
   19030:	e3500000 	cmp	r0, #0
   19034:	1a000007 	bne	19058 <bcm2835_pwm_set_range+0x48>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   19038:	e59f1044 	ldr	r1, [pc, #68]	; 19084 <bcm2835_pwm_set_range+0x74>
   1903c:	e5d11000 	ldrb	r1, [r1]
   19040:	e3510000 	cmp	r1, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   19044:	05832010 	streq	r2, [r3, #16]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   19048:	012fff1e 	bxeq	lr
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   1904c:	e2831010 	add	r1, r3, #16
   19050:	e59f0030 	ldr	r0, [pc, #48]	; 19088 <bcm2835_pwm_set_range+0x78>
   19054:	eaffdf9b 	b	10ec8 <printf@plt>
       || bcm2835_pwm == MAP_FAILED)
    return; /* bcm2835_init() failed or not root */

  if (channel == 0)
      bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM0_RANGE, range);
  else if (channel == 1)
   19058:	e3500001 	cmp	r0, #1
   1905c:	112fff1e 	bxne	lr
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   19060:	e59f101c 	ldr	r1, [pc, #28]	; 19084 <bcm2835_pwm_set_range+0x74>
   19064:	e5d11000 	ldrb	r1, [r1]
   19068:	e3510000 	cmp	r1, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   1906c:	05832020 	streq	r2, [r3, #32]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   19070:	012fff1e 	bxeq	lr
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   19074:	e2831020 	add	r1, r3, #32
   19078:	e59f0008 	ldr	r0, [pc, #8]	; 19088 <bcm2835_pwm_set_range+0x78>
   1907c:	eaffdf91 	b	10ec8 <printf@plt>
   19080:	0002b960 	.word	0x0002b960
   19084:	0002d16c 	.word	0x0002d16c
   19088:	0001b02c 	.word	0x0001b02c

0001908c <bcm2835_pwm_set_data>:
      bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM1_RANGE, range);
}

void bcm2835_pwm_set_data(uint8_t channel, uint32_t data)
{
  if (   bcm2835_clk == MAP_FAILED
   1908c:	e59f3068 	ldr	r3, [pc, #104]	; 190fc <bcm2835_pwm_set_data+0x70>
  else if (channel == 1)
      bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM1_RANGE, range);
}

void bcm2835_pwm_set_data(uint8_t channel, uint32_t data)
{
   19090:	e1a02001 	mov	r2, r1
  if (   bcm2835_clk == MAP_FAILED
   19094:	e593c010 	ldr	ip, [r3, #16]
   19098:	e37c0001 	cmn	ip, #1
   1909c:	012fff1e 	bxeq	lr
       || bcm2835_pwm == MAP_FAILED)
   190a0:	e593300c 	ldr	r3, [r3, #12]
   190a4:	e3730001 	cmn	r3, #1
   190a8:	012fff1e 	bxeq	lr
    return; /* bcm2835_init() failed or not root */

  if (channel == 0)
   190ac:	e3500000 	cmp	r0, #0
   190b0:	1a000007 	bne	190d4 <bcm2835_pwm_set_data+0x48>
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   190b4:	e59f1044 	ldr	r1, [pc, #68]	; 19100 <bcm2835_pwm_set_data+0x74>
   190b8:	e5d11000 	ldrb	r1, [r1]
   190bc:	e3510000 	cmp	r1, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   190c0:	05832014 	streq	r2, [r3, #20]
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   190c4:	012fff1e 	bxeq	lr
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   190c8:	e2831014 	add	r1, r3, #20
   190cc:	e59f0030 	ldr	r0, [pc, #48]	; 19104 <bcm2835_pwm_set_data+0x78>
   190d0:	eaffdf7c 	b	10ec8 <printf@plt>
       || bcm2835_pwm == MAP_FAILED)
    return; /* bcm2835_init() failed or not root */

  if (channel == 0)
      bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM0_DATA, data);
  else if (channel == 1)
   190d4:	e3500001 	cmp	r0, #1
   190d8:	112fff1e 	bxne	lr
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   190dc:	e59f101c 	ldr	r1, [pc, #28]	; 19100 <bcm2835_pwm_set_data+0x74>
   190e0:	e5d11000 	ldrb	r1, [r1]
   190e4:	e3510000 	cmp	r1, #0
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
               (unsigned) paddr, value);
    }
    else
    {
	*paddr = value;
   190e8:	05832024 	streq	r2, [r3, #36]	; 0x24
}

/* write to peripheral without the write barrier */
void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)
{
    if (debug)
   190ec:	012fff1e 	bxeq	lr
    {
	printf("bcm2835_peri_write_nb paddr %08X, value %08X\n",
   190f0:	e2831024 	add	r1, r3, #36	; 0x24
   190f4:	e59f0008 	ldr	r0, [pc, #8]	; 19104 <bcm2835_pwm_set_data+0x78>
   190f8:	eaffdf72 	b	10ec8 <printf@plt>
   190fc:	0002b960 	.word	0x0002b960
   19100:	0002d16c 	.word	0x0002d16c
   19104:	0001b02c 	.word	0x0001b02c

00019108 <malloc_aligned>:
      bcm2835_peri_write_nb(bcm2835_pwm + BCM2835_PWM1_DATA, data);
}

/* Allocate page-aligned memory. */
void *malloc_aligned(size_t size)
{
   19108:	e92d4030 	push	{r4, r5, lr}
   1910c:	e24dd00c 	sub	sp, sp, #12
   19110:	e1a05000 	mov	r5, r0
    void *mem;
    errno = posix_memalign(&mem, BCM2835_PAGE_SIZE, size);
   19114:	ebffdfe6 	bl	110b4 <__errno_location@plt>
   19118:	e1a02005 	mov	r2, r5
   1911c:	e3a01a01 	mov	r1, #4096	; 0x1000
   19120:	e1a04000 	mov	r4, r0
   19124:	e28d0004 	add	r0, sp, #4
   19128:	ebffdfde 	bl	110a8 <posix_memalign@plt>
   1912c:	e3500000 	cmp	r0, #0
    return (errno ? NULL : mem);
   19130:	13a03000 	movne	r3, #0
   19134:	059d3004 	ldreq	r3, [sp, #4]

/* Allocate page-aligned memory. */
void *malloc_aligned(size_t size)
{
    void *mem;
    errno = posix_memalign(&mem, BCM2835_PAGE_SIZE, size);
   19138:	e5840000 	str	r0, [r4]
    return (errno ? NULL : mem);
}
   1913c:	e1a00003 	mov	r0, r3
   19140:	e28dd00c 	add	sp, sp, #12
   19144:	e8bd8030 	pop	{r4, r5, pc}

00019148 <bcm2835_init>:
    *pmem = MAP_FAILED;
}

/* Initialise this library. */
int bcm2835_init(void)
{
   19148:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1914c:	e24dd010 	sub	sp, sp, #16
    int  memfd;
    int  ok;
    FILE *fp;

    if (debug) 
   19150:	e59f52a4 	ldr	r5, [pc, #676]	; 193fc <bcm2835_init+0x2b4>
   19154:	e5d54000 	ldrb	r4, [r5]
   19158:	e3540000 	cmp	r4, #0
   1915c:	0a000015 	beq	191b8 <bcm2835_init+0x70>
    {
        bcm2835_peripherals = (uint32_t*)BCM2835_PERI_BASE;
   19160:	e59f3298 	ldr	r3, [pc, #664]	; 19400 <bcm2835_init+0x2b8>
	bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
	bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
	bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
	bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
	bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
	bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4;
   19164:	e59f0298 	ldr	r0, [pc, #664]	; 19404 <bcm2835_init+0x2bc>

    if (debug) 
    {
        bcm2835_peripherals = (uint32_t*)BCM2835_PERI_BASE;

	bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
   19168:	e59f6298 	ldr	r6, [pc, #664]	; 19408 <bcm2835_init+0x2c0>
	bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
   1916c:	e59f5298 	ldr	r5, [pc, #664]	; 1940c <bcm2835_init+0x2c4>
	bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
   19170:	e59f4298 	ldr	r4, [pc, #664]	; 19410 <bcm2835_init+0x2c8>
	bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
   19174:	e59fe298 	ldr	lr, [pc, #664]	; 19414 <bcm2835_init+0x2cc>
	bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
   19178:	e59fc298 	ldr	ip, [pc, #664]	; 19418 <bcm2835_init+0x2d0>
	bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4;
	bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4;
   1917c:	e59f1298 	ldr	r1, [pc, #664]	; 1941c <bcm2835_init+0x2d4>
	bcm2835_st   = bcm2835_peripherals + BCM2835_ST_BASE/4;
   19180:	e59f2298 	ldr	r2, [pc, #664]	; 19420 <bcm2835_init+0x2d8>
	bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
	bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
	bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
	bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
	bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
	bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4;
   19184:	e583001c 	str	r0, [r3, #28]
	bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4;
	bcm2835_st   = bcm2835_peripherals + BCM2835_ST_BASE/4;
	return 1; /* Success */
   19188:	e3a00001 	mov	r0, #1
    int  ok;
    FILE *fp;

    if (debug) 
    {
        bcm2835_peripherals = (uint32_t*)BCM2835_PERI_BASE;
   1918c:	e3a07202 	mov	r7, #536870912	; 0x20000000
   19190:	e5837004 	str	r7, [r3, #4]

	bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
   19194:	e5836014 	str	r6, [r3, #20]
	bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
   19198:	e5835010 	str	r5, [r3, #16]
	bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
   1919c:	e5834008 	str	r4, [r3, #8]
	bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
   191a0:	e583e00c 	str	lr, [r3, #12]
	bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
   191a4:	e583c018 	str	ip, [r3, #24]
	bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4;
	bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4;
   191a8:	e5831020 	str	r1, [r3, #32]
	bcm2835_st   = bcm2835_peripherals + BCM2835_ST_BASE/4;
   191ac:	e5832024 	str	r2, [r3, #36]	; 0x24

    if (!ok)
	bcm2835_close();

    return ok;
}
   191b0:	e28dd010 	add	sp, sp, #16
   191b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    /* Figure out the base and size of the peripheral address block
    // using the device-tree. Required for RPi2, optional for RPi 1
    */
    if ((fp = fopen(BMC2835_RPI2_DT_FILENAME , "rb")))
   191b8:	e59f0264 	ldr	r0, [pc, #612]	; 19424 <bcm2835_init+0x2dc>
   191bc:	e59f1264 	ldr	r1, [pc, #612]	; 19428 <bcm2835_init+0x2e0>
   191c0:	ebffdf43 	bl	10ed4 <fopen@plt>
   191c4:	e2506000 	subs	r6, r0, #0
   191c8:	0a000016 	beq	19228 <bcm2835_init+0xe0>
    {
        unsigned char buf[4];
	fseek(fp, BMC2835_RPI2_DT_PERI_BASE_ADDRESS_OFFSET, SEEK_SET);
   191cc:	e1a02004 	mov	r2, r4
   191d0:	e3a01004 	mov	r1, #4
   191d4:	ebffdff8 	bl	111bc <fseek@plt>
	if (fread(buf, 1, sizeof(buf), fp) == sizeof(buf))
   191d8:	e28d000c 	add	r0, sp, #12
   191dc:	e3a01001 	mov	r1, #1
   191e0:	e3a02004 	mov	r2, #4
   191e4:	e1a03006 	mov	r3, r6
   191e8:	ebffdf75 	bl	10fc4 <fread@plt>
   191ec:	e3500004 	cmp	r0, #4
   191f0:	0a000057 	beq	19354 <bcm2835_init+0x20c>
	  bcm2835_peripherals_base = (uint32_t *)(buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0);
	fseek(fp, BMC2835_RPI2_DT_PERI_SIZE_OFFSET, SEEK_SET);
   191f4:	e3a01008 	mov	r1, #8
   191f8:	e3a02000 	mov	r2, #0
   191fc:	e1a00006 	mov	r0, r6
   19200:	ebffdfed 	bl	111bc <fseek@plt>
	if (fread(buf, 1, sizeof(buf), fp) == sizeof(buf))
   19204:	e28d000c 	add	r0, sp, #12
   19208:	e3a01001 	mov	r1, #1
   1920c:	e3a02004 	mov	r2, #4
   19210:	e1a03006 	mov	r3, r6
   19214:	ebffdf6a 	bl	10fc4 <fread@plt>
   19218:	e3500004 	cmp	r0, #4
   1921c:	0a000041 	beq	19328 <bcm2835_init+0x1e0>
	  bcm2835_peripherals_size = (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0);
	fclose(fp);
   19220:	e1a00006 	mov	r0, r6
   19224:	ebffdfc0 	bl	1112c <fclose@plt>
     * the fact that we can only access GPIO
     * else try for the /dev/mem interface and get access to everything
     */
    memfd = -1;
    ok = 0;
    if (geteuid() == 0)
   19228:	ebffdf53 	bl	10f7c <geteuid@plt>
   1922c:	e2506000 	subs	r6, r0, #0
   19230:	1a000023 	bne	192c4 <bcm2835_init+0x17c>
    {
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/mem", O_RDWR | O_SYNC) ) < 0) 
   19234:	e59f01f0 	ldr	r0, [pc, #496]	; 1942c <bcm2835_init+0x2e4>
   19238:	e59f11f0 	ldr	r1, [pc, #496]	; 19430 <bcm2835_init+0x2e8>
   1923c:	ebffdf75 	bl	11018 <open@plt>
   19240:	e2507000 	subs	r7, r0, #0
   19244:	ba00005d 	blt	193c0 <bcm2835_init+0x278>
		  strerror(errno)) ;
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals = mapmem("gpio", bcm2835_peripherals_size, memfd, (uint32_t)bcm2835_peripherals_base);
   19248:	e59f41b0 	ldr	r4, [pc, #432]	; 19400 <bcm2835_init+0x2b8>
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
   1924c:	e58d7000 	str	r7, [sp]
   19250:	e1a00006 	mov	r0, r6
   19254:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   19258:	e5941000 	ldr	r1, [r4]
   1925c:	e3a02003 	mov	r2, #3
   19260:	e58d3004 	str	r3, [sp, #4]
   19264:	e3a03001 	mov	r3, #1
   19268:	ebffdf7f 	bl	1106c <mmap@plt>
    if (map == MAP_FAILED)
   1926c:	e3700001 	cmn	r0, #1
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
   19270:	e1a06000 	mov	r6, r0
    if (map == MAP_FAILED)
   19274:	0a00005b 	beq	193e8 <bcm2835_init+0x2a0>
      // which are at fixed offsets within the mapped peripherals block
      // Caution: bcm2835_peripherals is uint32_t*, so divide offsets by 4
      */
      bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
      bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
      bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
   19278:	e2801601 	add	r1, r0, #1048576	; 0x100000
      bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
      bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
   1927c:	e2802981 	add	r2, r0, #2113536	; 0x204000
      bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4; /* I2C */
      bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4; /* I2C */
   19280:	e2803502 	add	r3, r0, #8388608	; 0x800000
      
      /* Now compute the base addresses of various peripherals, 
      // which are at fixed offsets within the mapped peripherals block
      // Caution: bcm2835_peripherals is uint32_t*, so divide offsets by 4
      */
      bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
   19284:	e280e602 	add	lr, r0, #2097152	; 0x200000
      bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
   19288:	e280c983 	add	ip, r0, #2146304	; 0x20c000
      bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
   1928c:	e2818a01 	add	r8, r1, #4096	; 0x1000
      bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
      bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
      bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4; /* I2C */
   19290:	e2825a01 	add	r5, r2, #4096	; 0x1000
      bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4; /* I2C */
   19294:	e2833901 	add	r3, r3, #16384	; 0x4000
      bcm2835_st   = bcm2835_peripherals + BCM2835_ST_BASE/4;
   19298:	e2800a03 	add	r0, r0, #12288	; 0x3000
		  strerror(errno)) ;
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals = mapmem("gpio", bcm2835_peripherals_size, memfd, (uint32_t)bcm2835_peripherals_base);
   1929c:	e5846004 	str	r6, [r4, #4]
      // Caution: bcm2835_peripherals is uint32_t*, so divide offsets by 4
      */
      bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
      bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
      bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
      bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
   192a0:	e5841014 	str	r1, [r4, #20]
      // which are at fixed offsets within the mapped peripherals block
      // Caution: bcm2835_peripherals is uint32_t*, so divide offsets by 4
      */
      bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
      bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
      bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
   192a4:	e5848010 	str	r8, [r4, #16]
      bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
      bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
   192a8:	e5842018 	str	r2, [r4, #24]
      bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4; /* I2C */
   192ac:	e584501c 	str	r5, [r4, #28]
      bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4; /* I2C */
   192b0:	e5843020 	str	r3, [r4, #32]
      
      /* Now compute the base addresses of various peripherals, 
      // which are at fixed offsets within the mapped peripherals block
      // Caution: bcm2835_peripherals is uint32_t*, so divide offsets by 4
      */
      bcm2835_gpio = bcm2835_peripherals + BCM2835_GPIO_BASE/4;
   192b4:	e584e008 	str	lr, [r4, #8]
      bcm2835_pwm  = bcm2835_peripherals + BCM2835_GPIO_PWM/4;
   192b8:	e584c00c 	str	ip, [r4, #12]
      bcm2835_clk  = bcm2835_peripherals + BCM2835_CLOCK_BASE/4;
      bcm2835_pads = bcm2835_peripherals + BCM2835_GPIO_PADS/4;
      bcm2835_spi0 = bcm2835_peripherals + BCM2835_SPI0_BASE/4;
      bcm2835_bsc0 = bcm2835_peripherals + BCM2835_BSC0_BASE/4; /* I2C */
      bcm2835_bsc1 = bcm2835_peripherals + BCM2835_BSC1_BASE/4; /* I2C */
      bcm2835_st   = bcm2835_peripherals + BCM2835_ST_BASE/4;
   192bc:	e5840024 	str	r0, [r4, #36]	; 0x24
   192c0:	ea000013 	b	19314 <bcm2835_init+0x1cc>
    }
    else
    {
      /* Not root, try /dev/gpiomem */
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/gpiomem", O_RDWR | O_SYNC) ) < 0) 
   192c4:	e59f0168 	ldr	r0, [pc, #360]	; 19434 <bcm2835_init+0x2ec>
   192c8:	e59f1160 	ldr	r1, [pc, #352]	; 19430 <bcm2835_init+0x2e8>
   192cc:	ebffdf51 	bl	11018 <open@plt>
   192d0:	e2507000 	subs	r7, r0, #0
   192d4:	ba000029 	blt	19380 <bcm2835_init+0x238>
		  strerror(errno)) ;
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals_base = 0;
   192d8:	e59f4120 	ldr	r4, [pc, #288]	; 19400 <bcm2835_init+0x2b8>
   192dc:	e3a0c000 	mov	ip, #0
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
   192e0:	e58d7000 	str	r7, [sp]
   192e4:	e1a0000c 	mov	r0, ip
   192e8:	e5941000 	ldr	r1, [r4]
   192ec:	e3a02003 	mov	r2, #3
   192f0:	e58dc004 	str	ip, [sp, #4]
   192f4:	e3a03001 	mov	r3, #1
		  strerror(errno)) ;
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals_base = 0;
   192f8:	e584c028 	str	ip, [r4, #40]	; 0x28
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
   192fc:	ebffdf5a 	bl	1106c <mmap@plt>
    if (map == MAP_FAILED)
   19300:	e3700001 	cmn	r0, #1
// Return mapped address on success, MAP_FAILED otherwise.
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
   19304:	e1a06000 	mov	r6, r0
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals_base = 0;
      bcm2835_peripherals = mapmem("gpio", bcm2835_peripherals_size, memfd, (uint32_t)bcm2835_peripherals_base);
   19308:	15840004 	strne	r0, [r4, #4]
      if (bcm2835_peripherals == MAP_FAILED) goto exit;
      bcm2835_gpio = bcm2835_peripherals;
   1930c:	15840008 	strne	r0, [r4, #8]
// On error print message.
*/
static void *mapmem(const char *msg, size_t size, int fd, off_t off)
{
    void *map = mmap(NULL, size, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, off);
    if (map == MAP_FAILED)
   19310:	0a000034 	beq	193e8 <bcm2835_init+0x2a0>
      ok = 1;
    }

exit:
    if (memfd >= 0)
        close(memfd);
   19314:	e1a00007 	mov	r0, r7
   19318:	ebffdfb6 	bl	111f8 <close@plt>
   1931c:	e3a00001 	mov	r0, #1

    if (!ok)
	bcm2835_close();

    return ok;
}
   19320:	e28dd010 	add	sp, sp, #16
   19324:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	fseek(fp, BMC2835_RPI2_DT_PERI_BASE_ADDRESS_OFFSET, SEEK_SET);
	if (fread(buf, 1, sizeof(buf), fp) == sizeof(buf))
	  bcm2835_peripherals_base = (uint32_t *)(buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0);
	fseek(fp, BMC2835_RPI2_DT_PERI_SIZE_OFFSET, SEEK_SET);
	if (fread(buf, 1, sizeof(buf), fp) == sizeof(buf))
	  bcm2835_peripherals_size = (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0);
   19328:	e5dd100d 	ldrb	r1, [sp, #13]
   1932c:	e5dd300c 	ldrb	r3, [sp, #12]
   19330:	e5dd200f 	ldrb	r2, [sp, #15]
   19334:	e5dd000e 	ldrb	r0, [sp, #14]
   19338:	e1a01801 	lsl	r1, r1, #16
   1933c:	e1813c03 	orr	r3, r1, r3, lsl #24
   19340:	e59f10b8 	ldr	r1, [pc, #184]	; 19400 <bcm2835_init+0x2b8>
   19344:	e1833002 	orr	r3, r3, r2
   19348:	e1833400 	orr	r3, r3, r0, lsl #8
   1934c:	e5813000 	str	r3, [r1]
   19350:	eaffffb2 	b	19220 <bcm2835_init+0xd8>
    if ((fp = fopen(BMC2835_RPI2_DT_FILENAME , "rb")))
    {
        unsigned char buf[4];
	fseek(fp, BMC2835_RPI2_DT_PERI_BASE_ADDRESS_OFFSET, SEEK_SET);
	if (fread(buf, 1, sizeof(buf), fp) == sizeof(buf))
	  bcm2835_peripherals_base = (uint32_t *)(buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0);
   19354:	e5dd100d 	ldrb	r1, [sp, #13]
   19358:	e5dd300c 	ldrb	r3, [sp, #12]
   1935c:	e5dd200f 	ldrb	r2, [sp, #15]
   19360:	e5dd000e 	ldrb	r0, [sp, #14]
   19364:	e1a01801 	lsl	r1, r1, #16
   19368:	e1813c03 	orr	r3, r1, r3, lsl #24
   1936c:	e59f108c 	ldr	r1, [pc, #140]	; 19400 <bcm2835_init+0x2b8>
   19370:	e1833002 	orr	r3, r3, r2
   19374:	e1833400 	orr	r3, r3, r0, lsl #8
   19378:	e5813028 	str	r3, [r1, #40]	; 0x28
   1937c:	eaffff9c 	b	191f4 <bcm2835_init+0xac>
    {
      /* Not root, try /dev/gpiomem */
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/gpiomem", O_RDWR | O_SYNC) ) < 0) 
	{
	  fprintf(stderr, "bcm2835_init: Unable to open /dev/gpiomem: %s\n",
   19380:	e59f30b0 	ldr	r3, [pc, #176]	; 19438 <bcm2835_init+0x2f0>
   19384:	e5934000 	ldr	r4, [r3]
		  strerror(errno)) ;
   19388:	ebffdf49 	bl	110b4 <__errno_location@plt>
    {
      /* Not root, try /dev/gpiomem */
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/gpiomem", O_RDWR | O_SYNC) ) < 0) 
	{
	  fprintf(stderr, "bcm2835_init: Unable to open /dev/gpiomem: %s\n",
   1938c:	e5900000 	ldr	r0, [r0]
   19390:	ebffdf17 	bl	10ff4 <strerror@plt>
   19394:	e59f10a0 	ldr	r1, [pc, #160]	; 1943c <bcm2835_init+0x2f4>
   19398:	e1a02000 	mov	r2, r0
   1939c:	e1a00004 	mov	r0, r4
   193a0:	ebffdf37 	bl	11084 <fprintf@plt>
}

/* Close this library and deallocate everything */
int bcm2835_close(void)
{
    if (debug) return 1; /* Success */
   193a4:	e5d54000 	ldrb	r4, [r5]
   193a8:	e3540000 	cmp	r4, #0
   193ac:	13a00000 	movne	r0, #0
   193b0:	1affff7e 	bne	191b0 <bcm2835_init+0x68>
   193b4:	ebfff918 	bl	1781c <bcm2835_close.part.1>
   193b8:	e1a00004 	mov	r0, r4
   193bc:	eaffff7b 	b	191b0 <bcm2835_init+0x68>
    if (geteuid() == 0)
    {
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/mem", O_RDWR | O_SYNC) ) < 0) 
	{
	  fprintf(stderr, "bcm2835_init: Unable to open /dev/mem: %s\n",
   193c0:	e59f3070 	ldr	r3, [pc, #112]	; 19438 <bcm2835_init+0x2f0>
   193c4:	e5934000 	ldr	r4, [r3]
		  strerror(errno)) ;
   193c8:	ebffdf39 	bl	110b4 <__errno_location@plt>
    if (geteuid() == 0)
    {
      /* Open the master /dev/mem device */
      if ((memfd = open("/dev/mem", O_RDWR | O_SYNC) ) < 0) 
	{
	  fprintf(stderr, "bcm2835_init: Unable to open /dev/mem: %s\n",
   193cc:	e5900000 	ldr	r0, [r0]
   193d0:	ebffdf07 	bl	10ff4 <strerror@plt>
   193d4:	e59f1064 	ldr	r1, [pc, #100]	; 19440 <bcm2835_init+0x2f8>
   193d8:	e1a02000 	mov	r2, r0
   193dc:	e1a00004 	mov	r0, r4
   193e0:	ebffdf27 	bl	11084 <fprintf@plt>
		  strerror(errno)) ;
	  goto exit;
   193e4:	eaffffee 	b	193a4 <bcm2835_init+0x25c>
   193e8:	ebfff91e 	bl	17868 <mapmem.part.0.constprop.3>
      ok = 1;
    }

exit:
    if (memfd >= 0)
        close(memfd);
   193ec:	e1a00007 	mov	r0, r7
	  goto exit;
	}
      
      /* Base of the peripherals block is mapped to VM */
      bcm2835_peripherals_base = 0;
      bcm2835_peripherals = mapmem("gpio", bcm2835_peripherals_size, memfd, (uint32_t)bcm2835_peripherals_base);
   193f0:	e5846004 	str	r6, [r4, #4]
      ok = 1;
    }

exit:
    if (memfd >= 0)
        close(memfd);
   193f4:	ebffdf7f 	bl	111f8 <close@plt>
   193f8:	eaffffe9 	b	193a4 <bcm2835_init+0x25c>
   193fc:	0002d16c 	.word	0x0002d16c
   19400:	0002b960 	.word	0x0002b960
   19404:	20205000 	.word	0x20205000
   19408:	20100000 	.word	0x20100000
   1940c:	20101000 	.word	0x20101000
   19410:	20200000 	.word	0x20200000
   19414:	2020c000 	.word	0x2020c000
   19418:	20204000 	.word	0x20204000
   1941c:	20804000 	.word	0x20804000
   19420:	20003000 	.word	0x20003000
   19424:	0001b07c 	.word	0x0001b07c
   19428:	0001b09c 	.word	0x0001b09c
   1942c:	0001b0a0 	.word	0x0001b0a0
   19430:	00101002 	.word	0x00101002
   19434:	0001b0d8 	.word	0x0001b0d8
   19438:	0002b990 	.word	0x0002b990
   1943c:	0001b0e8 	.word	0x0001b0e8
   19440:	0001b0ac 	.word	0x0001b0ac

00019444 <bcm2835_close>:
    return ok;
}

/* Close this library and deallocate everything */
int bcm2835_close(void)
{
   19444:	e92d4008 	push	{r3, lr}
    if (debug) return 1; /* Success */
   19448:	e59f3014 	ldr	r3, [pc, #20]	; 19464 <bcm2835_close+0x20>
   1944c:	e5d33000 	ldrb	r3, [r3]
   19450:	e3530000 	cmp	r3, #0
   19454:	1a000000 	bne	1945c <bcm2835_close+0x18>
   19458:	ebfff8ef 	bl	1781c <bcm2835_close.part.1>
    bcm2835_spi0 = MAP_FAILED;
    bcm2835_bsc0 = MAP_FAILED;
    bcm2835_bsc1 = MAP_FAILED;
    bcm2835_st   = MAP_FAILED;
    return 1; /* Success */
}    
   1945c:	e3a00001 	mov	r0, #1
   19460:	e8bd8008 	pop	{r3, pc}
   19464:	0002d16c 	.word	0x0002d16c

00019468 <__aeabi_uidiv>:
   19468:	e2512001 	subs	r2, r1, #1
   1946c:	012fff1e 	bxeq	lr
   19470:	3a000074 	bcc	19648 <__aeabi_uidiv+0x1e0>
   19474:	e1500001 	cmp	r0, r1
   19478:	9a00006b 	bls	1962c <__aeabi_uidiv+0x1c4>
   1947c:	e1110002 	tst	r1, r2
   19480:	0a00006c 	beq	19638 <__aeabi_uidiv+0x1d0>
   19484:	e16f3f10 	clz	r3, r0
   19488:	e16f2f11 	clz	r2, r1
   1948c:	e0423003 	sub	r3, r2, r3
   19490:	e273301f 	rsbs	r3, r3, #31
   19494:	10833083 	addne	r3, r3, r3, lsl #1
   19498:	e3a02000 	mov	r2, #0
   1949c:	108ff103 	addne	pc, pc, r3, lsl #2
   194a0:	e1a00000 	nop			; (mov r0, r0)
   194a4:	e1500f81 	cmp	r0, r1, lsl #31
   194a8:	e0a22002 	adc	r2, r2, r2
   194ac:	20400f81 	subcs	r0, r0, r1, lsl #31
   194b0:	e1500f01 	cmp	r0, r1, lsl #30
   194b4:	e0a22002 	adc	r2, r2, r2
   194b8:	20400f01 	subcs	r0, r0, r1, lsl #30
   194bc:	e1500e81 	cmp	r0, r1, lsl #29
   194c0:	e0a22002 	adc	r2, r2, r2
   194c4:	20400e81 	subcs	r0, r0, r1, lsl #29
   194c8:	e1500e01 	cmp	r0, r1, lsl #28
   194cc:	e0a22002 	adc	r2, r2, r2
   194d0:	20400e01 	subcs	r0, r0, r1, lsl #28
   194d4:	e1500d81 	cmp	r0, r1, lsl #27
   194d8:	e0a22002 	adc	r2, r2, r2
   194dc:	20400d81 	subcs	r0, r0, r1, lsl #27
   194e0:	e1500d01 	cmp	r0, r1, lsl #26
   194e4:	e0a22002 	adc	r2, r2, r2
   194e8:	20400d01 	subcs	r0, r0, r1, lsl #26
   194ec:	e1500c81 	cmp	r0, r1, lsl #25
   194f0:	e0a22002 	adc	r2, r2, r2
   194f4:	20400c81 	subcs	r0, r0, r1, lsl #25
   194f8:	e1500c01 	cmp	r0, r1, lsl #24
   194fc:	e0a22002 	adc	r2, r2, r2
   19500:	20400c01 	subcs	r0, r0, r1, lsl #24
   19504:	e1500b81 	cmp	r0, r1, lsl #23
   19508:	e0a22002 	adc	r2, r2, r2
   1950c:	20400b81 	subcs	r0, r0, r1, lsl #23
   19510:	e1500b01 	cmp	r0, r1, lsl #22
   19514:	e0a22002 	adc	r2, r2, r2
   19518:	20400b01 	subcs	r0, r0, r1, lsl #22
   1951c:	e1500a81 	cmp	r0, r1, lsl #21
   19520:	e0a22002 	adc	r2, r2, r2
   19524:	20400a81 	subcs	r0, r0, r1, lsl #21
   19528:	e1500a01 	cmp	r0, r1, lsl #20
   1952c:	e0a22002 	adc	r2, r2, r2
   19530:	20400a01 	subcs	r0, r0, r1, lsl #20
   19534:	e1500981 	cmp	r0, r1, lsl #19
   19538:	e0a22002 	adc	r2, r2, r2
   1953c:	20400981 	subcs	r0, r0, r1, lsl #19
   19540:	e1500901 	cmp	r0, r1, lsl #18
   19544:	e0a22002 	adc	r2, r2, r2
   19548:	20400901 	subcs	r0, r0, r1, lsl #18
   1954c:	e1500881 	cmp	r0, r1, lsl #17
   19550:	e0a22002 	adc	r2, r2, r2
   19554:	20400881 	subcs	r0, r0, r1, lsl #17
   19558:	e1500801 	cmp	r0, r1, lsl #16
   1955c:	e0a22002 	adc	r2, r2, r2
   19560:	20400801 	subcs	r0, r0, r1, lsl #16
   19564:	e1500781 	cmp	r0, r1, lsl #15
   19568:	e0a22002 	adc	r2, r2, r2
   1956c:	20400781 	subcs	r0, r0, r1, lsl #15
   19570:	e1500701 	cmp	r0, r1, lsl #14
   19574:	e0a22002 	adc	r2, r2, r2
   19578:	20400701 	subcs	r0, r0, r1, lsl #14
   1957c:	e1500681 	cmp	r0, r1, lsl #13
   19580:	e0a22002 	adc	r2, r2, r2
   19584:	20400681 	subcs	r0, r0, r1, lsl #13
   19588:	e1500601 	cmp	r0, r1, lsl #12
   1958c:	e0a22002 	adc	r2, r2, r2
   19590:	20400601 	subcs	r0, r0, r1, lsl #12
   19594:	e1500581 	cmp	r0, r1, lsl #11
   19598:	e0a22002 	adc	r2, r2, r2
   1959c:	20400581 	subcs	r0, r0, r1, lsl #11
   195a0:	e1500501 	cmp	r0, r1, lsl #10
   195a4:	e0a22002 	adc	r2, r2, r2
   195a8:	20400501 	subcs	r0, r0, r1, lsl #10
   195ac:	e1500481 	cmp	r0, r1, lsl #9
   195b0:	e0a22002 	adc	r2, r2, r2
   195b4:	20400481 	subcs	r0, r0, r1, lsl #9
   195b8:	e1500401 	cmp	r0, r1, lsl #8
   195bc:	e0a22002 	adc	r2, r2, r2
   195c0:	20400401 	subcs	r0, r0, r1, lsl #8
   195c4:	e1500381 	cmp	r0, r1, lsl #7
   195c8:	e0a22002 	adc	r2, r2, r2
   195cc:	20400381 	subcs	r0, r0, r1, lsl #7
   195d0:	e1500301 	cmp	r0, r1, lsl #6
   195d4:	e0a22002 	adc	r2, r2, r2
   195d8:	20400301 	subcs	r0, r0, r1, lsl #6
   195dc:	e1500281 	cmp	r0, r1, lsl #5
   195e0:	e0a22002 	adc	r2, r2, r2
   195e4:	20400281 	subcs	r0, r0, r1, lsl #5
   195e8:	e1500201 	cmp	r0, r1, lsl #4
   195ec:	e0a22002 	adc	r2, r2, r2
   195f0:	20400201 	subcs	r0, r0, r1, lsl #4
   195f4:	e1500181 	cmp	r0, r1, lsl #3
   195f8:	e0a22002 	adc	r2, r2, r2
   195fc:	20400181 	subcs	r0, r0, r1, lsl #3
   19600:	e1500101 	cmp	r0, r1, lsl #2
   19604:	e0a22002 	adc	r2, r2, r2
   19608:	20400101 	subcs	r0, r0, r1, lsl #2
   1960c:	e1500081 	cmp	r0, r1, lsl #1
   19610:	e0a22002 	adc	r2, r2, r2
   19614:	20400081 	subcs	r0, r0, r1, lsl #1
   19618:	e1500001 	cmp	r0, r1
   1961c:	e0a22002 	adc	r2, r2, r2
   19620:	20400001 	subcs	r0, r0, r1
   19624:	e1a00002 	mov	r0, r2
   19628:	e12fff1e 	bx	lr
   1962c:	03a00001 	moveq	r0, #1
   19630:	13a00000 	movne	r0, #0
   19634:	e12fff1e 	bx	lr
   19638:	e16f2f11 	clz	r2, r1
   1963c:	e262201f 	rsb	r2, r2, #31
   19640:	e1a00230 	lsr	r0, r0, r2
   19644:	e12fff1e 	bx	lr
   19648:	e3500000 	cmp	r0, #0
   1964c:	13e00000 	mvnne	r0, #0
   19650:	ea000007 	b	19674 <__aeabi_idiv0>

00019654 <__aeabi_uidivmod>:
   19654:	e3510000 	cmp	r1, #0
   19658:	0afffffa 	beq	19648 <__aeabi_uidiv+0x1e0>
   1965c:	e92d4003 	push	{r0, r1, lr}
   19660:	ebffff80 	bl	19468 <__aeabi_uidiv>
   19664:	e8bd4006 	pop	{r1, r2, lr}
   19668:	e0030092 	mul	r3, r2, r0
   1966c:	e0411003 	sub	r1, r1, r3
   19670:	e12fff1e 	bx	lr

00019674 <__aeabi_idiv0>:
   19674:	e92d4002 	push	{r1, lr}
   19678:	e3a00008 	mov	r0, #8
   1967c:	ebffde05 	bl	10e98 <raise@plt>
   19680:	e8bd8002 	pop	{r1, pc}

00019684 <__libc_csu_init>:
   19684:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   19688:	e1a07000 	mov	r7, r0
   1968c:	e59f604c 	ldr	r6, [pc, #76]	; 196e0 <__libc_csu_init+0x5c>
   19690:	e59f504c 	ldr	r5, [pc, #76]	; 196e4 <__libc_csu_init+0x60>
   19694:	e08f6006 	add	r6, pc, r6
   19698:	e08f5005 	add	r5, pc, r5
   1969c:	e0656006 	rsb	r6, r5, r6
   196a0:	e1a08001 	mov	r8, r1
   196a4:	e1a09002 	mov	r9, r2
   196a8:	ebffddf2 	bl	10e78 <_init>
   196ac:	e1b06146 	asrs	r6, r6, #2
   196b0:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   196b4:	e2455004 	sub	r5, r5, #4
   196b8:	e3a04000 	mov	r4, #0
   196bc:	e2844001 	add	r4, r4, #1
   196c0:	e5b53004 	ldr	r3, [r5, #4]!
   196c4:	e1a00007 	mov	r0, r7
   196c8:	e1a01008 	mov	r1, r8
   196cc:	e1a02009 	mov	r2, r9
   196d0:	e12fff33 	blx	r3
   196d4:	e1540006 	cmp	r4, r6
   196d8:	1afffff7 	bne	196bc <__libc_csu_init+0x38>
   196dc:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   196e0:	00011a8c 	.word	0x00011a8c
   196e4:	00011a84 	.word	0x00011a84

000196e8 <__libc_csu_fini>:
   196e8:	e12fff1e 	bx	lr

Disassembly of section .fini:

000196ec <_fini>:
   196ec:	e92d4008 	push	{r3, lr}
   196f0:	e8bd8008 	pop	{r3, pc}
